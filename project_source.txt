Project: performance-app
Version: 0.1.0
Generated: 2025-01-14T23:05:58.370Z
================================================================================

File: concat-files.js
================================================================================

const fs = require('fs').promises;
const path = require('path');

async function concatenateSourceFiles(rootDir, outputFile) {
    // List of important file patterns to include
    const importantFiles = [
        // Source files
        '.js', '.jsx', '.ts', '.tsx', '.css', '.scss',
        // Config files
        'tailwind.config.js',
        'postcss.config.js',
        'package.json',
        'tsconfig.json',
        'vite.config.js',
        'next.config.js',
        '.env.example',
        '.babelrc',
        // Style files
        'global.css',
        'tailwind.css',
        'styles.css',
        // Documentation
        'README.md'
    ];

    let concatenatedContent = '';
    
    // Add project metadata
    const packageJson = await fs.readFile(path.join(rootDir, 'package.json'), 'utf8')
        .catch(() => '{ "name": "project", "version": "unknown" }');
    const pkg = JSON.parse(packageJson);
    
    concatenatedContent += `Project: ${pkg.name}\n`;
    concatenatedContent += `Version: ${pkg.version}\n`;
    concatenatedContent += `Generated: ${new Date().toISOString()}\n`;
    concatenatedContent += '='.repeat(80) + '\n\n';

    async function processDirectory(dir, isRoot = false) {
        const items = await fs.readdir(dir, { withFileTypes: true });
        
        for (const item of items) {
            const fullPath = path.join(dir, item.name);
            
            // Skip node_modules, .git, and build directories
            if (item.isDirectory()) {
                if (!['node_modules', '.git', 'dist', 'build', '.next'].includes(item.name)) {
                    await processDirectory(fullPath);
                }
                continue;
            }
            
            // Check if file should be included
            const extension = path.extname(item.name);
            const shouldInclude = importantFiles.some(pattern => 
                pattern.startsWith('.') ? extension === pattern : item.name === pattern
            );
            
            if (shouldInclude) {
                try {
                    // Read file content
                    const content = await fs.readFile(fullPath, 'utf8');
                    
                    // Add file header
                    concatenatedContent += `File: ${path.relative(rootDir, fullPath)}\n`;
                    concatenatedContent += `${'='.repeat(80)}\n\n`;
                    concatenatedContent += content;
                    concatenatedContent += '\n\n';
                } catch (error) {
                    concatenatedContent += `Error reading file: ${fullPath}\n`;
                    concatenatedContent += `${error.message}\n\n`;
                }
            }
        }
    }

    try {
        // First process root directory for config files
        await processDirectory(rootDir, true);
        
        // Then process src directory if it exists
        const srcDir = path.join(rootDir, 'src');
        try {
            await fs.access(srcDir);
            await processDirectory(srcDir);
        } catch (error) {
            console.log('No src directory found, skipping...');
        }

        // Write concatenated content to output file
        await fs.writeFile(outputFile, concatenatedContent);
        console.log(`Successfully concatenated source files to ${outputFile}`);
    } catch (error) {
        console.error('Error:', error);
    }
}

// Example usage
const projectRoot = '.';  // Current directory
const outputFile = 'project_source.txt';

concatenateSourceFiles(projectRoot, outputFile);

File: package.json
================================================================================

{
  "name": "performance-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@firebase/auth": "^1.8.1",
    "@heroicons/react": "^2.2.0",
    "chart.js": "^4.4.7",
    "cra-template": "1.2.0",
    "firebase": "^11.1.0",
    "framer-motion": "^11.16.4",
    "lucide-react": "^0.469.0",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.4.0",
    "react-router-dom": "^7.1.1",
    "react-scripts": "5.0.1",
    "sharp": "^0.33.5",
    "slugify": "^1.6.6"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "optimize-images": "node scripts/optimize-images.js"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17"
  }
}


File: postcss.config.js
================================================================================

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


File: public\service-worker.js
================================================================================

const CACHE_NAME = 'ultify-cache-v2'; // Increment version for updates
const IMAGE_CACHE_NAME = 'ultify-images-v1';
const DATA_CACHE_NAME = 'ultify-data-v1';

// Static assets to cache immediately
const STATIC_ASSETS = [
  '/',
  '/index.html',
  '/manifest.json',
  '/static/css/main.css',
  '/static/js/main.js',
  '/favicon.svg',
];

// Image assets to cache on first use
const IMAGE_ASSETS = [
  '/images/background-sm.webp',
  '/images/background-md.webp',
  '/images/background-lg.webp',
  '/images/background-mobileSm.webp',
  '/images/background-mobileMd.webp',
  '/images/background-mobileLg.webp',
  '/images/background-placeholder.webp',
  '/icons/icon-72x72.png',
  '/icons/icon-144x144.png',
  '/icons/icon-192x192.png',
  '/icons/icon-256x256.png',
  '/icons/icon-384x384.png',
  '/icons/icon-512x512.png',
];

// Install Service Worker
self.addEventListener('install', (event) => {
  event.waitUntil(
    Promise.all([
      // Cache static assets immediately
      caches.open(CACHE_NAME).then((cache) => {
        return cache.addAll(STATIC_ASSETS);
      }),
      // Pre-cache the tiny placeholder image
      caches.open(IMAGE_CACHE_NAME).then((cache) => {
        return cache.add('/images/background-placeholder.webp');
      })
    ])
  );
  self.skipWaiting();
});

// Activate and Clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames
          .filter((cacheName) => {
            // Remove any cache that doesn't match our current versions
            return (
              cacheName !== CACHE_NAME &&
              cacheName !== DATA_CACHE_NAME &&
              cacheName !== IMAGE_CACHE_NAME
            );
          })
          .map((cacheName) => {
            return caches.delete(cacheName);
          })
      );
    }).then(() => {
      // Notify clients about the update
      self.clients.matchAll().then(clients => {
        clients.forEach(client => client.postMessage({ type: 'CACHE_UPDATED' }));
      });
    })
  );
  self.clients.claim();
});

// Helper function to check if request is for an image
function isImageRequest(request) {
  return request.destination === 'image' || 
         IMAGE_ASSETS.some(asset => request.url.includes(asset));
}

// Helper function for network request with timeout
async function timeoutFetch(request, timeout = 3000) {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);
    const response = await fetch(request, { signal: controller.signal });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    throw error;
  }
}

// Fetch handler with optimized strategies
self.addEventListener('fetch', (event) => {
  const url = new URL(event.request.url);

  // Handle API requests
  if (url.pathname.startsWith('/api/')) {
    event.respondWith(
      timeoutFetch(event.request)
        .then((response) => {
          if (response.status === 200) {
            const responseClone = response.clone();
            caches.open(DATA_CACHE_NAME).then((cache) => {
              cache.put(event.request, responseClone);
            });
          }
          return response;
        })
        .catch(() => {
          return caches.match(event.request).then(response => {
            return response || new Response(JSON.stringify({ error: 'offline' }), {
              headers: { 'Content-Type': 'application/json' }
            });
          });
        })
    );
    return;
  }

  // Handle image requests
  if (isImageRequest(event.request)) {
    event.respondWith(
      caches.match(event.request).then((cachedResponse) => {
        // Return cached response if available
        if (cachedResponse) {
          // Fetch and cache update in background
          event.waitUntil(
            timeoutFetch(event.request).then(response => {
              if (response.ok) {
                caches.open(IMAGE_CACHE_NAME).then(cache => {
                  cache.put(event.request, response);
                });
              }
            })
          );
          return cachedResponse;
        }

        // If not cached, fetch and cache
        return timeoutFetch(event.request).then(response => {
          if (response.ok) {
            const responseClone = response.clone();
            event.waitUntil(
              caches.open(IMAGE_CACHE_NAME).then(cache => {
                cache.put(event.request, responseClone);
              })
            );
          }
          return response;
        });
      })
    );
    return;
  }

  // Handle other static assets
  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      if (cachedResponse) {
        return cachedResponse;
      }
      return timeoutFetch(event.request).then(response => {
        if (response.ok && (response.type === 'basic' || response.type === 'cors')) {
          const responseClone = response.clone();
          event.waitUntil(
            caches.open(CACHE_NAME).then(cache => {
              cache.put(event.request, responseClone);
            })
          );
        }
        return response;
      });
    })
  );
});

// Handle background sync
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-data') {
    event.waitUntil(
      // Implement your sync logic here
      Promise.resolve()
    );
  }
});

// Handle push notifications
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    event.waitUntil(
      self.registration.showNotification(data.title, {
        body: data.message,
        icon: '/icons/icon-192x192.png'
      })
    );
  }
});

File: README.md
================================================================================

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


File: scripts\optimize-images.js
================================================================================

const sharp = require('sharp');
const path = require('path');

// Input image path
const inputImage = path.join(__dirname, '../src/assets/background.jpg');

// Output directory
const outputDir = path.join(__dirname, '../public/images');

// Define size variants (maintaining 16:9 aspect ratio)
const sizeVariants = {
  sm: { width: 640, height: 360 },    // Small screens
  md: { width: 1280, height: 720 },   // Medium screens
  lg: { width: 1920, height: 1080 },  // Large screens/desktop
};

// Create different sizes and formats
async function optimizeImages() {
  try {
    // Generate WebP versions for all sizes
    for (const [size, dimensions] of Object.entries(sizeVariants)) {
      // WebP version
      await sharp(inputImage)
        .resize(dimensions.width, dimensions.height, {
          fit: 'cover',
          withoutEnlargement: true // Prevents upscaling if original is smaller
        })
        .webp({ 
          quality: 80,
          effort: 6, // Higher compression effort
          smartSubsample: true // Better color detail preservation
        })
        .toFile(path.join(outputDir, `background-${size}.webp`));

      // JPEG fallback
      await sharp(inputImage)
        .resize(dimensions.width, dimensions.height, {
          fit: 'cover',
          withoutEnlargement: true
        })
        .jpeg({ 
          quality: 80,
          progressive: true,
          mozjpeg: true, // Use mozjpeg for better compression
          chromaSubsampling: '4:4:4' // Better quality
        })
        .toFile(path.join(outputDir, `background-${size}.jpg`));
    }

    // Generate special mobile-optimized versions (still landscape)
    const mobileVariants = {
      mobileSm: { width: 640, height: 360 },
      mobileMd: { width: 960, height: 540 },
      mobileLg: { width: 1280, height: 720 }
    };

    for (const [size, dimensions] of Object.entries(mobileVariants)) {
      await sharp(inputImage)
        .resize(dimensions.width, dimensions.height, {
          fit: 'cover',
          withoutEnlargement: true
        })
        .webp({ 
          quality: 80,
          effort: 6,
          smartSubsample: true
        })
        .toFile(path.join(outputDir, `background-${size}.webp`));

      await sharp(inputImage)
        .resize(dimensions.width, dimensions.height, {
          fit: 'cover',
          withoutEnlargement: true
        })
        .jpeg({ 
          quality: 80,
          progressive: true,
          mozjpeg: true,
          chromaSubsampling: '4:4:4'
        })
        .toFile(path.join(outputDir, `background-${size}.jpg`));
    }

    // Generate a tiny placeholder for blur-up effect
    await sharp(inputImage)
      .resize(20, 11) // Tiny version maintaining aspect ratio
      .blur(2) // Slight blur for better placeholder appearance
      .webp({ quality: 20 })
      .toFile(path.join(outputDir, 'background-placeholder.webp'));

    console.log('Images optimized successfully!');
    
    // Log out the file sizes for verification
    const files = await Promise.all([
      sharp(path.join(outputDir, 'background-sm.webp')).metadata(),
      sharp(path.join(outputDir, 'background-md.webp')).metadata(),
      sharp(path.join(outputDir, 'background-lg.webp')).metadata(),
      sharp(path.join(outputDir, 'background-mobileSm.webp')).metadata(),
      sharp(path.join(outputDir, 'background-mobileMd.webp')).metadata(),
      sharp(path.join(outputDir, 'background-mobileLg.webp')).metadata(),
    ]);
    
    console.log('Generated file sizes:');
    files.forEach(file => {
      console.log(`${file.width}x${file.height}: ${(file.size / 1024).toFixed(2)}KB`);
    });

  } catch (error) {
    console.error('Error optimizing images:', error);
    process.exit(1);
  }
}

// Run the optimization
optimizeImages();

File: src\App.css
================================================================================

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}
/* Ensure dropdowns are visible globally */
.dropdown-container {
  position: relative;
  z-index: 1;
}

.dropdown-menu {
  position: absolute;
  z-index: 9999; /* Always on top */
}

.fixed-dropdown-wrapper {
  position: relative;
  z-index: 9999;
}

/* Ensure the dropdown menu is always on top */
.fixed-dropdown-wrapper [role="listbox"] {
  z-index: 9999;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


File: src\App.jsx
================================================================================

import { lazy, Suspense } from 'react';
import { Routes, Route } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import { LoadingState } from './components/LoadingState';

// Lazy load components
const LoginPage = lazy(() => import('./components/auth/LoginPage'));
const Dashboard = lazy(() => import('./Dashboard'));
const ProtectedRoute = lazy(() => import('./components/auth/ProtectedRoute'));

function App() {
  return (
    <AuthProvider>
      <Routes>
        <Route 
          path="/login" 
          element={
            <Suspense fallback={
              <div className="min-h-screen bg-gray-900 flex items-center justify-center">
                <h1 className="text-xl text-gray-200">Welcome back</h1>
              </div>
            }>
              <LoginPage />
            </Suspense>
          } 
        />
        <Route
          path="/*"
          element={
            <Suspense fallback={<LoadingState />}>
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            </Suspense>
          }
        />
      </Routes>
    </AuthProvider>
  );
}

export default App;

File: src\App.test.js
================================================================================

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


File: src\components\AthleteDropdown.jsx
================================================================================

// src/components/AthleteDropdown.jsx

import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

const AthleteDropdown = ({ athletes, selectedAthleteId, onSelectAthlete }) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef();

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target)
      ) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Get the selected athlete's name
  const selectedAthlete = athletes.find(a => a.id === selectedAthleteId);

  return (
    <div className="absolute top-4 right-4 md:top-6 md:right-6" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center bg-gray-800 text-gray-300 hover:bg-gray-700 px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-emerald-500"
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        <span className="mr-2 text-sm">{selectedAthlete ? selectedAthlete.name : "Select Athlete"}</span>
        <ChevronDown className="w-4 h-4" aria-hidden="true" />
      </button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="mt-2 w-48 bg-gray-800 rounded-md shadow-lg z-30"
            role="listbox"
            aria-labelledby="athlete-dropdown"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            transition={{ duration: 0.2 }}
          >
            <ul className="py-1">
              {athletes.map(athlete => (
                <li key={athlete.id}>
                  <button
                    onClick={() => {
                      onSelectAthlete(athlete.id);
                      setIsOpen(false);
                    }}
                    className={`w-full text-left px-4 py-2 text-sm ${
                      athlete.id === selectedAthleteId
                        ? 'bg-gray-700 text-white'
                        : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                    }`}
                    role="option"
                    aria-selected={athlete.id === selectedAthleteId}
                  >
                    {athlete.name}
                  </button>
                </li>
              ))}
            </ul>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default AthleteDropdown;


File: src\components\auth\LoginPage.jsx
================================================================================

import React, { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Mail, 
  Lock, 
  AlertCircle, 
  Loader2, 
  ArrowRight,
  CheckCircle 
} from 'lucide-react';

export default function LoginPage() {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [isResetPassword, setIsResetPassword] = useState(false);
  const navigate = useNavigate();
  const { login, signup, loginWithGoogle, resetPassword } = useAuth();

  // Function to handle user-friendly error messages
  const getErrorMessage = useCallback((error) => {
    switch (error.code) {
      case 'auth/invalid-credential':
        return 'Invalid email or password. Please check your credentials and try again.';
      case 'auth/wrong-password':
        return 'Incorrect password. Please try again.';
      case 'auth/user-not-found':
        return 'No account found with this email.';
      case 'auth/email-already-in-use':
        return 'An account already exists with this email.';
      case 'auth/weak-password':
        return 'Password should be at least 6 characters.';
      case 'auth/invalid-email':
        return 'Please enter a valid email address.';
      case 'auth/too-many-requests':
        return 'Too many attempts. Please try again later.';
      case 'auth/network-request-failed':
        return 'Network error. Please check your internet connection and try again.';
      case 'auth/popup-closed-by-user':
        return 'Sign in was cancelled. Please try again.';
      case 'auth/cancelled-popup-request':
        return 'Sign in process was interrupted. Please try again.';
      case 'auth/operation-not-allowed':
        return 'This sign in method is not enabled. Please try another method.';
      case 'auth/user-disabled':
        return 'This account has been disabled. Please contact support for assistance.';
      default:
        return error.message || 'An error occurred. Please try again.';
    }
}, []);

  const clearMessages = useCallback(() => {
    setError('');
    setSuccessMessage('');
  }, []);

  const resetForm = useCallback(() => {
    setEmail('');
    setPassword('');
    clearMessages();
  }, [clearMessages]);

  const handleAuthModeChange = useCallback((mode) => {
    if (mode === 'reset') {
      setIsResetPassword(true);
      setIsLogin(true);
    } else {
      setIsResetPassword(false);
      setIsLogin(mode === 'login');
    }
    clearMessages();
  }, [clearMessages]);

  async function handleSubmit(e) {
    e.preventDefault();
    clearMessages();
    setLoading(true);

    try {
      if (isResetPassword) {
        await resetPassword(email);
        setSuccessMessage('Password reset email sent! Please check your inbox.');
        setIsResetPassword(false);
      } else if (isLogin) {
        await login(email, password);
        resetForm();
        navigate('/');
      } else {
        await signup(email, password);
        resetForm();
        navigate('/');
      }
    } catch (err) {
      setError(getErrorMessage(err));
    } finally {
      setLoading(false);
    }
  }

  async function handleGoogleLogin() {
    clearMessages();
    setLoading(true);

    try {
      await loginWithGoogle();
      resetForm();
      navigate('/');
    } catch (err) {
      setError(getErrorMessage(err));
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 flex flex-col items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Logo/Brand Section */}
        <div className="text-center mb-8">
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            <div className="w-16 h-16 mx-auto mb-4 flex items-center justify-center">
              <img src="/favicon.svg" alt="Logo" className="w-full h-full" />
            </div>
          </motion.div>
          <h2 className="text-2xl md:text-3xl font-bold text-white">
            {isResetPassword 
              ? 'Reset Password'
              : isLogin 
                ? 'Welcome back' 
                : 'Create your account'}
          </h2>
          <p className="mt-2 text-gray-400 text-sm">
            {isResetPassword
              ? 'Enter your email and we will send you reset instructions.'
              : isLogin 
                ? 'Great to see you again! Please enter your details.'
                : 'Start your performance tracking journey today.'}
          </p>
        </div>

        {/* Main Form */}
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.4, delay: 0.1 }}
          className="bg-gray-800/50 backdrop-blur-xl rounded-2xl p-6 md:p-8 shadow-xl border border-gray-700/50"
        >
          <AnimatePresence mode="wait">
            {error && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="mb-4 p-3 rounded-lg bg-red-500/10 border border-red-500/50 flex items-center gap-2"
              >
                <AlertCircle className="h-4 w-4 text-red-500 flex-shrink-0" />
                <p className="text-sm text-red-500">{error}</p>
              </motion.div>
            )}
            {successMessage && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="mb-4 p-3 rounded-lg bg-emerald-500/10 border border-emerald-500/50 flex items-center gap-2"
              >
                <CheckCircle className="h-4 w-4 text-emerald-500 flex-shrink-0" />
                <p className="text-sm text-emerald-500">{successMessage}</p>
              </motion.div>
            )}
          </AnimatePresence>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-1">
              <label htmlFor="email" className="text-sm font-medium text-gray-300">
                Email
              </label>
              <div className="relative">
                <input
                  id="email"
                  type="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full px-4 py-2.5 rounded-lg bg-gray-900/50 border border-gray-700 text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500 transition-colors"
                  placeholder="you@example.com"
                />
                <Mail className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
              </div>
            </div>

            {!isResetPassword && (
              <div className="space-y-1">
                <div className="flex items-center justify-between">
                  <label htmlFor="password" className="text-sm font-medium text-gray-300">
                    Password
                  </label>
                  {isLogin && (
                    <button
                      type="button"
                      onClick={() => handleAuthModeChange('reset')}
                      className="text-sm text-emerald-400 hover:text-emerald-300 transition-colors"
                    >
                      Forgot password?
                    </button>
                  )}
                </div>
                <div className="relative">
                  <input
                    id="password"
                    type="password"
                    required={!isResetPassword}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full px-4 py-2.5 rounded-lg bg-gray-900/50 border border-gray-700 text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500 transition-colors"
                    placeholder="••••••••"
                  />
                  <Lock className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
                </div>
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-emerald-500 hover:bg-emerald-600 text-white py-2.5 rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {loading ? (
                <Loader2 className="w-5 h-5 animate-spin" />
              ) : (
                <>
                  {isResetPassword 
                    ? 'Send reset instructions' 
                    : isLogin 
                      ? 'Sign in' 
                      : 'Create account'}
                  <ArrowRight className="w-5 h-5" />
                </>
              )}
            </button>
          </form>

          {!isResetPassword && (
            <>
              <div className="mt-6">
                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-gray-700"></div>
                  </div>
                  <div className="relative flex justify-center text-sm">
                    <span className="px-2 bg-gray-800/50 text-gray-400">
                      Or continue with
                    </span>
                  </div>
                </div>

                <button
                  onClick={handleGoogleLogin}
                  disabled={loading}
                  className="mt-4 w-full flex items-center justify-center gap-3 px-4 py-2.5 border border-gray-700 rounded-lg text-gray-300 hover:bg-gray-700/50 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500"
                >
                  <svg className="h-5 w-5" viewBox="0 0 24 24">
                    <path
                      fill="currentColor"
                      d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
                    />
                  </svg>
                  Google
                </button>
              </div>
            </>
          )}

          <div className="mt-6 text-center space-y-3">
            {!isResetPassword && (
              <button
                onClick={() => handleAuthModeChange(isLogin ? 'signup' : 'login')}
                className="text-sm text-emerald-400 hover:text-emerald-300 transition-colors"
              >
                {isLogin ? "Don't have an account? Sign up" : 'Already have an account? Sign in'}
              </button>
            )}
            {isResetPassword && (
              <button
                onClick={() => handleAuthModeChange('login')}
                className="block w-full text-sm text-gray-400 hover:text-gray-300 transition-colors"
              >
                Return to login
              </button>
            )}
          </div>
        </motion.div>
      </div>
    </div>
  );
}

File: src\components\auth\ProtectedRoute.jsx
================================================================================

// src/components/auth/ProtectedRoute.jsx
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

export default function ProtectedRoute({ children }) {
  const { user } = useAuth();
  
  if (!user) {
    return <Navigate to="/login" replace />;
  }

  return children;
}

File: src\components\CategorySection.jsx
================================================================================

// src/components/CategorySection.jsx

import React from 'react';
import SkillCard from './SkillCard';

const CategorySection = ({ title, skills, player }) => {
  return (
    <div className="mb-6">
      <h2 className="text-xl font-semibold mb-3 text-gray-100">{title}</h2>
      <div className="space-y-2">
        {skills.map((skill) => (
          <SkillCard
            key={skill.key}
            label={skill.label}
            value={player[skill.key]}
          />
        ))}
      </div>
    </div>
  );
};

export default CategorySection;


File: src\components\FloatingActionButton.jsx
================================================================================

import React, { useState } from 'react';
import { Milestone } from 'lucide-react';

const FloatingActionButton = ({ onClick }) => {
  const [ripple, setRipple] = useState({ active: false, x: 0, y: 0 });

  const handleClick = (e) => {
    // Get click coordinates relative to button
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    // Trigger ripple
    setRipple({ active: true, x, y });
    
    // Reset ripple after animation
    setTimeout(() => setRipple({ active: false, x: 0, y: 0 }), 600);
    
    // Call the original onClick handler
    onClick();
  };

  return (
    <button
      onClick={handleClick}
      className="fixed bottom-6 right-6 bg-emerald-500 hover:bg-emerald-600 text-white p-3 rounded-full shadow-lg z-50 transition-colors duration-200 flex items-center justify-center overflow-hidden"
      aria-label="View Development Path"
    >
      <Milestone className="w-6 h-6" />
      {ripple.active && (
        <span
          className="absolute animate-ripple rounded-full bg-white/30"
          style={{
            left: ripple.x - 50,  // Center the 100px wide ripple
            top: ripple.y - 50,   // Center the 100px tall ripple
            width: '100px',
            height: '100px',
          }}
        />
      )}
    </button>
  );
};

export default FloatingActionButton;

File: src\components\HomeSection.jsx
================================================================================

// src/components/HomeSection.jsx

import React, { useState, useEffect } from 'react';
import RadarChart from './RadarChart';
import SwipeableInsights from './SwipeableInsights';
import SkillHierarchy from './SkillHierarchy';
import { computeCategoryAverages } from '../utils/helpers';

function HomeSection({ player }) {
  const [averages, setAverages] = useState({
    mental: 0,
    physical: 0,
    cutting: 0,
    handling: 0,
    throwing: 0,
    defensive: 0,
    offensive: 0,
  });

  useEffect(() => {
    const avg = computeCategoryAverages(player);
    setAverages(avg);
  }, [player]);

  // Radar chart data for 6 categories
  const radarLabels = ['Mental', 'Physical', 'Cutting', 'Handling', 'Throwing', 'Defense'];
  const radarDataValues = [
    averages.mental,
    averages.physical,
    averages.cutting,
    averages.handling,
    averages.throwing,
    averages.defensive,
  ];

  return (
    <div className="mx-auto space-y-6">
      {/* Key Insights (Top 3 strengths, etc.) */}
      <SwipeableInsights 
        player={player} 
        growthTargets={player.growth_targets || []}
      />

      {/* Main Stats Section */}
      <div className="grid gap-6 grid-cols-1 lg:grid-cols-2">
        {/* Radar Chart */}
        <div className="bg-gray-800 p-5 rounded-lg shadow-md">
          <h2 className="text-lg font-semibold text-gray-100 mb-4 mt-0">
            Category Averages
          </h2>
          <div className="w-full flex justify-center">
            <div className="w-full aspect-square max-w-[400px]">
              <RadarChart labels={radarLabels} dataValues={radarDataValues} />
            </div>
          </div>
        </div>

        {/* Skill Hierarchy */}
        <div className="bg-gray-800 p-5 rounded-lg shadow-md">
          <h2 className="text-lg font-semibold text-gray-100 mb-4 mt-0">
            Detailed Breakdown
          </h2>
          <div className="overflow-auto max-h-[400px] custom-scrollbar">
            <SkillHierarchy player={player} />
          </div>
        </div>
      </div>

      {/* Additional Info or Future Sections */}
      <div className="bg-gray-800 p-5 rounded-lg shadow-md">
        <h2 className="text-lg font-semibold text-gray-100 mb-4">
          Recent Progress
        </h2>
        <p className="text-gray-400 text-sm">
          Progress tracking section coming soon...
        </p>
      </div>
    </div>
  );
}

export default HomeSection;

File: src\components\InsightsSection.jsx
================================================================================

// src/components/InsightsSection.jsx

import React from 'react';
import { METADATA_KEYS } from '../utils/constants';

const InsightsSection = ({ player }) => {
  // Example logic: find top 3 skills (by numeric value)
  const skillEntries = Object.entries(player).filter(([key, val]) => {
    return typeof val === 'number' && !METADATA_KEYS.includes(key);
  });

  // Sort descending by value
  skillEntries.sort((a, b) => b[1] - a[1]);
  const topThree = skillEntries.slice(0, 3);

  return (
    <div className="mb-6">
      <h2 className="text-xl font-bold uppercase mb-2 text-gray-100">
        Key Insights
      </h2>
      <div className="bg-gray-800 p-4 rounded-lg shadow-md">
        <div className="text-gray-300 text-xs font-bold uppercase tracking-widest mb-2">
          <span className="font-semibold text-emerald-400">
            Top 3 Strengths:
          </span>
        </div>
        {topThree.map(([skillKey, skillValue]) => (
          <div key={skillKey} className="flex justify-between mb-1">
            <span className="capitalize text-gray-200">
              {skillKey.replace(/_/g, ' ')}
            </span>
            <span className="text-emerald-400 font-semibold">
              {skillValue}/10
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default InsightsSection;


File: src\components\InstallPrompt.jsx
================================================================================

// src/components/InstallPrompt.jsx
import React, { useState, useEffect } from 'react';

export function InstallPrompt() {
  const [installPrompt, setInstallPrompt] = useState(null);
  const [debugInfo, setDebugInfo] = useState({ 
    isStandalone: false, 
    hasShownPrompt: false,
    promptEventReceived: false 
  });

  useEffect(() => {
    console.log('[InstallPrompt] Component mounted');

    // Check if running in standalone mode
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches 
      || window.navigator.standalone 
      || document.referrer.includes('android-app://');
      
    console.log('[InstallPrompt] Is standalone:', isStandalone);

    const hasShownPrompt = localStorage.getItem('installPromptShown');
    console.log('[InstallPrompt] Previously shown:', hasShownPrompt);

    setDebugInfo(prev => ({
      ...prev,
      isStandalone,
      hasShownPrompt: !!hasShownPrompt
    }));

    // Handle the beforeinstallprompt event
    const handleBeforeInstallPrompt = (e) => {
      console.log('[InstallPrompt] beforeinstallprompt event fired', e);
      e.preventDefault();
      setInstallPrompt(e);
      setDebugInfo(prev => ({ ...prev, promptEventReceived: true }));
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);

    // Listen for appinstalled event
    const handleAppInstalled = (e) => {
      console.log('[InstallPrompt] App was installed', e);
      localStorage.setItem('installPromptShown', 'true');
      setInstallPrompt(null);
    };

    window.addEventListener('appinstalled', handleAppInstalled);
    
    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, []);

  // Log state changes
  useEffect(() => {
    console.log('[InstallPrompt] State updated:', {
      hasPrompt: !!installPrompt,
      debugInfo
    });
  }, [installPrompt, debugInfo]);

  const handleInstall = async () => {
    if (!installPrompt) {
      console.log('[InstallPrompt] No install prompt available');
      return;
    }

    try {
      console.log('[InstallPrompt] Triggering install prompt');
      installPrompt.prompt();
      const result = await installPrompt.userChoice;
      console.log('[InstallPrompt] Install prompt result:', result);
      if (result.outcome === 'accepted') {
        console.log('[InstallPrompt] User accepted the install prompt');
      } else {
        console.log('[InstallPrompt] User dismissed the install prompt');
      }
      setInstallPrompt(null);
      localStorage.setItem('installPromptShown', 'true');
    } catch (error) {
      console.error('[InstallPrompt] Error installing app:', error);
    }
  };

  const handleDismiss = () => {
    console.log('[InstallPrompt] Prompt dismissed');
    setInstallPrompt(null);
    localStorage.setItem('installPromptShown', 'true');
  };

  // Early return conditions
  if (debugInfo.isStandalone) {
    console.log('[InstallPrompt] App is installed, not showing prompt');
    return null;
  }

  if (debugInfo.hasShownPrompt) {
    console.log('[InstallPrompt] Install prompt has already been shown');
    return null;
  }

  if (!installPrompt) {
    console.log('[InstallPrompt] No prompt available, not showing UI');
    return null;
  }

  return (
    <div className="fixed bottom-4 left-4 right-4 md:left-auto md:right-4 md:w-96 bg-gray-800 p-4 rounded-lg shadow-lg z-50 border border-gray-700">
      <div className="flex flex-col space-y-3">
        <div>
          <h3 className="text-gray-100 font-medium">Install Performance Tracker</h3>
          <p className="text-gray-400 text-sm mt-1">
            Install our app for the best experience and offline access
          </p>
        </div>

        <div className="flex justify-end space-x-3">
          <button
            onClick={handleDismiss}
            className="px-4 py-2 text-sm text-gray-300 hover:text-white transition-colors"
          >
            Not now
          </button>
          <button
            onClick={handleInstall}
            className="px-4 py-2 text-sm bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg transition-colors"
          >
            Install
          </button>
        </div>
      </div>
    </div>
  );
}


File: src\components\LoadingState.jsx
================================================================================

// src/components/LoadingState.jsx
export function LoadingState() {
  return (
    <div className="min-h-screen w-full">
      {/* Background placeholder */}
      <div 
        className="absolute inset-0 bg-gradient-to-b from-gray-800 to-gray-900 animate-pulse"
        style={{
          backgroundSize: 'cover',
          backgroundPosition: 'center',
        }}
      />
      
      {/* Loading spinner overlay */}
      <div className="relative z-10 flex items-center justify-center min-h-screen">
        <div className="flex flex-col items-center gap-4">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-emerald-500" />
          <div className="text-gray-300 text-sm animate-pulse">
            Loading...
          </div>
        </div>
      </div>
    </div>
  );
}

File: src\components\MiniRadial.jsx
================================================================================

// src/components/MiniRadial.jsx

import React from 'react';

// The ring color can be a gradient or solid color for the "filled" portion
// We'll do a conic gradient from 0 to (score/10)*360 degrees.

function MiniRadial({ score, icon, isActive }) {
  // Score out of 10. If your scale is different, adjust accordingly.
  const percentage = (score / 10) * 100; // 0 to 100
  const deg = (360 * percentage) / 100;  // 0 to 360

  // Active ring color vs. inactive ring color
  const ringColorActive = "rgba(16,185,129,1)";  // emerald-500
  const ringColorInactive = "rgba(107,114,128,1)"; // gray-500

  // Decide color: if isActive is true, use emerald-500, else maybe a duller color
  const ringColor = isActive ? ringColorActive : ringColorInactive;

  // Construct the conic gradient
  const ringStyle = {
    background: `
      conic-gradient(
        ${ringColor} 0deg,
        ${ringColor} ${deg}deg,
        rgba(75,85,99,0.2) ${deg}deg,
        rgba(75,85,99,0.2) 360deg
      )
    `,
  };

  return (
    <div className="relative w-12 h-12">
      {/* Outer ring */}
      <div
        className="w-12 h-12 rounded-full"
        style={ringStyle}
      ></div>

      {/* Inner circle (white or gray background) */}
      <div className="absolute top-[4px] left-[4px] w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center">
        {icon}
      </div>
    </div>
  );
}

export default MiniRadial;


File: src\components\OffensiveSection.jsx
================================================================================

// src/components/OffensiveSection.jsx

import React, { useState } from 'react';
import Tabs from './Tabs';
import CategorySection from './CategorySection';
import ThrowingSection from './ThrowingSection'; // NEW import

function OffensiveSection({ offensiveData, player }) {
  const [activeSubTab, setActiveSubTab] = useState('cutting');

  const subTabs = [
    { value: 'cutting', label: 'Cutting' },
    { value: 'handling', label: 'Handling' },
    { value: 'throwing', label: 'Throwing' },
  ];

  return (
    <div className="mb-6">
      {/* Offensive Sub-Tabs */}
      <Tabs
        tabs={subTabs}
        activeTab={activeSubTab}
        onChange={setActiveSubTab}
      />

      {activeSubTab === 'cutting' && (
        <CategorySection
          title="Cutting Skills"
          skills={offensiveData.cutting}
          player={player}
        />
      )}

      {activeSubTab === 'handling' && (
        <CategorySection
          title="Handling Skills"
          skills={offensiveData.handling}
          player={player}
        />
      )}

      {/* NEW: If sub-tab is throwing, render ThrowingSection */}
      {activeSubTab === 'throwing' && (
        <ThrowingSection
          throwingData={offensiveData.throwing}
          player={player}
        />
      )}
    </div>
  );
}

export default OffensiveSection;


File: src\components\OptimizedBackground.jsx
================================================================================

import React, { useState, useEffect } from 'react';

const OptimizedBackground = () => {
  const [loaded, setLoaded] = useState(false);

  useEffect(() => {
    // Preload the next larger image size after component mounts
    const preloadLargerImage = new Image();
    preloadLargerImage.src = '/images/background-lg.webp';
  }, []);

  return (
    <>
      {/* Placeholder while image loads */}
      <div 
        className={`absolute inset-0 bg-gradient-to-b from-gray-800 to-gray-900 transition-opacity duration-500 ${
          loaded ? 'opacity-0' : 'opacity-100'
        }`}
      />

      <picture>
        {/* Desktop WebP variants */}
        <source
          srcSet="/images/background-lg.webp 1920w,
                  /images/background-md.webp 1280w,
                  /images/background-sm.webp 640w"
          sizes="(min-width: 1536px) 1920px,
                 (min-width: 1024px) 1280px,
                 (min-width: 768px) 960px,
                 640px"
          type="image/webp"
          media="(min-width: 768px)"
        />

        {/* Mobile WebP variants */}
        <source
          srcSet="/images/background-mobileLg.webp 1280w,
                  /images/background-mobileMd.webp 960w,
                  /images/background-mobileSm.webp 640w"
          sizes="(min-width: 640px) 960px,
                 640px"
          type="image/webp"
          media="(max-width: 767px)"
        />

        {/* Desktop JPEG fallback */}
        <source
          srcSet="/images/background-lg.jpg 1920w,
                  /images/background-md.jpg 1280w,
                  /images/background-sm.jpg 640w"
          sizes="(min-width: 1536px) 1920px,
                 (min-width: 1024px) 1280px,
                 (min-width: 768px) 960px,
                 640px"
          type="image/jpeg"
          media="(min-width: 768px)"
        />

        {/* Mobile JPEG fallback */}
        <source
          srcSet="/images/background-mobileLg.jpg 1280w,
                  /images/background-mobileMd.jpg 960w,
                  /images/background-mobileSm.jpg 640w"
          sizes="(min-width: 640px) 960px,
                 640px"
          type="image/jpeg"
          media="(max-width: 767px)"
        />

        <img
          src="/images/background-sm.jpg"
          alt="Background"
          className={`absolute inset-0 w-full h-full object-cover opacity-60 transition-opacity duration-500 ${
            loaded ? 'opacity-60' : 'opacity-0'
          }`}
          loading="eager"
          fetchPriority="high"
          width="1920"
          height="1080"
          onLoad={() => setLoaded(true)}
          style={{
            backgroundImage: `url('/images/background-placeholder.webp')`,
            backgroundSize: 'cover',
            backgroundPosition: 'center',
          }}
        />
      </picture>

      {/* Preload tags for critical images */}
      <link
        rel="preload"
        as="image"
        href="/images/background-sm.webp"
        type="image/webp"
        media="(max-width: 767px)"
        fetchpriority="high"
      />
      <link
        rel="preload"
        as="image"
        href="/images/background-md.webp"
        type="image/webp"
        media="(min-width: 768px)"
        fetchpriority="high"
      />
    </>
  );
};

export default OptimizedBackground;

File: src\components\OverallScoreRing.jsx
================================================================================

// src/components/OverallScoreRing.jsx

import React from 'react';
import { Doughnut } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

const OverallScoreRing = ({ overallScore }) => {
  const score = parseFloat(overallScore);
  const maxScore = 10; // Adjust if your scale differs

  const data = {
    labels: ['Score', 'Remaining'],
    datasets: [
      {
        data: [score, maxScore - score],
        backgroundColor: ['#10b981', '#374151'], // emerald-500 & gray-700
        borderWidth: 0,
      },
    ],
  };

  const options = {
    cutout: '80%',
    plugins: {
      legend: { display: false },
      tooltip: { enabled: false },
    },
  };

  return (
    <div className="relative w-24 h-24 md:w-32 md:h-32 lg:w-40 lg:h-40">
      <Doughnut data={data} options={options} />
      {/* Centered Score Text */}
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-lg md:text-xl font-bold text-emerald-400">
          {overallScore}
        </span>
        <span className="text-xs md:text-sm text-gray-300">/10</span>
      </div>
    </div>
  );
};

export default OverallScoreRing;


File: src\components\ProfileHeader.jsx
================================================================================

import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import OverallScoreRing from './OverallScoreRing';
import backgroundImage from '../assets/background.jpg';
import OptimizedBackground from './OptimizedBackground';

const ProfileHeader = ({ 
  name, 
  email, 
  overallScore, 
  athletes, 
  selectedAthleteId, 
  onSelectAthlete,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);
  const navigate = useNavigate();

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const selectedAthlete = athletes?.find(a => a.id === selectedAthleteId);

  if (!selectedAthlete) {
    return (
      <div className="flex items-center justify-center h-56 bg-gray-800 rounded-lg">
        <p className="text-gray-300">Loading athlete data...</p>
      </div>
    );
  }

  const menuVariants = {
    closed: {
      opacity: 0,
      scaleY: 0,
      transition: { duration: 0.2 }
    },
    open: {
      opacity: 1,
      scaleY: 1,
      transition: { duration: 0.2 }
    }
  };

  const handleAthleteSelect = (athlete) => {
    onSelectAthlete(athlete.id);
    navigate(`/?id=${athlete.id}&name=${encodeURIComponent(athlete.metadata.name)}`);
    setIsOpen(false);
  };

  return (
    <div className="relative w-full h-56 md:h-64 lg:h-72 bg-gray-800 rounded-lg">
      {/* Background Image */}
      <OptimizedBackground />
      <div className="absolute inset-0 bg-black bg-opacity-40" />

      {/* Content */}
      <div className="relative z-10 flex flex-col items-center justify-center h-full px-4">
        <div className="text-center">
          <h1 className="text-2xl md:text-3xl font-semibold text-white">{name}</h1>
          <p className="text-sm md:text-base text-gray-300 mt-1">{email}</p>
        </div>
        <div className="mt-4">
          <OverallScoreRing overallScore={overallScore} />
        </div>
      </div>

      {/* Dropdown Container - Portal the dropdown menu */}
      <div 
        ref={dropdownRef} 
        className="absolute top-4 right-4 md:top-6 md:right-6"
        style={{ zIndex: 9999 }}
      >
        
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="flex items-center justify-center w-10 h-10 rounded-full 
                   bg-gray-800/50 backdrop-blur-sm hover:bg-gray-700 
                   transition-colors duration-200 focus:outline-none 
                   focus:ring-2 focus:ring-emerald-500 focus:ring-opacity-50"
          aria-expanded={isOpen}
          aria-haspopup="listbox"
          aria-controls="athlete-listbox"
        >
          <motion.div
            animate={{ rotate: isOpen ? 180 : 0 }}
            transition={{ duration: 0.2 }}
          >
            <ChevronDown className="w-5 h-5 text-white" />
          </motion.div>
        </button>

        <AnimatePresence>
          {isOpen && (
            <motion.div
              initial="closed"
              animate="open"
              exit="closed"
              variants={menuVariants}
              className="absolute right-0 mt-2 w-64 bg-gray-800 rounded-lg shadow-lg 
                       ring-1 ring-black ring-opacity-5 max-h-[calc(100vh-120px)]"
              style={{ 
                zIndex: 9999,
                transformOrigin: "top",
                top: "calc(100% + 0.5rem)" // Position directly below button
              }}
            >
              <ul
                id="athlete-listbox"
                role="listbox"
                aria-label="Select athlete"
                className="divide-y divide-gray-700 overflow-y-auto"
              >
                {athletes.map((athlete) => (
                  <li key={athlete.id} role="option" aria-selected={athlete.id === selectedAthleteId}>
                    <button
                      onClick={() => handleAthleteSelect(athlete)}
                      className={`w-full text-left px-4 py-3 text-sm ${
                        athlete.id === selectedAthleteId
                          ? 'bg-gray-700 text-white'
                          : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                      }`}
                    >
                      {athlete.metadata.name}
                    </button>
                  </li>
                ))}
              </ul>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default ProfileHeader;

File: src\components\RadarChart.jsx
================================================================================

// src/components/RadarChart.jsx

import React from 'react';
import { Radar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend
);

/**
 * RadarChart Component
 * @param {Object} props - Component props
 * @param {Array} props.labels - Labels for the radar chart axes
 * @param {Array} props.dataValues - Data values for each axis
 * @param {Function} props.onDataPointClick - Callback when a data point is clicked
 */
const RadarChart = ({ labels, dataValues, onDataPointClick }) => {
  const data = {
    labels,
    datasets: [
      {
        label: 'Category Scores',
        data: dataValues,
        backgroundColor: 'rgba(16, 185, 129, 0.2)',
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 2,
        pointBackgroundColor: 'rgba(16, 185, 129, 1)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(16, 185, 129, 1)',
        pointRadius: 3, // Reduced from 5 to 3
        pointHoverRadius: 7, // Kept or adjusted as needed
        pointHitRadius: 10, // Maintained for consistent touch area
      },
    ],
  };

  const options = {
    responsive: true,
    maintainAspectRatio: false, // Allows the chart to fill the container
    scales: {
      r: {
        beginAtZero: true,
        max: 10,
        ticks: {
          stepSize: 2,
          display: false,
          backdropColor: 'transparent',
        },
        grid: {
          color: '#4b5563',
          lineWidth: 1,
        },
        angleLines: {
          color: '#4b5563',
          lineWidth: 1,
        },
        pointLabels: {
          color: '#e2e8f0',
          font: {
            size: 11,
            family: 'Inter',
          },
          padding: 8,
        },
      },
    },
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        enabled: true,
        backgroundColor: 'rgba(17, 24, 39, 0.95)',
        padding: 8,
        titleFont: {
          size: 12,
          family: 'Inter',
        },
        bodyFont: {
          size: 11,
          family: 'Inter',
        },
        displayColors: false,
        callbacks: {
          title: (items) => labels[items[0].dataIndex],
          label: (item) => `${item.formattedValue}/10`,
        },
      },
    },
    onClick: (event, elements) => {
      if (elements.length > 0 && onDataPointClick) {
        const { index, datasetIndex } = elements[0];
        const label = labels[index];
        const value = dataValues[index];
        onDataPointClick({ label, value, index, datasetIndex });
      }
    },
    // Optional: Change cursor to pointer on hover
    onHover: (event, elements) => {
      const target = event.native.target;
      if (elements.length > 0) {
        target.style.cursor = 'pointer';
      } else {
        target.style.cursor = 'default';
      }
    },
  };

  return (
    <div className="w-full h-full">
      <Radar data={data} options={options} />
    </div>
  );
};

export default RadarChart;


File: src\components\RadialTabs.jsx
================================================================================

// src/components/RadialTabs.jsx

import React from 'react';
import { motion } from 'framer-motion';
import { Home, Brain, Shield, Sword, Activity } from 'lucide-react';

// Utility to merge class names conditionally
const cn = (...classes) => classes.filter(Boolean).join(' ');

// Circular progress component with an icon in the center
const RadialProgress = ({ value = 0, isActive, children }) => {
  const percentage = Math.min(Math.max((value / 10) * 100, 0), 100);
  
  return (
    <div className="relative w-16 h-16">
      {/* Background Circle */}
      <div className="absolute inset-0 rounded-full bg-gray-800" />
      
      {/* Progress Circle */}
      <svg className="absolute inset-0 w-full h-full -rotate-90">
        <circle
          cx="32"
          cy="32"
          r="28"
          strokeWidth="3"
          fill="none"
          className="stroke-gray-700"
        />
        <circle
          cx="32"
          cy="32"
          r="28"
          strokeWidth="3"
          fill="none"
          strokeDasharray={`${percentage * 1.76} 176`}
          className={cn(
            "transition-all duration-300",
            isActive ? "stroke-emerald-500" : "stroke-gray-600"
          )}
        />
      </svg>
      
      {/* Icon */}
      <div className="absolute inset-0 flex items-center justify-center">
        <div className={cn(
          "p-3 rounded-full transition-colors",
          isActive ? "bg-emerald-500 text-white" : "bg-gray-700 text-gray-300"
        )}>
          {children}
        </div>
      </div>
    </div>
  );
};

// Each radial tab button
const TabButton = ({ isActive, onClick, icon, label, score = 0 }) => {
  return (
    <motion.button
      onClick={onClick}
      className="flex flex-col items-center space-y-2 group"
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.95 }}
    >
      <RadialProgress value={score} isActive={isActive}>
        {icon}
      </RadialProgress>
      
      <span className={cn(
        "text-xs font-medium transition-colors",
        isActive ? "text-emerald-400" : "text-gray-400 group-hover:text-gray-300"
      )}>
        {label}
      </span>
    </motion.button>
  );
};

// Radial Tabs Navigation Component
const RadialTabs = ({ activeTab = 'home', onChangeTab = () => {}, averages = {} }) => {
  // Safely get the score for each tab
  const getScore = (key) => (averages && typeof averages[key] === 'number') ? averages[key] : 0;

  // Tabs Configuration
  const TABS = [
    { value: 'home', label: 'Overview', icon: <Home className="w-5 h-5" />, score: getScore('home') },
    { value: 'physical', label: 'Physical', icon: <Activity className="w-5 h-5" />, score: getScore('physical') },
    { value: 'offensive', label: 'Offensive', icon: <Sword className="w-5 h-5" />, score: getScore('offensive') },
    { value: 'defensive', label: 'Defensive', icon: <Shield className="w-5 h-5" />, score: getScore('defensive') },
    { value: 'mental', label: 'Mental', icon: <Brain className="w-5 h-5" />, score: getScore('mental') },
  ];

  return (
    <div className="relative">
      {/* Navigation Background */}
      <div className="absolute inset-0 bg-gradient-to-b from-gray-900 to-gray-800" />
      
      {/* Navigation Buttons */}
      <div className="relative px-6 py-4">
        <div className="flex items-center justify-between max-w-4xl mx-auto">
          {TABS.map((tab) => (
            <TabButton
              key={tab.value}
              isActive={activeTab === tab.value}
              onClick={() => onChangeTab(tab.value)}
              icon={tab.icon}
              label={tab.label}
              score={tab.score}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default RadialTabs;


File: src\components\RatingBar.jsx
================================================================================

// src/components/RatingBar.jsx

import React from 'react';

const RatingBar = ({ value, max = 10 }) => {
  const percentage = (value / max) * 100;
  return (
    <div className="w-full bg-gray-700 rounded-full h-2.5 overflow-hidden">
      <div
        className="h-2.5 bg-emerald-500 transition-all duration-300"
        style={{ width: `${percentage}%` }}
      ></div>
    </div>
  );
};

export default RatingBar;


File: src\components\RingChart.jsx
================================================================================

// src/components/RingChart.jsx

import React from 'react';

const RingChart = ({ label, value }) => {
  const percentage = (value / 10) * 100;

  return (
    <div className="relative w-32 h-32">
      <svg className="w-full h-full" viewBox="0 0 36 36">
        <circle
          className="text-gray-700"
          strokeWidth="3.8"
          stroke="currentColor"
          fill="transparent"
          r="16"
          cx="18"
          cy="18"
        />
        <circle
          className="text-emerald-400"
          strokeWidth="3.8"
          strokeDasharray={`${percentage}, 100`}
          stroke="currentColor"
          fill="transparent"
          r="16"
          cx="18"
          cy="18"
          strokeLinecap="round"
        />
      </svg>
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-lg font-semibold text-gray-100">{value}/10</span>
        <span className="text-sm text-gray-400">{label}</span>
      </div>
    </div>
  );
};

export default RingChart;


File: src\components\RoadmapModal.jsx
================================================================================

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, Trophy, Target, Calendar, 
  Dumbbell, Wind, Users, CheckCircle2
} from 'lucide-react';

const ActionTarget = ({ icon: Icon, title, frequency, progress, total, tags }) => (
  <div className="bg-gray-700/50 rounded-lg p-4 space-y-2">
    <div className="flex items-start gap-3">
      <div className="mt-1">
        <Icon className="w-5 h-5 text-emerald-400" />
      </div>
      <div className="flex-1">
        <h4 className="font-medium text-gray-200">{title}</h4>
        <p className="text-sm text-gray-400">{frequency}</p>
        
        {/* Progress Section */}
        <div className="mt-2">
          <div className="flex justify-between text-xs text-gray-400 mb-1">
            <span>Progress</span>
            <span>{progress} / {total}</span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-1.5">
            <div 
              className="bg-emerald-400 h-1.5 rounded-full transition-all duration-300"
              style={{ width: `${(progress / total) * 100}%` }}
            />
          </div>
        </div>

        {/* Tags */}
        <div className="mt-2 flex flex-wrap gap-2">
          {tags.map((tag, index) => (
            <span 
              key={index}
              className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-700 text-emerald-400"
            >
              {tag}
            </span>
          ))}
        </div>
      </div>

      {/* Completion Status */}
      {progress >= total && (
        <CheckCircle2 className="w-5 h-5 text-emerald-400 flex-shrink-0" />
      )}
    </div>
  </div>
);

const RoadmapModal = ({ isOpen, onClose, player }) => (
  <AnimatePresence>
    {isOpen && (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
      >
        <motion.div
          initial={{ y: '100%' }}
          animate={{ y: 0 }}
          exit={{ y: '100%' }}
          transition={{ type: 'spring', damping: 25 }}
          className="absolute bottom-0 left-0 right-0 bg-gray-900 rounded-t-2xl max-h-[90vh] overflow-auto"
        >
          {/* Header */}
          <div className="sticky top-0 bg-gray-900/95 backdrop-blur-sm p-4 border-b border-gray-800 flex items-center justify-between">
            <h2 className="text-lg font-semibold text-white">Development Roadmap</h2>
            <button
              onClick={onClose}
              className="p-1 rounded-lg hover:bg-gray-800"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Content */}
          <div className="p-4 space-y-6">
            {/* Weekly Action Targets */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Calendar className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">THIS WEEK'S TARGETS</h3>
              </div>
              <div className="space-y-3">
                <ActionTarget 
                  icon={Dumbbell}
                  title="Endurance Training"
                  frequency="3 sessions per week"
                  progress={2}
                  total={3}
                  tags={['Sprints', 'Distance Running', 'HIIT']}
                />
                
                <ActionTarget 
                  icon={Wind}
                  title="Focused Throwing Practice"
                  frequency="3 hours per week"
                  progress={1.5}
                  total={3}
                  tags={['Breaking the Mark', 'Release Points', 'Quick Release']}
                />

                <ActionTarget 
                  icon={Users}
                  title="Joint Training Session"
                  frequency="1 session this week"
                  progress={0}
                  total={1}
                  tags={['Handler Movement', 'Field Vision', 'Team Dynamics']}
                />
              </div>
            </section>

            {/* Monthly Goals */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Target className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">MONTHLY GOALS</h3>
              </div>
              <div className="bg-gray-800 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <span className="w-2 h-2 rounded-full bg-emerald-400 mt-2" />
                  <div>
                    <h4 className="font-medium text-gray-200">Master New Throws</h4>
                    <p className="text-sm text-gray-400">Focus on specialty throws and situations</p>
                    <div className="mt-2">
                      <div className="flex justify-between text-xs text-gray-400 mb-1">
                        <span>Progress</span>
                        <span>60%</span>
                      </div>
                      <div className="w-full bg-gray-700 rounded-full h-1.5">
                        <div className="bg-emerald-400 h-1.5 rounded-full w-3/5" />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>

            {/* Development Path */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Trophy className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">DEVELOPMENT PATH</h3>
              </div>
              <div className="bg-gray-800 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <span className="w-2 h-2 rounded-full bg-emerald-400 mt-2" />
                  <div>
                    <h4 className="font-medium text-gray-200">Handler Certification</h4>
                    <p className="text-sm text-gray-400">Complete advanced handler training program</p>
                  </div>
                </div>
              </div>
            </section>
          </div>

          {/* Action Buttons */}
          <div className="sticky bottom-0 bg-gray-900/95 backdrop-blur-sm p-4 border-t border-gray-800">
            <div className="flex gap-3">
              <button className="flex-1 bg-gray-800 text-white py-3 rounded-lg font-medium">
                Log Progress
              </button>
              <button className="flex-1 bg-emerald-500 text-white py-3 rounded-lg font-medium">
                Complete Target
              </button>
            </div>
          </div>
        </motion.div>
      </motion.div>
    )}
  </AnimatePresence>
);

export default RoadmapModal;

File: src\components\SkillCard.jsx
================================================================================

// src/components/SkillCard.jsx

import React from 'react';
import RatingBar from './RatingBar';

const SkillCard = ({ label, value }) => {
  return (
    <div className="flex items-center bg-gray-800 rounded-lg p-3 shadow-sm">
      <div className="flex-1">
        <div className="text-sm font-medium text-gray-100 mb-1">
          {label}
        </div>
        <RatingBar value={value} />
      </div>
      <div className="ml-4 text-emerald-400 font-bold text-lg">
        {value}
      </div>
    </div>
  );
};

export default SkillCard;


File: src\components\SkillHierarchy.jsx
================================================================================

// src/components/SkillHierarchy.jsx
import React from 'react';
import { ChevronRight } from 'lucide-react';
import { averageOfKeys, computeCategoryAverages, computeOverallScore } from '../utils/helpers';

const SkillBar = ({ value, maxValue = 10 }) => (
  <div className="w-24 bg-gray-700 rounded-full h-1.5 overflow-hidden">
    <div
      className="h-1.5 bg-emerald-500 transition-all duration-300"
      style={{ width: `${(value / maxValue) * 100}%` }}
    />
  </div>
);

const SkillNode = ({ label, value, depth = 0, children }) => {
  const hasChildren = React.Children.count(children) > 0;
  
  return (
    <div className="space-y-2">
      <div className={`flex items-center gap-3 ${hasChildren ? 'mb-2' : ''}`}>
        {depth > 0 && (
          <div className="flex items-center">
            <div 
              className="w-4 h-px bg-gray-700"
              style={{ marginLeft: `${(depth - 1) * 16}px` }}
            />
            <ChevronRight className="w-4 h-4 text-gray-600" />
          </div>
        )}
        
        <div className="flex-1 flex items-center justify-between">
          <span className="text-sm font-medium text-gray-300">{label}</span>
          <div className="flex items-center gap-3">
            <SkillBar value={value} />
            <span className="text-sm font-semibold text-emerald-400 w-8">
              {value.toFixed(1)}
            </span>
          </div>
        </div>
      </div>
      
      {hasChildren && (
        <div className="space-y-2">
          {children}
        </div>
      )}
    </div>
  );
};

const SkillHierarchy = ({ player }) => {
  // Get all category averages using helper function
  const categoryAverages = computeCategoryAverages(player);
  const overallScore = computeOverallScore(player);

  // Compute throwing subcategory averages (not included in helpers)
  const throwingSubcategories = {
    backhand: [
      'backhand_power', 'backhand_accuracy', 'backhand_quick_release',
      'backhand_release_variations', 'backhand_against_wind',
      'backhand_against_difficult_marks', 'backhand_tempo_control'
    ],
    forehand: [
      'forehand_power', 'forehand_accuracy', 'forehand_quick_release',
      'forehand_release_variations', 'forehand_against_wind',
      'forehand_against_difficult_marks', 'forehand_tempo_control'
    ],
    specialty: [
      'specialty_power', 'specialty_accuracy', 'specialty_quick_release',
      'specialty_release_variations', 'specialty_against_wind',
      'specialty_against_difficult_marks', 'specialty_tempo_control'
    ],
    hucking: [
      'hucking_confidence', 'hucking_shape_control',
      'hucking_tempo_control', 'hucking_placement'
    ]
  };

  const throwingAverages = {
    backhand: averageOfKeys(player, throwingSubcategories.backhand),
    forehand: averageOfKeys(player, throwingSubcategories.forehand),
    specialty: averageOfKeys(player, throwingSubcategories.specialty),
    hucking: averageOfKeys(player, throwingSubcategories.hucking)
  };

  return (
    <div className="space-y-4">
      <SkillNode label="Overall" value={overallScore}>
        <SkillNode label="Physical" value={categoryAverages.physical} depth={1} />
        <SkillNode label="Mental" value={categoryAverages.mental} depth={1} />
        <SkillNode label="Defensive" value={categoryAverages.defensive} depth={1} />
        <SkillNode label="Offensive" value={categoryAverages.offensive} depth={1}>
          <SkillNode label="Cutting" value={categoryAverages.cutting} depth={2} />
          <SkillNode label="Handling" value={categoryAverages.handling} depth={2} />
          <SkillNode label="Throwing" value={categoryAverages.throwing} depth={2}>
            <SkillNode label="Backhand" value={throwingAverages.backhand} depth={3} />
            <SkillNode label="Forehand" value={throwingAverages.forehand} depth={3} />
            <SkillNode label="Specialty" value={throwingAverages.specialty} depth={3} />
            <SkillNode label="Hucking" value={throwingAverages.hucking} depth={3} />
          </SkillNode>
        </SkillNode>
      </SkillNode>
    </div>
  );
};

export default SkillHierarchy;

File: src\components\SwipeableInsights.jsx
================================================================================

import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence, useAnimation } from 'framer-motion';

const SWIPE_THRESHOLD = 30;
const VELOCITY_THRESHOLD = 200;

const InsightsCard = ({ title, data = [], subtitle }) => (
  <div className="bg-gray-800 p-4 rounded-lg shadow-md w-full">
    <div className="text-gray-300 text-xs font-bold uppercase tracking-widest mb-2">
      <span className="font-semibold text-emerald-400">{title}</span>
      {subtitle && (
        <span className="block text-gray-400 text-xs mt-1 normal-case">
          {subtitle}
        </span>
      )}
    </div>
    {data.map(([skillKey, skillValue], index) => (
      <div key={`${skillKey}-${index}`} className="flex justify-between mb-1">
        <span className="capitalize text-gray-200">
          {skillKey.replace(/_/g, ' ')}
        </span>
        <span className="text-emerald-400 font-semibold">
          {typeof skillValue === 'number' ? `${skillValue}/10` : 'N/A'}
        </span>
      </div>
    ))}
  </div>
);

const SwipeableInsights = ({ player, growthTargets = [] }) => {

    const [currentIndex, setCurrentIndex] = useState(0);
    const [isDragging, setIsDragging] = useState(false);
    const controls = useAnimation();
    const [containerWidth, setContainerWidth] = useState(0);
    const containerRef = useRef(null);
  
    const growthTargetPairs = growthTargets
    .map(targetKey => [
      targetKey.replace(/_/g, ' '),  
      player.skills[targetKey] || 0  // Access skills through player.skills
    ])
    .filter(([_, value]) => typeof value === 'number'); 
  
    useEffect(() => {
      const updateWidth = () => {
        if (containerRef.current) {
          setContainerWidth(containerRef.current.offsetWidth);
        }
      };
      
      updateWidth();
      const resizeObserver = new ResizeObserver(updateWidth);
      
      if (containerRef.current) {
        resizeObserver.observe(containerRef.current);
      }
      
      return () => resizeObserver.disconnect();
    }, []);
  
    const getSortedSkills = () => {
        // Change to access player.skills instead of player directly
        const skillEntries = Object.entries(player.skills)
          .filter(([key, val]) => typeof val === 'number' && !key.includes('id'))
          .sort((a, b) => b[1] - a[1]);
        return skillEntries;
      };
  
    // Call getSortedSkills once and store result
    const sortedSkills = getSortedSkills();
  
    const cards = [
      {
        title: 'Current Growth Targets',
        data: growthTargetPairs,
        subtitle: growthTargetPairs.length === 0 ? 'No growth targets set' : null
      },
      {
        title: 'Top 3 Strengths',
        data: sortedSkills.slice(0, 3)
      },
      {
        title: 'Areas for Improvement',
        data: [...sortedSkills].reverse().slice(0, 3)
      }
    ];

  const snapToIndex = (index) => {
    controls.start({
      x: -index * containerWidth,
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 40,
        mass: 0.8,
        restSpeed: 0.5,
        restDelta: 0.5
      }
    }).then(() => {
      setIsDragging(false);
    });
  };

  const handleDragStart = () => {
    setIsDragging(true);
  };

  const handleDragEnd = (event, info) => {
    const swipe = info.offset.x;
    const velocity = info.velocity.x;
    
    const shouldSwipe = Math.abs(swipe) > SWIPE_THRESHOLD || Math.abs(velocity) > VELOCITY_THRESHOLD;
    
    if (shouldSwipe) {
      const direction = swipe > 0 ? -1 : 1;
      const nextIndex = currentIndex + direction;
      
      if (nextIndex >= 0 && nextIndex < cards.length) {
        setCurrentIndex(nextIndex);
        snapToIndex(nextIndex);
      } else {
        snapToIndex(currentIndex);
      }
    } else {
      snapToIndex(currentIndex);
    }
  };

  const handleDotClick = (index) => {
    if (!isDragging) {
      setCurrentIndex(index);
      snapToIndex(index);
    }
  };

  return (
    <div className="mb-6">
      <h2 className="text-xl font-bold uppercase mb-3 text-gray-100">
        Key Insights
      </h2>
      
      <div ref={containerRef} className="relative insights-container overflow-hidden bg-gray-800 rounded-lg shadow-md">
        <AnimatePresence initial={false}>
          <motion.div
            className="flex"
            style={{ width: `${cards.length * 100}%` }}
            drag="x"
            dragConstraints={{
              left: -containerWidth * (cards.length - 1),
              right: 0
            }}
            dragElastic={0.1}
            dragMomentum={false}
            onDragStart={handleDragStart}
            onDragEnd={handleDragEnd}
            animate={controls}
            initial={{ x: 0 }}
          >
            {cards.map((card, index) => (
              <div
                key={`card-${index}`}
                className="flex-shrink-0"
                style={{ width: containerWidth }}
              >
                <InsightsCard 
                  {...card}
                  key={`insight-${index}`} 
                />
              </div>
            ))}
          </motion.div>
        </AnimatePresence>
      </div>

      {/* Navigation Dots */}
      <div className="flex justify-center mt-4 space-x-3">
        {cards.map((_, index) => (
          <button
            key={`dot-${index}`}
            onClick={() => handleDotClick(index)}
            className={`w-2 h-2 rounded-full transition-all duration-200 ${
              index === currentIndex 
                ? 'bg-emerald-400 scale-110' 
                : 'bg-gray-600 hover:bg-gray-500'
            }`}
            disabled={isDragging}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    </div>
  );
};

export default SwipeableInsights;

File: src\components\Tabs.jsx
================================================================================

// src/components/Tabs.jsx

import React from 'react';

const Tabs = ({ tabs, activeTab, onChange }) => {
  return (
    <div className="flex justify-between bg-gray-800 p-1 rounded-lg gap-1 mb-4">
      {tabs.map((tab) => (
        <button
          key={tab.value}
          onClick={() => onChange(tab.value)}
          className={
            "flex-1 py-2 text-sm font-medium rounded-md transition-colors " +
            (activeTab === tab.value
              ? "bg-emerald-500 text-gray-900 shadow"
              : "text-gray-300 hover:bg-gray-700")
          }
        >
          {tab.label}
        </button>
      ))}
    </div>
  );
};

export default Tabs;


File: src\components\ThrowingSection.jsx
================================================================================

// src/components/ThrowingSection.jsx

import React, { useState } from 'react';
import Tabs from './Tabs';
import CategorySection from './CategorySection';

function ThrowingSection({ throwingData, player }) {
  // Sub-sub tab state
  const [activeThrowTab, setActiveThrowTab] = useState('backhand');

  const throwTabs = [
    { value: 'backhand', label: 'Backhand' },
    { value: 'forehand', label: 'Forehand' },
    { value: 'specialty', label: 'Specialty' },
    { value: 'hucking', label: 'Hucking' },
  ];

  return (
    <div className="mb-4">
      {/* Throwing sub-sub tabs */}
      <Tabs
        tabs={throwTabs}
        activeTab={activeThrowTab}
        onChange={setActiveThrowTab}
      />

      {/* Conditionally render the relevant CategorySection */}
      {activeThrowTab === 'backhand' && (
        <CategorySection
          title="Backhand Skills"
          skills={throwingData.backhand}
          player={player}
        />
      )}
      {activeThrowTab === 'forehand' && (
        <CategorySection
          title="Forehand Skills"
          skills={throwingData.forehand}
          player={player}
        />
      )}
      {activeThrowTab === 'specialty' && (
        <CategorySection
          title="Specialty Skills"
          skills={throwingData.specialty}
          player={player}
        />
      )}
        {activeThrowTab === 'hucking' && (
        <CategorySection
          title="Hucking Skills"
          skills={throwingData.hucking}
          player={player}
        />
        )}
    </div>
  );
}

export default ThrowingSection;


File: src\config\firebase.js
================================================================================

// src/config/firebase.js
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";

const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID,
  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID
};

let app = null;
let analytics = null;

export const initializeFirebase = () => {
  if (!app) {
    app = initializeApp(firebaseConfig);
    // Defer analytics initialization
    setTimeout(() => {
      analytics = getAnalytics(app);
    }, 2000);
  }
  return app;
};

export { app };

File: src\contexts\AuthContext.js
================================================================================

// src/contexts/AuthContext.js
import React, { createContext, useContext, useState, useEffect } from 'react';
import { getAuth } from 'firebase/auth';
import { initializeFirebase } from '../config/firebase';

const AuthContext = createContext({});

// Lazy imports for auth methods
const lazyImportAuth = () => import('firebase/auth').then(module => ({
  signInWithEmailAndPassword: module.signInWithEmailAndPassword,
  createUserWithEmailAndPassword: module.createUserWithEmailAndPassword,
  signInWithPopup: module.signInWithPopup,
  GoogleAuthProvider: module.GoogleAuthProvider,
  signOut: module.signOut,
  sendPasswordResetEmail: module.sendPasswordResetEmail
}));

export function useAuth() {
  return useContext(AuthContext);
}

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [auth, setAuth] = useState(null);

  // Initialize Firebase and Auth lazily
  useEffect(() => {
    const initAuth = async () => {
      const app = initializeFirebase();
      const auth = getAuth(app);
      setAuth(auth);
      
      const { onAuthStateChanged } = await import('firebase/auth');
      const unsubscribe = onAuthStateChanged(auth, (user) => {
        setUser(user);
        setLoading(false);
      });

      return unsubscribe;
    };

    initAuth();
  }, []);

  // Lazy auth methods
  const login = async (email, password) => {
    const { signInWithEmailAndPassword } = await lazyImportAuth();
    return signInWithEmailAndPassword(auth, email, password);
  };

  const signup = async (email, password) => {
    const { createUserWithEmailAndPassword } = await lazyImportAuth();
    return createUserWithEmailAndPassword(auth, email, password);
  };

  const loginWithGoogle = async () => {
    const { signInWithPopup, GoogleAuthProvider } = await lazyImportAuth();
    const provider = new GoogleAuthProvider();
    return signInWithPopup(auth, provider);
  };

  const logout = async () => {
    const { signOut } = await lazyImportAuth();
    return signOut(auth);
  };

  const resetPassword = async (email) => {
    const { sendPasswordResetEmail } = await lazyImportAuth();
    return sendPasswordResetEmail(auth, email);
  };

  const value = {
    user,
    login,
    signup,
    loginWithGoogle,
    logout,
    resetPassword
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center mb-8">
          <h2 className="text-2xl font-bold text-white">Welcome back</h2>
          <p className="mt-2 text-gray-400 text-sm">
            Great to see you again! Please enter your details.
          </p>
        </div>
      </div>
    );
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

File: src\Dashboard.jsx
================================================================================

// src/Dashboard.jsx

import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import mockData from './data/mockData';
import ProfileHeader from './components/ProfileHeader';
import CategorySection from './components/CategorySection';
import RadarChart from './components/RadarChart';
import OffensiveSection from './components/OffensiveSection';
import RadialTabs from './components/RadialTabs';
import { computeCategoryAverages, computeOverallScore } from './utils/helpers';
import HomeSection from './components/HomeSection';  // Add this import if not already there
import { SyncManager } from './utils/sync';
import { InstallPrompt } from './components/InstallPrompt';
import RoadmapModal from './components/RoadmapModal';
import FloatingActionButton from './components/FloatingActionButton';


import './index.css';

/* -------------------------------------
   3) MAIN APP
-------------------------------------- */

function Dashboard() {
  const location = useLocation();
  const navigate = useNavigate();
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [syncPending, setSyncPending] = useState(false);
  const [isRoadmapOpen, setRoadmapOpen] = useState(false);

  // 3.1) Manage Selected Athlete
  const [selectedAthleteId, setSelectedAthleteId] = useState(mockData[0].id);

  // 3.2) Automatically select athlete based on URL parameters
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const athleteIdFromUrl = searchParams.get('id');

    if (athleteIdFromUrl) {
        const athleteId = parseInt(athleteIdFromUrl, 10);
        const athleteExists = mockData.some(a => a.id === athleteId);
        if (athleteExists) {
            setSelectedAthleteId(athleteId);
        } else {
            navigate('/', { replace: true });
        }
    } else if (mockData.length > 0) {
        // Default to athlete with id 7 if available
        const defaultAthlete = mockData.find(a => a.id === 7);
        if (defaultAthlete) {
            setSelectedAthleteId(7);
        } else {
            // Fallback to the first athlete if id 7 is not found
            setSelectedAthleteId(mockData[0].id);
        }
    }
}, [location.search, navigate]);


  // Find the selected athlete from mockData
  const selectedAthlete = mockData.find(athlete => athlete.id === selectedAthleteId);
  // 3.4) Group data into categories
  const getCategoryData = (p) => ({
    physical: [
      { key: 'speed_explosiveness', label: 'Speed & Explosiveness' },
      { key: 'endurance', label: 'Endurance' },
      { key: 'vertical_leap', label: 'Vertical Leap' },
      { key: 'change_of_direction', label: 'Change of Direction' },
      { key: 'boxing_out', label: 'Boxing Out' },
      { key: 'laying_out', label: 'Laying Out' },
      { key: 'recovery', label: 'Recovery' },
      { key: 'flexibility_mobility', label: 'Flexibility & Mobility' },
      { key: 'injury_prevention', label: 'Injury Prevention' },
    ],
    offensive: {
      cutting: [
        { key: 'angles', label: 'Angles' },
        { key: 'fakes_footwork', label: 'Fakes & Footwork' },
        { key: 'timing_field_vision', label: 'Timing & Field Vision' },
        { key: 'decisiveness', label: 'Decisiveness' },
        { key: 'catching', label: 'Catching' },
        { key: 'flow_awareness', label: 'Flow Awareness' },
        { key: 'isolation_cutting', label: 'Isolation Cutting' },
        { key: 'continuation_cutting', label: 'Continuation Cutting' },
      ],
      handling: [
        { key: 'handler_movement', label: 'Handler Movement' },
        { key: 'poise_with_disc', label: 'Poise w/ Disc' },
        { key: 'breaking_the_mark', label: 'Breaking the Mark' },
        { key: 'resetting_from_trap_sideline', label: 'Reset from Trap' },
        { key: 'decision_making_vision', label: 'Decision Making & Vision' },
        { key: 'offensive_pattern_recognition', label: 'Pattern Recognition' },
        { key: 'throw_and_go', label: 'Throw & Go' },
      ],
      throwing: {
        backhand: [
          { key: 'backhand_power', label: 'Backhand Power' },
          { key: 'backhand_accuracy', label: 'Backhand Accuracy' },
          { key: 'backhand_quick_release', label: 'Backhand Quick Release' },
          { key: 'backhand_release_variations', label: 'Backhand Variations' },
          { key: 'backhand_against_wind', label: 'Backhand vs Wind' },
          { key: 'backhand_against_difficult_marks', label: 'Backhand vs Difficult Marks' },
          { key: 'backhand_tempo_control', label: 'Backhand Tempo Control' },
        ],
        forehand: [
          { key: 'forehand_power', label: 'Forehand Power' },
          { key: 'forehand_accuracy', label: 'Forehand Accuracy' },
          { key: 'forehand_quick_release', label: 'Forehand Quick Release' },
          { key: 'forehand_release_variations', label: 'Forehand Variations' },
          { key: 'forehand_against_wind', label: 'Forehand vs Wind' },
          { key: 'forehand_against_difficult_marks', label: 'Forehand vs Difficult Marks' },
          { key: 'forehand_tempo_control', label: 'Forehand Tempo Control' },
        ],
        specialty: [
          { key: 'specialty_power', label: 'Specialty Power' },
          { key: 'specialty_accuracy', label: 'Specialty Accuracy' },
          { key: 'specialty_quick_release', label: 'Specialty Quick Release' },
          { key: 'specialty_release_variations', label: 'Specialty Variations' },
          { key: 'specialty_against_wind', label: 'Specialty vs Wind' },
          { key: 'specialty_against_difficult_marks', label: 'Specialty vs Difficult Marks' },
          { key: 'specialty_tempo_control', label: 'Specialty Tempo Control' },
        ],
        hucking: [
          { key: 'hucking_confidence', label: 'Hucking Confidence' },
          { key: 'hucking_shape_control', label: 'Hucking Shape Control' },
          { key: 'hucking_tempo_control', label: 'Hucking Tempo Control' },
          { key: 'hucking_placement', label: 'Hucking Placement' },
        ],
      },
    },
    defensive: [
      { key: 'normal_marking', label: 'Normal Marking' },
      { key: 'sideline_trap_marking', label: 'Sideline Trap Marking' },
      { key: 'downfield_defending', label: 'Downfield Defending' },
      { key: 'handler_defending', label: 'Handler Defending' },
      { key: 'defensive_pattern_recognition', label: 'Pattern Recognition' },
      { key: 'help_defense', label: 'Help Defense' },
      { key: 'switching_on_defense', label: 'Switching on Defense' },
      { key: 'zone_defense', label: 'Zone Defense' },
      { key: 'defensive_mental_fortitude', label: 'Defensive Mental Fortitude' },
    ],
    mental: [
      { key: 'mental_game', label: 'Mental Game' },
      { key: 'feedback_implementation', label: 'Feedback Implementation' },
      { key: 'defensive_strategy', label: 'Defensive Team Strategy' },
      { key: 'offensive_strategy', label: 'Offensive Team Strategy' },
    ],
  });

  // 3.4) We'll keep track of the active tab, default to "home"
  const [activeTab, setActiveTab] = useState('home');

  // 3.5) Precompute the main category averages for radial tab display
  const [averages, setAverages] = useState({});
  useEffect(() => {
    if (selectedAthlete) {
      const newAvg = computeCategoryAverages(selectedAthlete);
      setAverages(newAvg);
    }
  }, [selectedAthlete]);

  // 3.6) Radar example for “Throw Comparison” inside Offensive
  const radarLabels = [
    'Backhand Power',
    'Forehand Power',
    'Specialty Power',
    'Backhand Accuracy',
    'Forehand Accuracy',
    'Specialty Accuracy',
  ];
  const radarDataValues = [
    selectedAthlete.skills.backhand_power,
    selectedAthlete.skills.forehand_power,
    selectedAthlete.skills.specialty_power,
    selectedAthlete.skills.backhand_accuracy,
    selectedAthlete.skills.forehand_accuracy,
    selectedAthlete.skills.specialty_accuracy,
  ];

  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      SyncManager.processSyncQueue();
    };
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  /* -------------------------------------
     RENDER
  -------------------------------------- */
  return (
    
    <div className="min-h-screen bg-gray-900 text-gray-100 flex flex-col">
            {!isOnline && (
        <div className="bg-yellow-600 text-white px-4 py-2 text-center">
          You're offline. Some features may be limited.
        </div>
      )}
      <InstallPrompt />
      {/** 1) Profile Header at the top */}
      <ProfileHeader
        name={selectedAthlete.metadata.name}
        email={selectedAthlete.metadata.email}
        overallScore={
          activeTab === 'home'
            ? computeOverallScore(selectedAthlete)
            : averages[activeTab] || 0
        }
        athletes={mockData}
        selectedAthleteId={selectedAthleteId}
        onSelectAthlete={(id) => setSelectedAthleteId(id)} // Pass a handler
      />

      {/** 3) The radial nav row (icons + radial) for Home, Physical, Offensive, Defensive, Mental */}
      <RadialTabs
        activeTab={activeTab}
        onChangeTab={setActiveTab}
        averages={averages}
      />

      {/** 4) Scrollable content below the radial nav */}
      <div className="flex-1 overflow-auto px-4 pb-8 mt-4">
        {/** HOME (Dashboard) */}
        {activeTab === 'home' && (
          <HomeSection player={selectedAthlete} />
        )}

        {/** PHYSICAL */}
        {activeTab === 'physical' && (
          <CategorySection
            title="Physical Attributes"
            skills={getCategoryData(selectedAthlete).physical}
            player={selectedAthlete.skills}
          />
        )}

        {/** OFFENSIVE */}
        {activeTab === 'offensive' && (
          <>
            <OffensiveSection
              offensiveData={getCategoryData(selectedAthlete).offensive}
              player={selectedAthlete.skills}
            />
            {/* Example: A Throw Comparison Radar Chart */}
            <div className="mt-6">
              <h2 className="text-xl font-semibold mb-2 text-gray-100">
                Throw Comparison
              </h2>
              <RadarChart labels={radarLabels} dataValues={radarDataValues} />
            </div>
          </>
        )}

        {/** DEFENSIVE */}
        {activeTab === 'defensive' && (
          <CategorySection
            title="Defensive Skills"
            skills={getCategoryData(selectedAthlete).defensive}
            player={selectedAthlete.skills}
          />
        )}

        {/** MENTAL */}
        {activeTab === 'mental' && (
          <CategorySection
            title="Mental & Recovery"
            skills={getCategoryData(selectedAthlete).mental}
            player={selectedAthlete.skills}
          />
        )}

        {/* Roadmap Modal */}
        <RoadmapModal 
        isOpen={isRoadmapOpen}
        onClose={() => setRoadmapOpen(false)}
        player={selectedAthlete}
      />
          <FloatingActionButton onClick={() => setRoadmapOpen(true)} />
    
    <RoadmapModal 
      isOpen={isRoadmapOpen}
      onClose={() => setRoadmapOpen(false)}
      player={selectedAthlete}
    />
      </div>
    </div>
  );
}

export default Dashboard;


File: src\data\mockData.js
================================================================================

// src/data/mockData.js

const mockData = [
  {
    id: 1, // Unique identifier for each athlete
    metadata: {
      name: "Chris Doehring",
      email: "doehring@umich.edu",
      ip: "2600:387:15:4510::6",
      user_agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_6_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Mobile/15E148 Safari/604.1",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-09T14:18:32.150Z",
    },
    growth_targets: [
      'change_of_direction',
      'defensive_pattern_recognition',
      'decision_making_vision'
    ],
    skills: {
      speed_explosiveness: 7,
      endurance: 8,
      vertical_leap: 3,
      change_of_direction: 6,
      boxing_out: 6,
      laying_out: 6,
      recovery: 7,
      flexibility_mobility: 5,
      injury_prevention: 7,
      defensive_strategy: 7,
      offensive_strategy: 8,
      mental_game: 9,
      feedback_implementation: 8,
      isolation_cutting: 6,
      continuation_cutting: 8,
      angles: 7,
      fakes_footwork: 5,
      timing_field_vision: 7,
      decisiveness: 7,
      catching: 9,
      zone_offense: 7,
      reading_the_disc: 7,
      normal_marking: 6,
      sideline_trap_marking: 7,
      downfield_defending: 4,
      handler_defending: 7,
      defensive_pattern_recognition: 6,
      help_defense: 6,
      switching_on_defense: 7,
      zone_defense: 7,
      defensive_mental_fortitude: 8,
      handler_movement: 8,
      poise_with_disc: 9,
      breaking_the_mark: 8,
      resetting_from_trap_sideline: 8,
      decision_making_vision: 8,
      flow_awareness: 8,
      throw_and_go: 7,
      offensive_pattern_recognition: 8,
      backhand_power: 8,
      backhand_accuracy: 7,
      backhand_quick_release: 7,
      backhand_release_variations: 7,
      backhand_against_wind: 8,
      backhand_against_difficult_marks: 7,
      backhand_tempo_control: 8,
      forehand_power: 4,
      forehand_accuracy: 5,
      forehand_quick_release: 7,
      forehand_release_variations: 5,
      forehand_against_wind: 4,
      forehand_against_difficult_marks: 9,
      forehand_tempo_control: 7,
      specialty_power: 4,
      specialty_accuracy: 8,
      specialty_quick_release: 7,
      specialty_release_variations: 5,
      specialty_against_wind: 4,
      specialty_against_difficult_marks: 5,
      specialty_tempo_control: 6,
      hucking_confidence: 7,
      hucking_shape_control: 7,
      hucking_tempo_control: 8,
      hucking_placement: 7,
    },
  },
  {
    id: 2,
    metadata: {
      name: "Rachel Graber",
      email: "rachelgraber16@gmail.com",
      ip: "104.36.4.125",
      user_agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 18_1_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.1.1 Mobile/15E148 Safari/605.1.15 (Ecosia ios@10.5.2.2065)",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-09T14:13:29.628Z",
    },
    growth_targets: [
      'defensive_pattern_recognition',
      'breaking_the_mark',
      'hucking_confidence'
    ],
    skills: {
      speed_explosiveness: 7,
      endurance: 7,
      vertical_leap: 4,
      change_of_direction: 8,
      boxing_out: 6,
      laying_out: 7,
      recovery: 8,
      flexibility_mobility: 9,
      injury_prevention: 8,
      defensive_strategy: 8,
      offensive_strategy: 5,
      mental_game: 7,
      feedback_implementation: 8,
      isolation_cutting: 5,
      continuation_cutting: 7,
      angles: 6,
      fakes_footwork: 7,
      timing_field_vision: 7,
      decisiveness: 4,
      catching: 7,
      zone_offense: 6,
      reading_the_disc: 6,
      normal_marking: 7,
      sideline_trap_marking: 7,
      downfield_defending: 7,
      handler_defending: 8,
      defensive_pattern_recognition: 6,
      help_defense: 6,
      switching_on_defense: 6,
      zone_defense: 8,
      defensive_mental_fortitude: 4,
      handler_movement: 6,
      poise_with_disc: 6,
      breaking_the_mark: 4,
      resetting_from_trap_sideline: 6,
      decision_making_vision: 5,
      flow_awareness: 5,
      throw_and_go: 6,
      offensive_pattern_recognition: 5,
      backhand_power: 8,
      backhand_accuracy: 7,
      backhand_quick_release: 5,
      backhand_release_variations: 5,
      backhand_against_wind: 4,
      backhand_against_difficult_marks: 5,
      backhand_tempo_control: 5,
      forehand_power: 7,
      forehand_accuracy: 7,
      forehand_quick_release: 5,
      forehand_release_variations: 6,
      forehand_against_wind: 3,
      forehand_against_difficult_marks: 7,
      forehand_tempo_control: 6,
      specialty_power: 3,
      specialty_accuracy: 3,
      specialty_quick_release: 3,
      specialty_release_variations: 3,
      specialty_against_wind: 1,
      specialty_against_difficult_marks: 3,
      specialty_tempo_control: 2,
      hucking_confidence: 7,
      hucking_shape_control: 7,
      hucking_tempo_control: 6,
      hucking_placement: 6,
    },
  },
  {
    id: 3,
    metadata: {
      name: "Charlie Vukovic",
      email: "cavukovic@gmail.com",
      ip: "68.109.206.199",
      user_agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 18_1_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/131.0.6778.154 Mobile/15E148 Safari/604.1",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-07T22:04:37.985Z",
    },
    growth_targets: [
      'speed_explosiveness',
      'defensive_mental_fortitude',
      'continuation_cutting'
    ],
    skills: {
      speed_explosiveness: 6,
      endurance: 8,
      vertical_leap: 7,
      change_of_direction: 6,
      boxing_out: 8,
      laying_out: 4,
      recovery: 5,
      flexibility_mobility: 6,
      injury_prevention: 6,
      defensive_strategy: 8,
      offensive_strategy: 6,
      mental_game: 9,
      feedback_implementation: 7,
      isolation_cutting: 6,
      continuation_cutting: 6,
      angles: 5,
      fakes_footwork: 5,
      timing_field_vision: 4,
      decisiveness: 5,
      catching: 7,
      zone_offense: 6,
      reading_the_disc: 7,
      normal_marking: 3,
      sideline_trap_marking: 5,
      downfield_defending: 6,
      handler_defending: 4,
      defensive_pattern_recognition: 7,
      help_defense: 8,
      switching_on_defense: 8,
      zone_defense: 8,
      defensive_mental_fortitude: 8,
      handler_movement: 5,
      poise_with_disc: 7,
      breaking_the_mark: 8,
      resetting_from_trap_sideline: 8,
      decision_making_vision: 4,
      flow_awareness: 5,
      throw_and_go: 5,
      offensive_pattern_recognition: 5,
      backhand_power: 9,
      backhand_accuracy: 7,
      backhand_quick_release: 6,
      backhand_release_variations: 6,
      backhand_against_wind: 8,
      backhand_against_difficult_marks: 6,
      backhand_tempo_control: 5,
      forehand_power: 7,
      forehand_accuracy: 7,
      forehand_quick_release: 7,
      forehand_release_variations: 7,
      forehand_against_wind: 6,
      forehand_against_difficult_marks: 7,
      forehand_tempo_control: 7,
      specialty_power: 7,
      specialty_accuracy: 6,
      specialty_quick_release: 6,
      specialty_release_variations: 6,
      specialty_against_wind: 4,
      specialty_against_difficult_marks: 6,
      specialty_tempo_control: 4,
      hucking_confidence: 7,
      hucking_shape_control: 6,
      hucking_tempo_control: 6,
      hucking_placement: 6,
    },
  },
  {
    id: 4,
    metadata: {
      name: "Mark Whitton",
      email: "whittonm@mail.gvsu.edu",
      ip: "2601:405:4700:1db0:411b:5a4c:ddba:1afb",
      user_agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.2 Mobile/15E148 Safari/604.1",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-07T02:07:01.581Z",
    },
    growth_targets: [
      'breaking_the_mark',
      'endurance',
      'handler_movement'
    ],
    skills: {
      speed_explosiveness: 7,
      endurance: 6,
      vertical_leap: 7,
      change_of_direction: 5,
      boxing_out: 5,
      laying_out: 7,
      recovery: 4,
      flexibility_mobility: 6,
      injury_prevention: 6,
      defensive_strategy: 8,
      offensive_strategy: 7,
      mental_game: 6,
      feedback_implementation: 6,
      isolation_cutting: 5,
      continuation_cutting: 6,
      angles: 6,
      fakes_footwork: 3,
      timing_field_vision: 7,
      decisiveness: 3,
      catching: 9,
      zone_offense: 5,
      reading_the_disc: 7,
      normal_marking: 6,
      sideline_trap_marking: 8,
      downfield_defending: 6,
      handler_defending: 4,
      defensive_pattern_recognition: 6,
      help_defense: 7,
      switching_on_defense: 8,
      zone_defense: 7,
      defensive_mental_fortitude: 7,
      handler_movement: 5,
      poise_with_disc: 7,
      breaking_the_mark: 4,
      resetting_from_trap_sideline: 7,
      decision_making_vision: 4,
      flow_awareness: 6,
      throw_and_go: 5,
      offensive_pattern_recognition: 5,
      backhand_power: 8,
      backhand_accuracy: 7,
      backhand_quick_release: 5,
      backhand_release_variations: 6,
      backhand_against_wind: 9,
      backhand_against_difficult_marks: 6,
      backhand_tempo_control: 7,
      forehand_power: 9,
      forehand_accuracy: 8,
      forehand_quick_release: 6,
      forehand_release_variations: 6,
      forehand_against_wind: 8,
      forehand_against_difficult_marks: 7,
      forehand_tempo_control: 8,
      specialty_power: 7,
      specialty_accuracy: 7,
      specialty_quick_release: 6,
      specialty_release_variations: 7,
      specialty_against_wind: 6,
      specialty_against_difficult_marks: 6,
      specialty_tempo_control: 6,
      hucking_confidence: 9,
      hucking_shape_control: 8,
      hucking_tempo_control: 8,
      hucking_placement: 8,
    },
  },
  {
    id: 5,
    metadata: {
      name: "Rachel Mast",
      email: "rachelgerb520@gmail.com",
      ip: "50.126.208.197",
      user_agent: "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-07T01:55:25.039Z",
    },
    growth_targets: [
      'hucking_confidence',
      'handler_movement',
      'breaking_the_mark'
    ],
    skills: {
      speed_explosiveness: 8,
      endurance: 8,
      vertical_leap: 7,
      change_of_direction: 8,
      boxing_out: 7,
      laying_out: 7,
      recovery: 10,
      flexibility_mobility: 8,
      injury_prevention: 9,
      defensive_strategy: 7,
      offensive_strategy: 7,
      mental_game: 9,
      feedback_implementation: 9,
      isolation_cutting: 9,
      continuation_cutting: 9,
      angles: 9,
      fakes_footwork: 7,
      timing_field_vision: 8,
      decisiveness: 8,
      catching: 9,
      zone_offense: 8,
      reading_the_disc: 8,
      normal_marking: 8,
      sideline_trap_marking: 8,
      downfield_defending: 8,
      handler_defending: 8,
      defensive_pattern_recognition: 6,
      help_defense: 8,
      switching_on_defense: 8,
      zone_defense: 7,
      defensive_mental_fortitude: 7,
      handler_movement: 7,
      poise_with_disc: 6,
      breaking_the_mark: 6,
      resetting_from_trap_sideline: 7,
      decision_making_vision: 8,
      flow_awareness: 8,
      throw_and_go: 8,
      offensive_pattern_recognition: 5,
      backhand_power: 2,
      backhand_accuracy: 7,
      backhand_quick_release: 8,
      backhand_release_variations: 6,
      backhand_against_wind: 5,
      backhand_against_difficult_marks: 6,
      backhand_tempo_control: 6,
      forehand_power: 2,
      forehand_accuracy: 6,
      forehand_quick_release: 5,
      forehand_release_variations: 5,
      forehand_against_wind: 1,
      forehand_against_difficult_marks: 5,
      forehand_tempo_control: 5,
      specialty_power: 1,
      specialty_accuracy: 1,
      specialty_quick_release: 1,
      specialty_release_variations: 1,
      specialty_against_wind: 1,
      specialty_against_difficult_marks: 1,
      specialty_tempo_control: 1,
      hucking_confidence: 2,
      hucking_shape_control: 2,
      hucking_tempo_control: 2,
      hucking_placement: 2,
    },
  },
  {
    id: 6,
    metadata: {
      name: "Anson Reppermund",
      email: "reprimand1000@gmail.com",
      ip: "108.39.240.253",
      user_agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 18_1_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.1.1 Mobile/15E148 Safari/604.1",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-06T23:35:25.293Z",
    },
    growth_targets: [
      'injury_prevention',
      'breaking_the_mark',
      'decisiveness'
    ],
    skills: {
      speed_explosiveness: 9,
      endurance: 5,
      vertical_leap: 9,
      change_of_direction: 4,
      boxing_out: 7,
      laying_out: 3,
      recovery: 7,
      flexibility_mobility: 4,
      injury_prevention: 4,
      defensive_strategy: 9,
      offensive_strategy: 7,
      mental_game: 8,
      feedback_implementation: 6,
      isolation_cutting: 6,
      continuation_cutting: 5,
      angles: 8,
      fakes_footwork: 4,
      timing_field_vision: 7,
      decisiveness: 5,
      catching: 6,
      zone_offense: 7,
      reading_the_disc: 9,
      normal_marking: 5,
      sideline_trap_marking: 8,
      downfield_defending: 10,
      handler_defending: 3,
      defensive_pattern_recognition: 10,
      help_defense: 10,
      switching_on_defense: 9,
      zone_defense: 8,
      defensive_mental_fortitude: 7,
      handler_movement: 8,
      poise_with_disc: 6,
      breaking_the_mark: 4,
      resetting_from_trap_sideline: 7,
      decision_making_vision: 7,
      flow_awareness: 6,
      throw_and_go: 5,
      offensive_pattern_recognition: 5,
      backhand_power: 8,
      backhand_accuracy: 5,
      backhand_quick_release: 8,
      backhand_release_variations: 7,
      backhand_against_wind: 7,
      backhand_against_difficult_marks: 3,
      backhand_tempo_control: 5,
      forehand_power: 5,
      forehand_accuracy: 6,
      forehand_quick_release: 4,
      forehand_release_variations: 4,
      forehand_against_wind: 6,
      forehand_against_difficult_marks: 5,
      forehand_tempo_control: 5,
      specialty_power: 6,
      specialty_accuracy: 5,
      specialty_quick_release: 5,
      specialty_release_variations: 7,
      specialty_against_wind: 3,
      specialty_against_difficult_marks: 6,
      specialty_tempo_control: 5,
      hucking_confidence: 5,
      hucking_shape_control: 6,
      hucking_tempo_control: 5,
      hucking_placement: 6,
    },
  },
  {
    id: 7,
    metadata: {
      name: "Jonathan Mast",
      email: "jon1mast@gmail.com",
      ip: "50.126.208.197",
      user_agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-06T23:28:51.361Z",
    },
    growth_targets: [
      'endurance',
      'speed_explosiveness',
      'decisiveness'
    ],
    skills: {
      speed_explosiveness: 4,
      endurance: 3,
      vertical_leap: 3,
      change_of_direction: 5,
      boxing_out: 7,
      laying_out: 1,
      recovery: 6,
      flexibility_mobility: 7,
      injury_prevention: 4,
      defensive_strategy: 7,
      offensive_strategy: 9,
      mental_game: 9,
      feedback_implementation: 10,
      isolation_cutting: 3,
      continuation_cutting: 4,
      angles: 6,
      fakes_footwork: 5,
      timing_field_vision: 6,
      decisiveness: 5,
      catching: 9,
      zone_offense: 8,
      reading_the_disc: 9,
      normal_marking: 8,
      sideline_trap_marking: 9,
      downfield_defending: 4,
      handler_defending: 6,
      defensive_pattern_recognition: 6,
      help_defense: 8,
      switching_on_defense: 8,
      zone_defense: 6,
      defensive_mental_fortitude: 4,
      handler_movement: 9,
      poise_with_disc: 10,
      breaking_the_mark: 9,
      resetting_from_trap_sideline: 9,
      decision_making_vision: 8,
      flow_awareness: 9,
      throw_and_go: 8,
      offensive_pattern_recognition: 9,
      backhand_power: 9,
      backhand_accuracy: 9,
      backhand_quick_release: 9,
      backhand_release_variations: 9,
      backhand_against_wind: 8,
      backhand_against_difficult_marks: 9,
      backhand_tempo_control: 9,
      forehand_power: 8,
      forehand_accuracy: 9,
      forehand_quick_release: 10,
      forehand_release_variations: 10,
      forehand_against_wind: 8,
      forehand_against_difficult_marks: 10,
      forehand_tempo_control: 10,
      specialty_power: 8,
      specialty_accuracy: 8,
      specialty_quick_release: 8,
      specialty_release_variations: 10,
      specialty_against_wind: 6,
      specialty_against_difficult_marks: 8,
      specialty_tempo_control: 8,
      hucking_confidence: 7,
      hucking_shape_control: 7,
      hucking_tempo_control: 7,
      hucking_placement: 9,
    },
  },
  // Add more athletes as needed
];

export default mockData;


File: src\hooks\usePreloadState.js
================================================================================

// src/hooks/usePreloadState.js
import { useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext'; // Import useAuth

export function usePreloadState() {
  const location = useLocation();
  const navigate = useNavigate();
  const { user } = useAuth(); // Access user from AuthContext

  useEffect(() => {
    // Store current path for direct access
    sessionStorage.setItem('last_path', location.pathname);

    // Preload next likely route based on current path
    if (location.pathname === '/login') {
      // Preload dashboard and its dependencies
      const preloadDashboard = async () => {
        try {
          // Start preloading after a short delay to prioritize login render
          await new Promise(resolve => setTimeout(resolve, 2000));
          await import('../Dashboard');
        } catch (error) {
          console.error('Error preloading Dashboard:', error);
        }
      };
      preloadDashboard();
    }

    // Handle direct access to protected routes
    if (user && location.pathname === '/login') {
      const lastPath = sessionStorage.getItem('last_path') || '/';
      navigate(lastPath, { replace: true });
    }
  }, [location, navigate, user]);

  return {
    currentPath: location.pathname,
    isAuthenticated: !!user, // Use user presence to determine authentication
  };
}


File: src\index.css
================================================================================

/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: 'Inter', sans-serif;
}


File: src\index.js
================================================================================

// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App.jsx';
import { BrowserRouter } from 'react-router-dom'; // Import BrowserRouter
import { registerServiceWorker } from './serviceWorkerRegistration';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter> {/* Wrap App with BrowserRouter */}
      <div className="dark">  {/* <-- Force dark mode */}
        <App />
      </div>
    </BrowserRouter>
  </React.StrictMode>
);
registerServiceWorker();
if (navigator.serviceWorker.controller) {
  console.log('[SW] Service worker is controlling the page');
} else {
  console.warn('[SW] Service worker is NOT controlling the page');
}


File: src\reportWebVitals.js
================================================================================

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


File: src\serviceWorkerRegistration.js
================================================================================

// src/serviceWorkerRegistration.js

export function registerServiceWorker() {
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/service-worker.js')
        .then((registration) => {
          console.log('[SW] Registration successful:', registration);

          // Listen for updates to the service worker.
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            console.log('[SW] New worker being installed:', newWorker);

            newWorker.addEventListener('statechange', () => {
              console.log('[SW] New worker state:', newWorker.state);
              if (newWorker.state === 'installed') {
                if (navigator.serviceWorker.controller) {
                  // New update available
                  console.log('[SW] New update available');
                  // Optionally, notify the user about the update
                } else {
                  // Content cached for offline use
                  console.log('[SW] Content cached for offline use');
                }
              }
            });
          });

          // Check for controlling service worker
          if (navigator.serviceWorker.controller) {
            console.log('[SW] Service worker is controlling the page');
          } else {
            console.log('[SW] Service worker is NOT controlling the page');
          }

        })
        .catch((error) => {
          console.error('[SW] Service worker registration failed:', error);
        });
    });

    // Reload the page when the service worker updates
    let refreshing = false;
    navigator.serviceWorker.addEventListener('controllerchange', () => {
      if (!refreshing) {
        refreshing = true;
        window.location.reload();
      }
    });

    // Handle messages from the service worker
    navigator.serviceWorker.addEventListener('message', (event) => {
      console.log('[SW] Received message:', event.data);
    });
  } else {
    console.log('[SW] Service workers are not supported');
  }
}


File: src\setupTests.js
================================================================================

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


File: src\utils\cache.js
================================================================================

// src/utils/cache.js
export const DataCache = {
    async getPlayer(id) {
      const key = `player-${id}`;
      try {
        const cached = localStorage.getItem(key);
        if (cached) {
          return JSON.parse(cached);
        }
        return null;
      } catch (error) {
        console.error('Error accessing cache:', error);
        return null;
      }
    },
  
    async setPlayer(id, data) {
      const key = `player-${id}`;
      try {
        localStorage.setItem(key, JSON.stringify(data));
      } catch (error) {
        console.error('Error saving to cache:', error);
      }
    }
  };

File: src\utils\constants.js
================================================================================

// src/utils/constants.js

export const METADATA_KEYS = [
    'id',
    'name',
    'email',
    'ip',
    'user_agent',
    'referrer',
    'created_at',
  ];
  

File: src\utils\helpers.js
================================================================================

// src/utils/helpers.js

import { METADATA_KEYS } from './constants';

// A small utility to average numeric values for a given list of keys
export function averageOfKeys(player, keys) {
  let sum = 0, count = 0;
  for (const key of keys) {
    if (typeof player.skills[key] === 'number' && !METADATA_KEYS.includes(key)) {
      sum += player.skills[key];
      count++;
    }
  }
  return count === 0 ? 0 : parseFloat((sum / count).toFixed(1));
}

// Compute category averages for Mental, Physical, Cutting, Throwing, Defense, Handling, Offensive
export function computeCategoryAverages(player) {
  // Define keys for each category
  const categories = {
    mental: [
      'mental_game',
      'feedback_implementation',
      'defensive_strategy',
      'offensive_strategy',

    ],
    physical: [
      'speed_explosiveness',
      'endurance',
      'vertical_leap',
      'change_of_direction',
      'boxing_out',
      'laying_out',
      'recovery',
      'flexibility_mobility',
      'injury_prevention',
    ],
    cutting: [
      'angles',
      'fakes_footwork',
      'timing_field_vision',
      'decisiveness',
      'catching',
      'flow_awareness',
      'isolation_cutting',
      'continuation_cutting',
    ],
    handling: [
      'handler_movement',
      'poise_with_disc',
      'breaking_the_mark',
      'resetting_from_trap_sideline',
      'decision_making_vision',
      'offensive_pattern_recognition',
      'throw_and_go',
    ],
    throwing: [
      // Backhand
      'backhand_power',
      'backhand_accuracy',
      'backhand_quick_release',
      'backhand_release_variations',
      'backhand_against_wind',
      'backhand_against_difficult_marks',
      'backhand_tempo_control',
      // Forehand
      'forehand_power',
      'forehand_accuracy',
      'forehand_quick_release',
      'forehand_release_variations',
      'forehand_against_wind',
      'forehand_against_difficult_marks',
      'forehand_tempo_control',
      // Specialty
      'specialty_power',
      'specialty_accuracy',
      'specialty_quick_release',
      'specialty_release_variations',
      'specialty_against_wind',
      'specialty_against_difficult_marks',
      'specialty_tempo_control',
      // Hucking
      'hucking_confidence',
      'hucking_shape_control',
      'hucking_tempo_control',
      'hucking_placement',
    ],
    defensive: [
      'normal_marking',
      'sideline_trap_marking',
      'downfield_defending',
      'handler_defending',
      'defensive_pattern_recognition',
      'help_defense',
      'switching_on_defense',
      'zone_defense',
      'defensive_mental_fortitude',
    ],
  };

  // Compute individual averages
  const mental = averageOfKeys(player, categories.mental);
  const physical = averageOfKeys(player, categories.physical);
  const cutting = averageOfKeys(player, categories.cutting);
  const handling = averageOfKeys(player, categories.handling);
  const throwing = averageOfKeys(player, categories.throwing);
  const defensive = averageOfKeys(player, categories.defensive);

  // Offensive is the average of cutting, handling, and throwing
  const offensive = parseFloat(((cutting + handling + throwing) / 3).toFixed(1));

  return {
    mental,
    physical,
    cutting,
    handling,
    throwing,
    defensive,
    offensive,
  };
}

// Compute overall score excluding metadata
export function computeOverallScore(player) {
  let sum = 0, count = 0;
  for (const key in player.skills) {
    if (typeof player.skills[key] === 'number' && !METADATA_KEYS.includes(key)) {
      sum += player.skills[key];
      count++;
    }
  }
  return count === 0 ? 0 : parseFloat((sum / count).toFixed(1));
}


File: src\utils\slugify.js
================================================================================

// src/utils/slugify.js
import slugify from 'slugify';

export const createAthleteSlug = (name) => {
  return slugify(name, {
    lower: true,       // Convert to lowercase
    strict: true,      // Remove special characters
    remove: /[*+~.()'"!:@]/g, // Additional character removal if needed
  });
};


File: src\utils\sync.js
================================================================================

// src/utils/sync.js
export const SyncManager = {
    async queueSync(action, data) {
      const syncQueue = JSON.parse(localStorage.getItem('syncQueue') || '[]');
      syncQueue.push({ action, data, timestamp: Date.now() });
      localStorage.setItem('syncQueue', JSON.stringify(syncQueue));
    },
  
    async processSyncQueue() {
      if (!navigator.onLine) return;
  
      const syncQueue = JSON.parse(localStorage.getItem('syncQueue') || '[]');
      if (syncQueue.length === 0) return;
  
      for (const item of syncQueue) {
        try {
          // Process sync item
          await this.processItem(item);
          // Remove from queue if successful
          const newQueue = syncQueue.filter(i => i !== item);
          localStorage.setItem('syncQueue', JSON.stringify(newQueue));
        } catch (error) {
          console.error('Sync failed for item:', item, error);
        }
      }
    }
  };

File: tailwind.config.js
================================================================================

module.exports = {
  darkMode: 'class',
  content: ['./src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter', 'ui-sans-serif', 'system-ui'],
      },
      colors: {
        emerald: {
          400: '#10b981',
        },
        fuchsia: {
          400: '#d946ef',
        },
      },
      transitionProperty: {
        'opacity': 'opacity',
      },
      transitionDuration: {
        '500': '500ms',
      },
    },
  },
  plugins: [],
};

File: src\App.css
================================================================================

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}
/* Ensure dropdowns are visible globally */
.dropdown-container {
  position: relative;
  z-index: 1;
}

.dropdown-menu {
  position: absolute;
  z-index: 9999; /* Always on top */
}

.fixed-dropdown-wrapper {
  position: relative;
  z-index: 9999;
}

/* Ensure the dropdown menu is always on top */
.fixed-dropdown-wrapper [role="listbox"] {
  z-index: 9999;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


File: src\App.jsx
================================================================================

import { lazy, Suspense } from 'react';
import { Routes, Route } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import { LoadingState } from './components/LoadingState';

// Lazy load components
const LoginPage = lazy(() => import('./components/auth/LoginPage'));
const Dashboard = lazy(() => import('./Dashboard'));
const ProtectedRoute = lazy(() => import('./components/auth/ProtectedRoute'));

function App() {
  return (
    <AuthProvider>
      <Routes>
        <Route 
          path="/login" 
          element={
            <Suspense fallback={
              <div className="min-h-screen bg-gray-900 flex items-center justify-center">
                <h1 className="text-xl text-gray-200">Welcome back</h1>
              </div>
            }>
              <LoginPage />
            </Suspense>
          } 
        />
        <Route
          path="/*"
          element={
            <Suspense fallback={<LoadingState />}>
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            </Suspense>
          }
        />
      </Routes>
    </AuthProvider>
  );
}

export default App;

File: src\App.test.js
================================================================================

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


File: src\components\AthleteDropdown.jsx
================================================================================

// src/components/AthleteDropdown.jsx

import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

const AthleteDropdown = ({ athletes, selectedAthleteId, onSelectAthlete }) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef();

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target)
      ) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Get the selected athlete's name
  const selectedAthlete = athletes.find(a => a.id === selectedAthleteId);

  return (
    <div className="absolute top-4 right-4 md:top-6 md:right-6" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center bg-gray-800 text-gray-300 hover:bg-gray-700 px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-emerald-500"
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        <span className="mr-2 text-sm">{selectedAthlete ? selectedAthlete.name : "Select Athlete"}</span>
        <ChevronDown className="w-4 h-4" aria-hidden="true" />
      </button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="mt-2 w-48 bg-gray-800 rounded-md shadow-lg z-30"
            role="listbox"
            aria-labelledby="athlete-dropdown"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            transition={{ duration: 0.2 }}
          >
            <ul className="py-1">
              {athletes.map(athlete => (
                <li key={athlete.id}>
                  <button
                    onClick={() => {
                      onSelectAthlete(athlete.id);
                      setIsOpen(false);
                    }}
                    className={`w-full text-left px-4 py-2 text-sm ${
                      athlete.id === selectedAthleteId
                        ? 'bg-gray-700 text-white'
                        : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                    }`}
                    role="option"
                    aria-selected={athlete.id === selectedAthleteId}
                  >
                    {athlete.name}
                  </button>
                </li>
              ))}
            </ul>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default AthleteDropdown;


File: src\components\auth\LoginPage.jsx
================================================================================

import React, { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Mail, 
  Lock, 
  AlertCircle, 
  Loader2, 
  ArrowRight,
  CheckCircle 
} from 'lucide-react';

export default function LoginPage() {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [isResetPassword, setIsResetPassword] = useState(false);
  const navigate = useNavigate();
  const { login, signup, loginWithGoogle, resetPassword } = useAuth();

  // Function to handle user-friendly error messages
  const getErrorMessage = useCallback((error) => {
    switch (error.code) {
      case 'auth/invalid-credential':
        return 'Invalid email or password. Please check your credentials and try again.';
      case 'auth/wrong-password':
        return 'Incorrect password. Please try again.';
      case 'auth/user-not-found':
        return 'No account found with this email.';
      case 'auth/email-already-in-use':
        return 'An account already exists with this email.';
      case 'auth/weak-password':
        return 'Password should be at least 6 characters.';
      case 'auth/invalid-email':
        return 'Please enter a valid email address.';
      case 'auth/too-many-requests':
        return 'Too many attempts. Please try again later.';
      case 'auth/network-request-failed':
        return 'Network error. Please check your internet connection and try again.';
      case 'auth/popup-closed-by-user':
        return 'Sign in was cancelled. Please try again.';
      case 'auth/cancelled-popup-request':
        return 'Sign in process was interrupted. Please try again.';
      case 'auth/operation-not-allowed':
        return 'This sign in method is not enabled. Please try another method.';
      case 'auth/user-disabled':
        return 'This account has been disabled. Please contact support for assistance.';
      default:
        return error.message || 'An error occurred. Please try again.';
    }
}, []);

  const clearMessages = useCallback(() => {
    setError('');
    setSuccessMessage('');
  }, []);

  const resetForm = useCallback(() => {
    setEmail('');
    setPassword('');
    clearMessages();
  }, [clearMessages]);

  const handleAuthModeChange = useCallback((mode) => {
    if (mode === 'reset') {
      setIsResetPassword(true);
      setIsLogin(true);
    } else {
      setIsResetPassword(false);
      setIsLogin(mode === 'login');
    }
    clearMessages();
  }, [clearMessages]);

  async function handleSubmit(e) {
    e.preventDefault();
    clearMessages();
    setLoading(true);

    try {
      if (isResetPassword) {
        await resetPassword(email);
        setSuccessMessage('Password reset email sent! Please check your inbox.');
        setIsResetPassword(false);
      } else if (isLogin) {
        await login(email, password);
        resetForm();
        navigate('/');
      } else {
        await signup(email, password);
        resetForm();
        navigate('/');
      }
    } catch (err) {
      setError(getErrorMessage(err));
    } finally {
      setLoading(false);
    }
  }

  async function handleGoogleLogin() {
    clearMessages();
    setLoading(true);

    try {
      await loginWithGoogle();
      resetForm();
      navigate('/');
    } catch (err) {
      setError(getErrorMessage(err));
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 flex flex-col items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Logo/Brand Section */}
        <div className="text-center mb-8">
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            <div className="w-16 h-16 mx-auto mb-4 flex items-center justify-center">
              <img src="/favicon.svg" alt="Logo" className="w-full h-full" />
            </div>
          </motion.div>
          <h2 className="text-2xl md:text-3xl font-bold text-white">
            {isResetPassword 
              ? 'Reset Password'
              : isLogin 
                ? 'Welcome back' 
                : 'Create your account'}
          </h2>
          <p className="mt-2 text-gray-400 text-sm">
            {isResetPassword
              ? 'Enter your email and we will send you reset instructions.'
              : isLogin 
                ? 'Great to see you again! Please enter your details.'
                : 'Start your performance tracking journey today.'}
          </p>
        </div>

        {/* Main Form */}
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.4, delay: 0.1 }}
          className="bg-gray-800/50 backdrop-blur-xl rounded-2xl p-6 md:p-8 shadow-xl border border-gray-700/50"
        >
          <AnimatePresence mode="wait">
            {error && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="mb-4 p-3 rounded-lg bg-red-500/10 border border-red-500/50 flex items-center gap-2"
              >
                <AlertCircle className="h-4 w-4 text-red-500 flex-shrink-0" />
                <p className="text-sm text-red-500">{error}</p>
              </motion.div>
            )}
            {successMessage && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="mb-4 p-3 rounded-lg bg-emerald-500/10 border border-emerald-500/50 flex items-center gap-2"
              >
                <CheckCircle className="h-4 w-4 text-emerald-500 flex-shrink-0" />
                <p className="text-sm text-emerald-500">{successMessage}</p>
              </motion.div>
            )}
          </AnimatePresence>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-1">
              <label htmlFor="email" className="text-sm font-medium text-gray-300">
                Email
              </label>
              <div className="relative">
                <input
                  id="email"
                  type="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full px-4 py-2.5 rounded-lg bg-gray-900/50 border border-gray-700 text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500 transition-colors"
                  placeholder="you@example.com"
                />
                <Mail className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
              </div>
            </div>

            {!isResetPassword && (
              <div className="space-y-1">
                <div className="flex items-center justify-between">
                  <label htmlFor="password" className="text-sm font-medium text-gray-300">
                    Password
                  </label>
                  {isLogin && (
                    <button
                      type="button"
                      onClick={() => handleAuthModeChange('reset')}
                      className="text-sm text-emerald-400 hover:text-emerald-300 transition-colors"
                    >
                      Forgot password?
                    </button>
                  )}
                </div>
                <div className="relative">
                  <input
                    id="password"
                    type="password"
                    required={!isResetPassword}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full px-4 py-2.5 rounded-lg bg-gray-900/50 border border-gray-700 text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500 transition-colors"
                    placeholder="••••••••"
                  />
                  <Lock className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
                </div>
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-emerald-500 hover:bg-emerald-600 text-white py-2.5 rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {loading ? (
                <Loader2 className="w-5 h-5 animate-spin" />
              ) : (
                <>
                  {isResetPassword 
                    ? 'Send reset instructions' 
                    : isLogin 
                      ? 'Sign in' 
                      : 'Create account'}
                  <ArrowRight className="w-5 h-5" />
                </>
              )}
            </button>
          </form>

          {!isResetPassword && (
            <>
              <div className="mt-6">
                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-gray-700"></div>
                  </div>
                  <div className="relative flex justify-center text-sm">
                    <span className="px-2 bg-gray-800/50 text-gray-400">
                      Or continue with
                    </span>
                  </div>
                </div>

                <button
                  onClick={handleGoogleLogin}
                  disabled={loading}
                  className="mt-4 w-full flex items-center justify-center gap-3 px-4 py-2.5 border border-gray-700 rounded-lg text-gray-300 hover:bg-gray-700/50 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500"
                >
                  <svg className="h-5 w-5" viewBox="0 0 24 24">
                    <path
                      fill="currentColor"
                      d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
                    />
                  </svg>
                  Google
                </button>
              </div>
            </>
          )}

          <div className="mt-6 text-center space-y-3">
            {!isResetPassword && (
              <button
                onClick={() => handleAuthModeChange(isLogin ? 'signup' : 'login')}
                className="text-sm text-emerald-400 hover:text-emerald-300 transition-colors"
              >
                {isLogin ? "Don't have an account? Sign up" : 'Already have an account? Sign in'}
              </button>
            )}
            {isResetPassword && (
              <button
                onClick={() => handleAuthModeChange('login')}
                className="block w-full text-sm text-gray-400 hover:text-gray-300 transition-colors"
              >
                Return to login
              </button>
            )}
          </div>
        </motion.div>
      </div>
    </div>
  );
}

File: src\components\auth\ProtectedRoute.jsx
================================================================================

// src/components/auth/ProtectedRoute.jsx
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

export default function ProtectedRoute({ children }) {
  const { user } = useAuth();
  
  if (!user) {
    return <Navigate to="/login" replace />;
  }

  return children;
}

File: src\components\CategorySection.jsx
================================================================================

// src/components/CategorySection.jsx

import React from 'react';
import SkillCard from './SkillCard';

const CategorySection = ({ title, skills, player }) => {
  return (
    <div className="mb-6">
      <h2 className="text-xl font-semibold mb-3 text-gray-100">{title}</h2>
      <div className="space-y-2">
        {skills.map((skill) => (
          <SkillCard
            key={skill.key}
            label={skill.label}
            value={player[skill.key]}
          />
        ))}
      </div>
    </div>
  );
};

export default CategorySection;


File: src\components\FloatingActionButton.jsx
================================================================================

import React, { useState } from 'react';
import { Milestone } from 'lucide-react';

const FloatingActionButton = ({ onClick }) => {
  const [ripple, setRipple] = useState({ active: false, x: 0, y: 0 });

  const handleClick = (e) => {
    // Get click coordinates relative to button
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    // Trigger ripple
    setRipple({ active: true, x, y });
    
    // Reset ripple after animation
    setTimeout(() => setRipple({ active: false, x: 0, y: 0 }), 600);
    
    // Call the original onClick handler
    onClick();
  };

  return (
    <button
      onClick={handleClick}
      className="fixed bottom-6 right-6 bg-emerald-500 hover:bg-emerald-600 text-white p-3 rounded-full shadow-lg z-50 transition-colors duration-200 flex items-center justify-center overflow-hidden"
      aria-label="View Development Path"
    >
      <Milestone className="w-6 h-6" />
      {ripple.active && (
        <span
          className="absolute animate-ripple rounded-full bg-white/30"
          style={{
            left: ripple.x - 50,  // Center the 100px wide ripple
            top: ripple.y - 50,   // Center the 100px tall ripple
            width: '100px',
            height: '100px',
          }}
        />
      )}
    </button>
  );
};

export default FloatingActionButton;

File: src\components\HomeSection.jsx
================================================================================

// src/components/HomeSection.jsx

import React, { useState, useEffect } from 'react';
import RadarChart from './RadarChart';
import SwipeableInsights from './SwipeableInsights';
import SkillHierarchy from './SkillHierarchy';
import { computeCategoryAverages } from '../utils/helpers';

function HomeSection({ player }) {
  const [averages, setAverages] = useState({
    mental: 0,
    physical: 0,
    cutting: 0,
    handling: 0,
    throwing: 0,
    defensive: 0,
    offensive: 0,
  });

  useEffect(() => {
    const avg = computeCategoryAverages(player);
    setAverages(avg);
  }, [player]);

  // Radar chart data for 6 categories
  const radarLabels = ['Mental', 'Physical', 'Cutting', 'Handling', 'Throwing', 'Defense'];
  const radarDataValues = [
    averages.mental,
    averages.physical,
    averages.cutting,
    averages.handling,
    averages.throwing,
    averages.defensive,
  ];

  return (
    <div className="mx-auto space-y-6">
      {/* Key Insights (Top 3 strengths, etc.) */}
      <SwipeableInsights 
        player={player} 
        growthTargets={player.growth_targets || []}
      />

      {/* Main Stats Section */}
      <div className="grid gap-6 grid-cols-1 lg:grid-cols-2">
        {/* Radar Chart */}
        <div className="bg-gray-800 p-5 rounded-lg shadow-md">
          <h2 className="text-lg font-semibold text-gray-100 mb-4 mt-0">
            Category Averages
          </h2>
          <div className="w-full flex justify-center">
            <div className="w-full aspect-square max-w-[400px]">
              <RadarChart labels={radarLabels} dataValues={radarDataValues} />
            </div>
          </div>
        </div>

        {/* Skill Hierarchy */}
        <div className="bg-gray-800 p-5 rounded-lg shadow-md">
          <h2 className="text-lg font-semibold text-gray-100 mb-4 mt-0">
            Detailed Breakdown
          </h2>
          <div className="overflow-auto max-h-[400px] custom-scrollbar">
            <SkillHierarchy player={player} />
          </div>
        </div>
      </div>

      {/* Additional Info or Future Sections */}
      <div className="bg-gray-800 p-5 rounded-lg shadow-md">
        <h2 className="text-lg font-semibold text-gray-100 mb-4">
          Recent Progress
        </h2>
        <p className="text-gray-400 text-sm">
          Progress tracking section coming soon...
        </p>
      </div>
    </div>
  );
}

export default HomeSection;

File: src\components\InsightsSection.jsx
================================================================================

// src/components/InsightsSection.jsx

import React from 'react';
import { METADATA_KEYS } from '../utils/constants';

const InsightsSection = ({ player }) => {
  // Example logic: find top 3 skills (by numeric value)
  const skillEntries = Object.entries(player).filter(([key, val]) => {
    return typeof val === 'number' && !METADATA_KEYS.includes(key);
  });

  // Sort descending by value
  skillEntries.sort((a, b) => b[1] - a[1]);
  const topThree = skillEntries.slice(0, 3);

  return (
    <div className="mb-6">
      <h2 className="text-xl font-bold uppercase mb-2 text-gray-100">
        Key Insights
      </h2>
      <div className="bg-gray-800 p-4 rounded-lg shadow-md">
        <div className="text-gray-300 text-xs font-bold uppercase tracking-widest mb-2">
          <span className="font-semibold text-emerald-400">
            Top 3 Strengths:
          </span>
        </div>
        {topThree.map(([skillKey, skillValue]) => (
          <div key={skillKey} className="flex justify-between mb-1">
            <span className="capitalize text-gray-200">
              {skillKey.replace(/_/g, ' ')}
            </span>
            <span className="text-emerald-400 font-semibold">
              {skillValue}/10
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default InsightsSection;


File: src\components\InstallPrompt.jsx
================================================================================

// src/components/InstallPrompt.jsx
import React, { useState, useEffect } from 'react';

export function InstallPrompt() {
  const [installPrompt, setInstallPrompt] = useState(null);
  const [debugInfo, setDebugInfo] = useState({ 
    isStandalone: false, 
    hasShownPrompt: false,
    promptEventReceived: false 
  });

  useEffect(() => {
    console.log('[InstallPrompt] Component mounted');

    // Check if running in standalone mode
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches 
      || window.navigator.standalone 
      || document.referrer.includes('android-app://');
      
    console.log('[InstallPrompt] Is standalone:', isStandalone);

    const hasShownPrompt = localStorage.getItem('installPromptShown');
    console.log('[InstallPrompt] Previously shown:', hasShownPrompt);

    setDebugInfo(prev => ({
      ...prev,
      isStandalone,
      hasShownPrompt: !!hasShownPrompt
    }));

    // Handle the beforeinstallprompt event
    const handleBeforeInstallPrompt = (e) => {
      console.log('[InstallPrompt] beforeinstallprompt event fired', e);
      e.preventDefault();
      setInstallPrompt(e);
      setDebugInfo(prev => ({ ...prev, promptEventReceived: true }));
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);

    // Listen for appinstalled event
    const handleAppInstalled = (e) => {
      console.log('[InstallPrompt] App was installed', e);
      localStorage.setItem('installPromptShown', 'true');
      setInstallPrompt(null);
    };

    window.addEventListener('appinstalled', handleAppInstalled);
    
    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, []);

  // Log state changes
  useEffect(() => {
    console.log('[InstallPrompt] State updated:', {
      hasPrompt: !!installPrompt,
      debugInfo
    });
  }, [installPrompt, debugInfo]);

  const handleInstall = async () => {
    if (!installPrompt) {
      console.log('[InstallPrompt] No install prompt available');
      return;
    }

    try {
      console.log('[InstallPrompt] Triggering install prompt');
      installPrompt.prompt();
      const result = await installPrompt.userChoice;
      console.log('[InstallPrompt] Install prompt result:', result);
      if (result.outcome === 'accepted') {
        console.log('[InstallPrompt] User accepted the install prompt');
      } else {
        console.log('[InstallPrompt] User dismissed the install prompt');
      }
      setInstallPrompt(null);
      localStorage.setItem('installPromptShown', 'true');
    } catch (error) {
      console.error('[InstallPrompt] Error installing app:', error);
    }
  };

  const handleDismiss = () => {
    console.log('[InstallPrompt] Prompt dismissed');
    setInstallPrompt(null);
    localStorage.setItem('installPromptShown', 'true');
  };

  // Early return conditions
  if (debugInfo.isStandalone) {
    console.log('[InstallPrompt] App is installed, not showing prompt');
    return null;
  }

  if (debugInfo.hasShownPrompt) {
    console.log('[InstallPrompt] Install prompt has already been shown');
    return null;
  }

  if (!installPrompt) {
    console.log('[InstallPrompt] No prompt available, not showing UI');
    return null;
  }

  return (
    <div className="fixed bottom-4 left-4 right-4 md:left-auto md:right-4 md:w-96 bg-gray-800 p-4 rounded-lg shadow-lg z-50 border border-gray-700">
      <div className="flex flex-col space-y-3">
        <div>
          <h3 className="text-gray-100 font-medium">Install Performance Tracker</h3>
          <p className="text-gray-400 text-sm mt-1">
            Install our app for the best experience and offline access
          </p>
        </div>

        <div className="flex justify-end space-x-3">
          <button
            onClick={handleDismiss}
            className="px-4 py-2 text-sm text-gray-300 hover:text-white transition-colors"
          >
            Not now
          </button>
          <button
            onClick={handleInstall}
            className="px-4 py-2 text-sm bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg transition-colors"
          >
            Install
          </button>
        </div>
      </div>
    </div>
  );
}


File: src\components\LoadingState.jsx
================================================================================

// src/components/LoadingState.jsx
export function LoadingState() {
  return (
    <div className="min-h-screen w-full">
      {/* Background placeholder */}
      <div 
        className="absolute inset-0 bg-gradient-to-b from-gray-800 to-gray-900 animate-pulse"
        style={{
          backgroundSize: 'cover',
          backgroundPosition: 'center',
        }}
      />
      
      {/* Loading spinner overlay */}
      <div className="relative z-10 flex items-center justify-center min-h-screen">
        <div className="flex flex-col items-center gap-4">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-emerald-500" />
          <div className="text-gray-300 text-sm animate-pulse">
            Loading...
          </div>
        </div>
      </div>
    </div>
  );
}

File: src\components\MiniRadial.jsx
================================================================================

// src/components/MiniRadial.jsx

import React from 'react';

// The ring color can be a gradient or solid color for the "filled" portion
// We'll do a conic gradient from 0 to (score/10)*360 degrees.

function MiniRadial({ score, icon, isActive }) {
  // Score out of 10. If your scale is different, adjust accordingly.
  const percentage = (score / 10) * 100; // 0 to 100
  const deg = (360 * percentage) / 100;  // 0 to 360

  // Active ring color vs. inactive ring color
  const ringColorActive = "rgba(16,185,129,1)";  // emerald-500
  const ringColorInactive = "rgba(107,114,128,1)"; // gray-500

  // Decide color: if isActive is true, use emerald-500, else maybe a duller color
  const ringColor = isActive ? ringColorActive : ringColorInactive;

  // Construct the conic gradient
  const ringStyle = {
    background: `
      conic-gradient(
        ${ringColor} 0deg,
        ${ringColor} ${deg}deg,
        rgba(75,85,99,0.2) ${deg}deg,
        rgba(75,85,99,0.2) 360deg
      )
    `,
  };

  return (
    <div className="relative w-12 h-12">
      {/* Outer ring */}
      <div
        className="w-12 h-12 rounded-full"
        style={ringStyle}
      ></div>

      {/* Inner circle (white or gray background) */}
      <div className="absolute top-[4px] left-[4px] w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center">
        {icon}
      </div>
    </div>
  );
}

export default MiniRadial;


File: src\components\OffensiveSection.jsx
================================================================================

// src/components/OffensiveSection.jsx

import React, { useState } from 'react';
import Tabs from './Tabs';
import CategorySection from './CategorySection';
import ThrowingSection from './ThrowingSection'; // NEW import

function OffensiveSection({ offensiveData, player }) {
  const [activeSubTab, setActiveSubTab] = useState('cutting');

  const subTabs = [
    { value: 'cutting', label: 'Cutting' },
    { value: 'handling', label: 'Handling' },
    { value: 'throwing', label: 'Throwing' },
  ];

  return (
    <div className="mb-6">
      {/* Offensive Sub-Tabs */}
      <Tabs
        tabs={subTabs}
        activeTab={activeSubTab}
        onChange={setActiveSubTab}
      />

      {activeSubTab === 'cutting' && (
        <CategorySection
          title="Cutting Skills"
          skills={offensiveData.cutting}
          player={player}
        />
      )}

      {activeSubTab === 'handling' && (
        <CategorySection
          title="Handling Skills"
          skills={offensiveData.handling}
          player={player}
        />
      )}

      {/* NEW: If sub-tab is throwing, render ThrowingSection */}
      {activeSubTab === 'throwing' && (
        <ThrowingSection
          throwingData={offensiveData.throwing}
          player={player}
        />
      )}
    </div>
  );
}

export default OffensiveSection;


File: src\components\OptimizedBackground.jsx
================================================================================

import React, { useState, useEffect } from 'react';

const OptimizedBackground = () => {
  const [loaded, setLoaded] = useState(false);

  useEffect(() => {
    // Preload the next larger image size after component mounts
    const preloadLargerImage = new Image();
    preloadLargerImage.src = '/images/background-lg.webp';
  }, []);

  return (
    <>
      {/* Placeholder while image loads */}
      <div 
        className={`absolute inset-0 bg-gradient-to-b from-gray-800 to-gray-900 transition-opacity duration-500 ${
          loaded ? 'opacity-0' : 'opacity-100'
        }`}
      />

      <picture>
        {/* Desktop WebP variants */}
        <source
          srcSet="/images/background-lg.webp 1920w,
                  /images/background-md.webp 1280w,
                  /images/background-sm.webp 640w"
          sizes="(min-width: 1536px) 1920px,
                 (min-width: 1024px) 1280px,
                 (min-width: 768px) 960px,
                 640px"
          type="image/webp"
          media="(min-width: 768px)"
        />

        {/* Mobile WebP variants */}
        <source
          srcSet="/images/background-mobileLg.webp 1280w,
                  /images/background-mobileMd.webp 960w,
                  /images/background-mobileSm.webp 640w"
          sizes="(min-width: 640px) 960px,
                 640px"
          type="image/webp"
          media="(max-width: 767px)"
        />

        {/* Desktop JPEG fallback */}
        <source
          srcSet="/images/background-lg.jpg 1920w,
                  /images/background-md.jpg 1280w,
                  /images/background-sm.jpg 640w"
          sizes="(min-width: 1536px) 1920px,
                 (min-width: 1024px) 1280px,
                 (min-width: 768px) 960px,
                 640px"
          type="image/jpeg"
          media="(min-width: 768px)"
        />

        {/* Mobile JPEG fallback */}
        <source
          srcSet="/images/background-mobileLg.jpg 1280w,
                  /images/background-mobileMd.jpg 960w,
                  /images/background-mobileSm.jpg 640w"
          sizes="(min-width: 640px) 960px,
                 640px"
          type="image/jpeg"
          media="(max-width: 767px)"
        />

        <img
          src="/images/background-sm.jpg"
          alt="Background"
          className={`absolute inset-0 w-full h-full object-cover opacity-60 transition-opacity duration-500 ${
            loaded ? 'opacity-60' : 'opacity-0'
          }`}
          loading="eager"
          fetchPriority="high"
          width="1920"
          height="1080"
          onLoad={() => setLoaded(true)}
          style={{
            backgroundImage: `url('/images/background-placeholder.webp')`,
            backgroundSize: 'cover',
            backgroundPosition: 'center',
          }}
        />
      </picture>

      {/* Preload tags for critical images */}
      <link
        rel="preload"
        as="image"
        href="/images/background-sm.webp"
        type="image/webp"
        media="(max-width: 767px)"
        fetchpriority="high"
      />
      <link
        rel="preload"
        as="image"
        href="/images/background-md.webp"
        type="image/webp"
        media="(min-width: 768px)"
        fetchpriority="high"
      />
    </>
  );
};

export default OptimizedBackground;

File: src\components\OverallScoreRing.jsx
================================================================================

// src/components/OverallScoreRing.jsx

import React from 'react';
import { Doughnut } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

const OverallScoreRing = ({ overallScore }) => {
  const score = parseFloat(overallScore);
  const maxScore = 10; // Adjust if your scale differs

  const data = {
    labels: ['Score', 'Remaining'],
    datasets: [
      {
        data: [score, maxScore - score],
        backgroundColor: ['#10b981', '#374151'], // emerald-500 & gray-700
        borderWidth: 0,
      },
    ],
  };

  const options = {
    cutout: '80%',
    plugins: {
      legend: { display: false },
      tooltip: { enabled: false },
    },
  };

  return (
    <div className="relative w-24 h-24 md:w-32 md:h-32 lg:w-40 lg:h-40">
      <Doughnut data={data} options={options} />
      {/* Centered Score Text */}
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-lg md:text-xl font-bold text-emerald-400">
          {overallScore}
        </span>
        <span className="text-xs md:text-sm text-gray-300">/10</span>
      </div>
    </div>
  );
};

export default OverallScoreRing;


File: src\components\ProfileHeader.jsx
================================================================================

import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import OverallScoreRing from './OverallScoreRing';
import backgroundImage from '../assets/background.jpg';
import OptimizedBackground from './OptimizedBackground';

const ProfileHeader = ({ 
  name, 
  email, 
  overallScore, 
  athletes, 
  selectedAthleteId, 
  onSelectAthlete,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);
  const navigate = useNavigate();

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const selectedAthlete = athletes?.find(a => a.id === selectedAthleteId);

  if (!selectedAthlete) {
    return (
      <div className="flex items-center justify-center h-56 bg-gray-800 rounded-lg">
        <p className="text-gray-300">Loading athlete data...</p>
      </div>
    );
  }

  const menuVariants = {
    closed: {
      opacity: 0,
      scaleY: 0,
      transition: { duration: 0.2 }
    },
    open: {
      opacity: 1,
      scaleY: 1,
      transition: { duration: 0.2 }
    }
  };

  const handleAthleteSelect = (athlete) => {
    onSelectAthlete(athlete.id);
    navigate(`/?id=${athlete.id}&name=${encodeURIComponent(athlete.metadata.name)}`);
    setIsOpen(false);
  };

  return (
    <div className="relative w-full h-56 md:h-64 lg:h-72 bg-gray-800 rounded-lg">
      {/* Background Image */}
      <OptimizedBackground />
      <div className="absolute inset-0 bg-black bg-opacity-40" />

      {/* Content */}
      <div className="relative z-10 flex flex-col items-center justify-center h-full px-4">
        <div className="text-center">
          <h1 className="text-2xl md:text-3xl font-semibold text-white">{name}</h1>
          <p className="text-sm md:text-base text-gray-300 mt-1">{email}</p>
        </div>
        <div className="mt-4">
          <OverallScoreRing overallScore={overallScore} />
        </div>
      </div>

      {/* Dropdown Container - Portal the dropdown menu */}
      <div 
        ref={dropdownRef} 
        className="absolute top-4 right-4 md:top-6 md:right-6"
        style={{ zIndex: 9999 }}
      >
        
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="flex items-center justify-center w-10 h-10 rounded-full 
                   bg-gray-800/50 backdrop-blur-sm hover:bg-gray-700 
                   transition-colors duration-200 focus:outline-none 
                   focus:ring-2 focus:ring-emerald-500 focus:ring-opacity-50"
          aria-expanded={isOpen}
          aria-haspopup="listbox"
          aria-controls="athlete-listbox"
        >
          <motion.div
            animate={{ rotate: isOpen ? 180 : 0 }}
            transition={{ duration: 0.2 }}
          >
            <ChevronDown className="w-5 h-5 text-white" />
          </motion.div>
        </button>

        <AnimatePresence>
          {isOpen && (
            <motion.div
              initial="closed"
              animate="open"
              exit="closed"
              variants={menuVariants}
              className="absolute right-0 mt-2 w-64 bg-gray-800 rounded-lg shadow-lg 
                       ring-1 ring-black ring-opacity-5 max-h-[calc(100vh-120px)]"
              style={{ 
                zIndex: 9999,
                transformOrigin: "top",
                top: "calc(100% + 0.5rem)" // Position directly below button
              }}
            >
              <ul
                id="athlete-listbox"
                role="listbox"
                aria-label="Select athlete"
                className="divide-y divide-gray-700 overflow-y-auto"
              >
                {athletes.map((athlete) => (
                  <li key={athlete.id} role="option" aria-selected={athlete.id === selectedAthleteId}>
                    <button
                      onClick={() => handleAthleteSelect(athlete)}
                      className={`w-full text-left px-4 py-3 text-sm ${
                        athlete.id === selectedAthleteId
                          ? 'bg-gray-700 text-white'
                          : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                      }`}
                    >
                      {athlete.metadata.name}
                    </button>
                  </li>
                ))}
              </ul>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default ProfileHeader;

File: src\components\RadarChart.jsx
================================================================================

// src/components/RadarChart.jsx

import React from 'react';
import { Radar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend
);

/**
 * RadarChart Component
 * @param {Object} props - Component props
 * @param {Array} props.labels - Labels for the radar chart axes
 * @param {Array} props.dataValues - Data values for each axis
 * @param {Function} props.onDataPointClick - Callback when a data point is clicked
 */
const RadarChart = ({ labels, dataValues, onDataPointClick }) => {
  const data = {
    labels,
    datasets: [
      {
        label: 'Category Scores',
        data: dataValues,
        backgroundColor: 'rgba(16, 185, 129, 0.2)',
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 2,
        pointBackgroundColor: 'rgba(16, 185, 129, 1)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(16, 185, 129, 1)',
        pointRadius: 3, // Reduced from 5 to 3
        pointHoverRadius: 7, // Kept or adjusted as needed
        pointHitRadius: 10, // Maintained for consistent touch area
      },
    ],
  };

  const options = {
    responsive: true,
    maintainAspectRatio: false, // Allows the chart to fill the container
    scales: {
      r: {
        beginAtZero: true,
        max: 10,
        ticks: {
          stepSize: 2,
          display: false,
          backdropColor: 'transparent',
        },
        grid: {
          color: '#4b5563',
          lineWidth: 1,
        },
        angleLines: {
          color: '#4b5563',
          lineWidth: 1,
        },
        pointLabels: {
          color: '#e2e8f0',
          font: {
            size: 11,
            family: 'Inter',
          },
          padding: 8,
        },
      },
    },
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        enabled: true,
        backgroundColor: 'rgba(17, 24, 39, 0.95)',
        padding: 8,
        titleFont: {
          size: 12,
          family: 'Inter',
        },
        bodyFont: {
          size: 11,
          family: 'Inter',
        },
        displayColors: false,
        callbacks: {
          title: (items) => labels[items[0].dataIndex],
          label: (item) => `${item.formattedValue}/10`,
        },
      },
    },
    onClick: (event, elements) => {
      if (elements.length > 0 && onDataPointClick) {
        const { index, datasetIndex } = elements[0];
        const label = labels[index];
        const value = dataValues[index];
        onDataPointClick({ label, value, index, datasetIndex });
      }
    },
    // Optional: Change cursor to pointer on hover
    onHover: (event, elements) => {
      const target = event.native.target;
      if (elements.length > 0) {
        target.style.cursor = 'pointer';
      } else {
        target.style.cursor = 'default';
      }
    },
  };

  return (
    <div className="w-full h-full">
      <Radar data={data} options={options} />
    </div>
  );
};

export default RadarChart;


File: src\components\RadialTabs.jsx
================================================================================

// src/components/RadialTabs.jsx

import React from 'react';
import { motion } from 'framer-motion';
import { Home, Brain, Shield, Sword, Activity } from 'lucide-react';

// Utility to merge class names conditionally
const cn = (...classes) => classes.filter(Boolean).join(' ');

// Circular progress component with an icon in the center
const RadialProgress = ({ value = 0, isActive, children }) => {
  const percentage = Math.min(Math.max((value / 10) * 100, 0), 100);
  
  return (
    <div className="relative w-16 h-16">
      {/* Background Circle */}
      <div className="absolute inset-0 rounded-full bg-gray-800" />
      
      {/* Progress Circle */}
      <svg className="absolute inset-0 w-full h-full -rotate-90">
        <circle
          cx="32"
          cy="32"
          r="28"
          strokeWidth="3"
          fill="none"
          className="stroke-gray-700"
        />
        <circle
          cx="32"
          cy="32"
          r="28"
          strokeWidth="3"
          fill="none"
          strokeDasharray={`${percentage * 1.76} 176`}
          className={cn(
            "transition-all duration-300",
            isActive ? "stroke-emerald-500" : "stroke-gray-600"
          )}
        />
      </svg>
      
      {/* Icon */}
      <div className="absolute inset-0 flex items-center justify-center">
        <div className={cn(
          "p-3 rounded-full transition-colors",
          isActive ? "bg-emerald-500 text-white" : "bg-gray-700 text-gray-300"
        )}>
          {children}
        </div>
      </div>
    </div>
  );
};

// Each radial tab button
const TabButton = ({ isActive, onClick, icon, label, score = 0 }) => {
  return (
    <motion.button
      onClick={onClick}
      className="flex flex-col items-center space-y-2 group"
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.95 }}
    >
      <RadialProgress value={score} isActive={isActive}>
        {icon}
      </RadialProgress>
      
      <span className={cn(
        "text-xs font-medium transition-colors",
        isActive ? "text-emerald-400" : "text-gray-400 group-hover:text-gray-300"
      )}>
        {label}
      </span>
    </motion.button>
  );
};

// Radial Tabs Navigation Component
const RadialTabs = ({ activeTab = 'home', onChangeTab = () => {}, averages = {} }) => {
  // Safely get the score for each tab
  const getScore = (key) => (averages && typeof averages[key] === 'number') ? averages[key] : 0;

  // Tabs Configuration
  const TABS = [
    { value: 'home', label: 'Overview', icon: <Home className="w-5 h-5" />, score: getScore('home') },
    { value: 'physical', label: 'Physical', icon: <Activity className="w-5 h-5" />, score: getScore('physical') },
    { value: 'offensive', label: 'Offensive', icon: <Sword className="w-5 h-5" />, score: getScore('offensive') },
    { value: 'defensive', label: 'Defensive', icon: <Shield className="w-5 h-5" />, score: getScore('defensive') },
    { value: 'mental', label: 'Mental', icon: <Brain className="w-5 h-5" />, score: getScore('mental') },
  ];

  return (
    <div className="relative">
      {/* Navigation Background */}
      <div className="absolute inset-0 bg-gradient-to-b from-gray-900 to-gray-800" />
      
      {/* Navigation Buttons */}
      <div className="relative px-6 py-4">
        <div className="flex items-center justify-between max-w-4xl mx-auto">
          {TABS.map((tab) => (
            <TabButton
              key={tab.value}
              isActive={activeTab === tab.value}
              onClick={() => onChangeTab(tab.value)}
              icon={tab.icon}
              label={tab.label}
              score={tab.score}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default RadialTabs;


File: src\components\RatingBar.jsx
================================================================================

// src/components/RatingBar.jsx

import React from 'react';

const RatingBar = ({ value, max = 10 }) => {
  const percentage = (value / max) * 100;
  return (
    <div className="w-full bg-gray-700 rounded-full h-2.5 overflow-hidden">
      <div
        className="h-2.5 bg-emerald-500 transition-all duration-300"
        style={{ width: `${percentage}%` }}
      ></div>
    </div>
  );
};

export default RatingBar;


File: src\components\RingChart.jsx
================================================================================

// src/components/RingChart.jsx

import React from 'react';

const RingChart = ({ label, value }) => {
  const percentage = (value / 10) * 100;

  return (
    <div className="relative w-32 h-32">
      <svg className="w-full h-full" viewBox="0 0 36 36">
        <circle
          className="text-gray-700"
          strokeWidth="3.8"
          stroke="currentColor"
          fill="transparent"
          r="16"
          cx="18"
          cy="18"
        />
        <circle
          className="text-emerald-400"
          strokeWidth="3.8"
          strokeDasharray={`${percentage}, 100`}
          stroke="currentColor"
          fill="transparent"
          r="16"
          cx="18"
          cy="18"
          strokeLinecap="round"
        />
      </svg>
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-lg font-semibold text-gray-100">{value}/10</span>
        <span className="text-sm text-gray-400">{label}</span>
      </div>
    </div>
  );
};

export default RingChart;


File: src\components\RoadmapModal.jsx
================================================================================

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, Trophy, Target, Calendar, 
  Dumbbell, Wind, Users, CheckCircle2
} from 'lucide-react';

const ActionTarget = ({ icon: Icon, title, frequency, progress, total, tags }) => (
  <div className="bg-gray-700/50 rounded-lg p-4 space-y-2">
    <div className="flex items-start gap-3">
      <div className="mt-1">
        <Icon className="w-5 h-5 text-emerald-400" />
      </div>
      <div className="flex-1">
        <h4 className="font-medium text-gray-200">{title}</h4>
        <p className="text-sm text-gray-400">{frequency}</p>
        
        {/* Progress Section */}
        <div className="mt-2">
          <div className="flex justify-between text-xs text-gray-400 mb-1">
            <span>Progress</span>
            <span>{progress} / {total}</span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-1.5">
            <div 
              className="bg-emerald-400 h-1.5 rounded-full transition-all duration-300"
              style={{ width: `${(progress / total) * 100}%` }}
            />
          </div>
        </div>

        {/* Tags */}
        <div className="mt-2 flex flex-wrap gap-2">
          {tags.map((tag, index) => (
            <span 
              key={index}
              className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-700 text-emerald-400"
            >
              {tag}
            </span>
          ))}
        </div>
      </div>

      {/* Completion Status */}
      {progress >= total && (
        <CheckCircle2 className="w-5 h-5 text-emerald-400 flex-shrink-0" />
      )}
    </div>
  </div>
);

const RoadmapModal = ({ isOpen, onClose, player }) => (
  <AnimatePresence>
    {isOpen && (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
      >
        <motion.div
          initial={{ y: '100%' }}
          animate={{ y: 0 }}
          exit={{ y: '100%' }}
          transition={{ type: 'spring', damping: 25 }}
          className="absolute bottom-0 left-0 right-0 bg-gray-900 rounded-t-2xl max-h-[90vh] overflow-auto"
        >
          {/* Header */}
          <div className="sticky top-0 bg-gray-900/95 backdrop-blur-sm p-4 border-b border-gray-800 flex items-center justify-between">
            <h2 className="text-lg font-semibold text-white">Development Roadmap</h2>
            <button
              onClick={onClose}
              className="p-1 rounded-lg hover:bg-gray-800"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Content */}
          <div className="p-4 space-y-6">
            {/* Weekly Action Targets */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Calendar className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">THIS WEEK'S TARGETS</h3>
              </div>
              <div className="space-y-3">
                <ActionTarget 
                  icon={Dumbbell}
                  title="Endurance Training"
                  frequency="3 sessions per week"
                  progress={2}
                  total={3}
                  tags={['Sprints', 'Distance Running', 'HIIT']}
                />
                
                <ActionTarget 
                  icon={Wind}
                  title="Focused Throwing Practice"
                  frequency="3 hours per week"
                  progress={1.5}
                  total={3}
                  tags={['Breaking the Mark', 'Release Points', 'Quick Release']}
                />

                <ActionTarget 
                  icon={Users}
                  title="Joint Training Session"
                  frequency="1 session this week"
                  progress={0}
                  total={1}
                  tags={['Handler Movement', 'Field Vision', 'Team Dynamics']}
                />
              </div>
            </section>

            {/* Monthly Goals */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Target className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">MONTHLY GOALS</h3>
              </div>
              <div className="bg-gray-800 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <span className="w-2 h-2 rounded-full bg-emerald-400 mt-2" />
                  <div>
                    <h4 className="font-medium text-gray-200">Master New Throws</h4>
                    <p className="text-sm text-gray-400">Focus on specialty throws and situations</p>
                    <div className="mt-2">
                      <div className="flex justify-between text-xs text-gray-400 mb-1">
                        <span>Progress</span>
                        <span>60%</span>
                      </div>
                      <div className="w-full bg-gray-700 rounded-full h-1.5">
                        <div className="bg-emerald-400 h-1.5 rounded-full w-3/5" />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>

            {/* Development Path */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Trophy className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">DEVELOPMENT PATH</h3>
              </div>
              <div className="bg-gray-800 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <span className="w-2 h-2 rounded-full bg-emerald-400 mt-2" />
                  <div>
                    <h4 className="font-medium text-gray-200">Handler Certification</h4>
                    <p className="text-sm text-gray-400">Complete advanced handler training program</p>
                  </div>
                </div>
              </div>
            </section>
          </div>

          {/* Action Buttons */}
          <div className="sticky bottom-0 bg-gray-900/95 backdrop-blur-sm p-4 border-t border-gray-800">
            <div className="flex gap-3">
              <button className="flex-1 bg-gray-800 text-white py-3 rounded-lg font-medium">
                Log Progress
              </button>
              <button className="flex-1 bg-emerald-500 text-white py-3 rounded-lg font-medium">
                Complete Target
              </button>
            </div>
          </div>
        </motion.div>
      </motion.div>
    )}
  </AnimatePresence>
);

export default RoadmapModal;

File: src\components\SkillCard.jsx
================================================================================

// src/components/SkillCard.jsx

import React from 'react';
import RatingBar from './RatingBar';

const SkillCard = ({ label, value }) => {
  return (
    <div className="flex items-center bg-gray-800 rounded-lg p-3 shadow-sm">
      <div className="flex-1">
        <div className="text-sm font-medium text-gray-100 mb-1">
          {label}
        </div>
        <RatingBar value={value} />
      </div>
      <div className="ml-4 text-emerald-400 font-bold text-lg">
        {value}
      </div>
    </div>
  );
};

export default SkillCard;


File: src\components\SkillHierarchy.jsx
================================================================================

// src/components/SkillHierarchy.jsx
import React from 'react';
import { ChevronRight } from 'lucide-react';
import { averageOfKeys, computeCategoryAverages, computeOverallScore } from '../utils/helpers';

const SkillBar = ({ value, maxValue = 10 }) => (
  <div className="w-24 bg-gray-700 rounded-full h-1.5 overflow-hidden">
    <div
      className="h-1.5 bg-emerald-500 transition-all duration-300"
      style={{ width: `${(value / maxValue) * 100}%` }}
    />
  </div>
);

const SkillNode = ({ label, value, depth = 0, children }) => {
  const hasChildren = React.Children.count(children) > 0;
  
  return (
    <div className="space-y-2">
      <div className={`flex items-center gap-3 ${hasChildren ? 'mb-2' : ''}`}>
        {depth > 0 && (
          <div className="flex items-center">
            <div 
              className="w-4 h-px bg-gray-700"
              style={{ marginLeft: `${(depth - 1) * 16}px` }}
            />
            <ChevronRight className="w-4 h-4 text-gray-600" />
          </div>
        )}
        
        <div className="flex-1 flex items-center justify-between">
          <span className="text-sm font-medium text-gray-300">{label}</span>
          <div className="flex items-center gap-3">
            <SkillBar value={value} />
            <span className="text-sm font-semibold text-emerald-400 w-8">
              {value.toFixed(1)}
            </span>
          </div>
        </div>
      </div>
      
      {hasChildren && (
        <div className="space-y-2">
          {children}
        </div>
      )}
    </div>
  );
};

const SkillHierarchy = ({ player }) => {
  // Get all category averages using helper function
  const categoryAverages = computeCategoryAverages(player);
  const overallScore = computeOverallScore(player);

  // Compute throwing subcategory averages (not included in helpers)
  const throwingSubcategories = {
    backhand: [
      'backhand_power', 'backhand_accuracy', 'backhand_quick_release',
      'backhand_release_variations', 'backhand_against_wind',
      'backhand_against_difficult_marks', 'backhand_tempo_control'
    ],
    forehand: [
      'forehand_power', 'forehand_accuracy', 'forehand_quick_release',
      'forehand_release_variations', 'forehand_against_wind',
      'forehand_against_difficult_marks', 'forehand_tempo_control'
    ],
    specialty: [
      'specialty_power', 'specialty_accuracy', 'specialty_quick_release',
      'specialty_release_variations', 'specialty_against_wind',
      'specialty_against_difficult_marks', 'specialty_tempo_control'
    ],
    hucking: [
      'hucking_confidence', 'hucking_shape_control',
      'hucking_tempo_control', 'hucking_placement'
    ]
  };

  const throwingAverages = {
    backhand: averageOfKeys(player, throwingSubcategories.backhand),
    forehand: averageOfKeys(player, throwingSubcategories.forehand),
    specialty: averageOfKeys(player, throwingSubcategories.specialty),
    hucking: averageOfKeys(player, throwingSubcategories.hucking)
  };

  return (
    <div className="space-y-4">
      <SkillNode label="Overall" value={overallScore}>
        <SkillNode label="Physical" value={categoryAverages.physical} depth={1} />
        <SkillNode label="Mental" value={categoryAverages.mental} depth={1} />
        <SkillNode label="Defensive" value={categoryAverages.defensive} depth={1} />
        <SkillNode label="Offensive" value={categoryAverages.offensive} depth={1}>
          <SkillNode label="Cutting" value={categoryAverages.cutting} depth={2} />
          <SkillNode label="Handling" value={categoryAverages.handling} depth={2} />
          <SkillNode label="Throwing" value={categoryAverages.throwing} depth={2}>
            <SkillNode label="Backhand" value={throwingAverages.backhand} depth={3} />
            <SkillNode label="Forehand" value={throwingAverages.forehand} depth={3} />
            <SkillNode label="Specialty" value={throwingAverages.specialty} depth={3} />
            <SkillNode label="Hucking" value={throwingAverages.hucking} depth={3} />
          </SkillNode>
        </SkillNode>
      </SkillNode>
    </div>
  );
};

export default SkillHierarchy;

File: src\components\SwipeableInsights.jsx
================================================================================

import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence, useAnimation } from 'framer-motion';

const SWIPE_THRESHOLD = 30;
const VELOCITY_THRESHOLD = 200;

const InsightsCard = ({ title, data = [], subtitle }) => (
  <div className="bg-gray-800 p-4 rounded-lg shadow-md w-full">
    <div className="text-gray-300 text-xs font-bold uppercase tracking-widest mb-2">
      <span className="font-semibold text-emerald-400">{title}</span>
      {subtitle && (
        <span className="block text-gray-400 text-xs mt-1 normal-case">
          {subtitle}
        </span>
      )}
    </div>
    {data.map(([skillKey, skillValue], index) => (
      <div key={`${skillKey}-${index}`} className="flex justify-between mb-1">
        <span className="capitalize text-gray-200">
          {skillKey.replace(/_/g, ' ')}
        </span>
        <span className="text-emerald-400 font-semibold">
          {typeof skillValue === 'number' ? `${skillValue}/10` : 'N/A'}
        </span>
      </div>
    ))}
  </div>
);

const SwipeableInsights = ({ player, growthTargets = [] }) => {

    const [currentIndex, setCurrentIndex] = useState(0);
    const [isDragging, setIsDragging] = useState(false);
    const controls = useAnimation();
    const [containerWidth, setContainerWidth] = useState(0);
    const containerRef = useRef(null);
  
    const growthTargetPairs = growthTargets
    .map(targetKey => [
      targetKey.replace(/_/g, ' '),  
      player.skills[targetKey] || 0  // Access skills through player.skills
    ])
    .filter(([_, value]) => typeof value === 'number'); 
  
    useEffect(() => {
      const updateWidth = () => {
        if (containerRef.current) {
          setContainerWidth(containerRef.current.offsetWidth);
        }
      };
      
      updateWidth();
      const resizeObserver = new ResizeObserver(updateWidth);
      
      if (containerRef.current) {
        resizeObserver.observe(containerRef.current);
      }
      
      return () => resizeObserver.disconnect();
    }, []);
  
    const getSortedSkills = () => {
        // Change to access player.skills instead of player directly
        const skillEntries = Object.entries(player.skills)
          .filter(([key, val]) => typeof val === 'number' && !key.includes('id'))
          .sort((a, b) => b[1] - a[1]);
        return skillEntries;
      };
  
    // Call getSortedSkills once and store result
    const sortedSkills = getSortedSkills();
  
    const cards = [
      {
        title: 'Current Growth Targets',
        data: growthTargetPairs,
        subtitle: growthTargetPairs.length === 0 ? 'No growth targets set' : null
      },
      {
        title: 'Top 3 Strengths',
        data: sortedSkills.slice(0, 3)
      },
      {
        title: 'Areas for Improvement',
        data: [...sortedSkills].reverse().slice(0, 3)
      }
    ];

  const snapToIndex = (index) => {
    controls.start({
      x: -index * containerWidth,
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 40,
        mass: 0.8,
        restSpeed: 0.5,
        restDelta: 0.5
      }
    }).then(() => {
      setIsDragging(false);
    });
  };

  const handleDragStart = () => {
    setIsDragging(true);
  };

  const handleDragEnd = (event, info) => {
    const swipe = info.offset.x;
    const velocity = info.velocity.x;
    
    const shouldSwipe = Math.abs(swipe) > SWIPE_THRESHOLD || Math.abs(velocity) > VELOCITY_THRESHOLD;
    
    if (shouldSwipe) {
      const direction = swipe > 0 ? -1 : 1;
      const nextIndex = currentIndex + direction;
      
      if (nextIndex >= 0 && nextIndex < cards.length) {
        setCurrentIndex(nextIndex);
        snapToIndex(nextIndex);
      } else {
        snapToIndex(currentIndex);
      }
    } else {
      snapToIndex(currentIndex);
    }
  };

  const handleDotClick = (index) => {
    if (!isDragging) {
      setCurrentIndex(index);
      snapToIndex(index);
    }
  };

  return (
    <div className="mb-6">
      <h2 className="text-xl font-bold uppercase mb-3 text-gray-100">
        Key Insights
      </h2>
      
      <div ref={containerRef} className="relative insights-container overflow-hidden bg-gray-800 rounded-lg shadow-md">
        <AnimatePresence initial={false}>
          <motion.div
            className="flex"
            style={{ width: `${cards.length * 100}%` }}
            drag="x"
            dragConstraints={{
              left: -containerWidth * (cards.length - 1),
              right: 0
            }}
            dragElastic={0.1}
            dragMomentum={false}
            onDragStart={handleDragStart}
            onDragEnd={handleDragEnd}
            animate={controls}
            initial={{ x: 0 }}
          >
            {cards.map((card, index) => (
              <div
                key={`card-${index}`}
                className="flex-shrink-0"
                style={{ width: containerWidth }}
              >
                <InsightsCard 
                  {...card}
                  key={`insight-${index}`} 
                />
              </div>
            ))}
          </motion.div>
        </AnimatePresence>
      </div>

      {/* Navigation Dots */}
      <div className="flex justify-center mt-4 space-x-3">
        {cards.map((_, index) => (
          <button
            key={`dot-${index}`}
            onClick={() => handleDotClick(index)}
            className={`w-2 h-2 rounded-full transition-all duration-200 ${
              index === currentIndex 
                ? 'bg-emerald-400 scale-110' 
                : 'bg-gray-600 hover:bg-gray-500'
            }`}
            disabled={isDragging}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    </div>
  );
};

export default SwipeableInsights;

File: src\components\Tabs.jsx
================================================================================

// src/components/Tabs.jsx

import React from 'react';

const Tabs = ({ tabs, activeTab, onChange }) => {
  return (
    <div className="flex justify-between bg-gray-800 p-1 rounded-lg gap-1 mb-4">
      {tabs.map((tab) => (
        <button
          key={tab.value}
          onClick={() => onChange(tab.value)}
          className={
            "flex-1 py-2 text-sm font-medium rounded-md transition-colors " +
            (activeTab === tab.value
              ? "bg-emerald-500 text-gray-900 shadow"
              : "text-gray-300 hover:bg-gray-700")
          }
        >
          {tab.label}
        </button>
      ))}
    </div>
  );
};

export default Tabs;


File: src\components\ThrowingSection.jsx
================================================================================

// src/components/ThrowingSection.jsx

import React, { useState } from 'react';
import Tabs from './Tabs';
import CategorySection from './CategorySection';

function ThrowingSection({ throwingData, player }) {
  // Sub-sub tab state
  const [activeThrowTab, setActiveThrowTab] = useState('backhand');

  const throwTabs = [
    { value: 'backhand', label: 'Backhand' },
    { value: 'forehand', label: 'Forehand' },
    { value: 'specialty', label: 'Specialty' },
    { value: 'hucking', label: 'Hucking' },
  ];

  return (
    <div className="mb-4">
      {/* Throwing sub-sub tabs */}
      <Tabs
        tabs={throwTabs}
        activeTab={activeThrowTab}
        onChange={setActiveThrowTab}
      />

      {/* Conditionally render the relevant CategorySection */}
      {activeThrowTab === 'backhand' && (
        <CategorySection
          title="Backhand Skills"
          skills={throwingData.backhand}
          player={player}
        />
      )}
      {activeThrowTab === 'forehand' && (
        <CategorySection
          title="Forehand Skills"
          skills={throwingData.forehand}
          player={player}
        />
      )}
      {activeThrowTab === 'specialty' && (
        <CategorySection
          title="Specialty Skills"
          skills={throwingData.specialty}
          player={player}
        />
      )}
        {activeThrowTab === 'hucking' && (
        <CategorySection
          title="Hucking Skills"
          skills={throwingData.hucking}
          player={player}
        />
        )}
    </div>
  );
}

export default ThrowingSection;


File: src\config\firebase.js
================================================================================

// src/config/firebase.js
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";

const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID,
  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID
};

let app = null;
let analytics = null;

export const initializeFirebase = () => {
  if (!app) {
    app = initializeApp(firebaseConfig);
    // Defer analytics initialization
    setTimeout(() => {
      analytics = getAnalytics(app);
    }, 2000);
  }
  return app;
};

export { app };

File: src\contexts\AuthContext.js
================================================================================

// src/contexts/AuthContext.js
import React, { createContext, useContext, useState, useEffect } from 'react';
import { getAuth } from 'firebase/auth';
import { initializeFirebase } from '../config/firebase';

const AuthContext = createContext({});

// Lazy imports for auth methods
const lazyImportAuth = () => import('firebase/auth').then(module => ({
  signInWithEmailAndPassword: module.signInWithEmailAndPassword,
  createUserWithEmailAndPassword: module.createUserWithEmailAndPassword,
  signInWithPopup: module.signInWithPopup,
  GoogleAuthProvider: module.GoogleAuthProvider,
  signOut: module.signOut,
  sendPasswordResetEmail: module.sendPasswordResetEmail
}));

export function useAuth() {
  return useContext(AuthContext);
}

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [auth, setAuth] = useState(null);

  // Initialize Firebase and Auth lazily
  useEffect(() => {
    const initAuth = async () => {
      const app = initializeFirebase();
      const auth = getAuth(app);
      setAuth(auth);
      
      const { onAuthStateChanged } = await import('firebase/auth');
      const unsubscribe = onAuthStateChanged(auth, (user) => {
        setUser(user);
        setLoading(false);
      });

      return unsubscribe;
    };

    initAuth();
  }, []);

  // Lazy auth methods
  const login = async (email, password) => {
    const { signInWithEmailAndPassword } = await lazyImportAuth();
    return signInWithEmailAndPassword(auth, email, password);
  };

  const signup = async (email, password) => {
    const { createUserWithEmailAndPassword } = await lazyImportAuth();
    return createUserWithEmailAndPassword(auth, email, password);
  };

  const loginWithGoogle = async () => {
    const { signInWithPopup, GoogleAuthProvider } = await lazyImportAuth();
    const provider = new GoogleAuthProvider();
    return signInWithPopup(auth, provider);
  };

  const logout = async () => {
    const { signOut } = await lazyImportAuth();
    return signOut(auth);
  };

  const resetPassword = async (email) => {
    const { sendPasswordResetEmail } = await lazyImportAuth();
    return sendPasswordResetEmail(auth, email);
  };

  const value = {
    user,
    login,
    signup,
    loginWithGoogle,
    logout,
    resetPassword
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center mb-8">
          <h2 className="text-2xl font-bold text-white">Welcome back</h2>
          <p className="mt-2 text-gray-400 text-sm">
            Great to see you again! Please enter your details.
          </p>
        </div>
      </div>
    );
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

File: src\Dashboard.jsx
================================================================================

// src/Dashboard.jsx

import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import mockData from './data/mockData';
import ProfileHeader from './components/ProfileHeader';
import CategorySection from './components/CategorySection';
import RadarChart from './components/RadarChart';
import OffensiveSection from './components/OffensiveSection';
import RadialTabs from './components/RadialTabs';
import { computeCategoryAverages, computeOverallScore } from './utils/helpers';
import HomeSection from './components/HomeSection';  // Add this import if not already there
import { SyncManager } from './utils/sync';
import { InstallPrompt } from './components/InstallPrompt';
import RoadmapModal from './components/RoadmapModal';
import FloatingActionButton from './components/FloatingActionButton';


import './index.css';

/* -------------------------------------
   3) MAIN APP
-------------------------------------- */

function Dashboard() {
  const location = useLocation();
  const navigate = useNavigate();
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [syncPending, setSyncPending] = useState(false);
  const [isRoadmapOpen, setRoadmapOpen] = useState(false);

  // 3.1) Manage Selected Athlete
  const [selectedAthleteId, setSelectedAthleteId] = useState(mockData[0].id);

  // 3.2) Automatically select athlete based on URL parameters
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const athleteIdFromUrl = searchParams.get('id');

    if (athleteIdFromUrl) {
        const athleteId = parseInt(athleteIdFromUrl, 10);
        const athleteExists = mockData.some(a => a.id === athleteId);
        if (athleteExists) {
            setSelectedAthleteId(athleteId);
        } else {
            navigate('/', { replace: true });
        }
    } else if (mockData.length > 0) {
        // Default to athlete with id 7 if available
        const defaultAthlete = mockData.find(a => a.id === 7);
        if (defaultAthlete) {
            setSelectedAthleteId(7);
        } else {
            // Fallback to the first athlete if id 7 is not found
            setSelectedAthleteId(mockData[0].id);
        }
    }
}, [location.search, navigate]);


  // Find the selected athlete from mockData
  const selectedAthlete = mockData.find(athlete => athlete.id === selectedAthleteId);
  // 3.4) Group data into categories
  const getCategoryData = (p) => ({
    physical: [
      { key: 'speed_explosiveness', label: 'Speed & Explosiveness' },
      { key: 'endurance', label: 'Endurance' },
      { key: 'vertical_leap', label: 'Vertical Leap' },
      { key: 'change_of_direction', label: 'Change of Direction' },
      { key: 'boxing_out', label: 'Boxing Out' },
      { key: 'laying_out', label: 'Laying Out' },
      { key: 'recovery', label: 'Recovery' },
      { key: 'flexibility_mobility', label: 'Flexibility & Mobility' },
      { key: 'injury_prevention', label: 'Injury Prevention' },
    ],
    offensive: {
      cutting: [
        { key: 'angles', label: 'Angles' },
        { key: 'fakes_footwork', label: 'Fakes & Footwork' },
        { key: 'timing_field_vision', label: 'Timing & Field Vision' },
        { key: 'decisiveness', label: 'Decisiveness' },
        { key: 'catching', label: 'Catching' },
        { key: 'flow_awareness', label: 'Flow Awareness' },
        { key: 'isolation_cutting', label: 'Isolation Cutting' },
        { key: 'continuation_cutting', label: 'Continuation Cutting' },
      ],
      handling: [
        { key: 'handler_movement', label: 'Handler Movement' },
        { key: 'poise_with_disc', label: 'Poise w/ Disc' },
        { key: 'breaking_the_mark', label: 'Breaking the Mark' },
        { key: 'resetting_from_trap_sideline', label: 'Reset from Trap' },
        { key: 'decision_making_vision', label: 'Decision Making & Vision' },
        { key: 'offensive_pattern_recognition', label: 'Pattern Recognition' },
        { key: 'throw_and_go', label: 'Throw & Go' },
      ],
      throwing: {
        backhand: [
          { key: 'backhand_power', label: 'Backhand Power' },
          { key: 'backhand_accuracy', label: 'Backhand Accuracy' },
          { key: 'backhand_quick_release', label: 'Backhand Quick Release' },
          { key: 'backhand_release_variations', label: 'Backhand Variations' },
          { key: 'backhand_against_wind', label: 'Backhand vs Wind' },
          { key: 'backhand_against_difficult_marks', label: 'Backhand vs Difficult Marks' },
          { key: 'backhand_tempo_control', label: 'Backhand Tempo Control' },
        ],
        forehand: [
          { key: 'forehand_power', label: 'Forehand Power' },
          { key: 'forehand_accuracy', label: 'Forehand Accuracy' },
          { key: 'forehand_quick_release', label: 'Forehand Quick Release' },
          { key: 'forehand_release_variations', label: 'Forehand Variations' },
          { key: 'forehand_against_wind', label: 'Forehand vs Wind' },
          { key: 'forehand_against_difficult_marks', label: 'Forehand vs Difficult Marks' },
          { key: 'forehand_tempo_control', label: 'Forehand Tempo Control' },
        ],
        specialty: [
          { key: 'specialty_power', label: 'Specialty Power' },
          { key: 'specialty_accuracy', label: 'Specialty Accuracy' },
          { key: 'specialty_quick_release', label: 'Specialty Quick Release' },
          { key: 'specialty_release_variations', label: 'Specialty Variations' },
          { key: 'specialty_against_wind', label: 'Specialty vs Wind' },
          { key: 'specialty_against_difficult_marks', label: 'Specialty vs Difficult Marks' },
          { key: 'specialty_tempo_control', label: 'Specialty Tempo Control' },
        ],
        hucking: [
          { key: 'hucking_confidence', label: 'Hucking Confidence' },
          { key: 'hucking_shape_control', label: 'Hucking Shape Control' },
          { key: 'hucking_tempo_control', label: 'Hucking Tempo Control' },
          { key: 'hucking_placement', label: 'Hucking Placement' },
        ],
      },
    },
    defensive: [
      { key: 'normal_marking', label: 'Normal Marking' },
      { key: 'sideline_trap_marking', label: 'Sideline Trap Marking' },
      { key: 'downfield_defending', label: 'Downfield Defending' },
      { key: 'handler_defending', label: 'Handler Defending' },
      { key: 'defensive_pattern_recognition', label: 'Pattern Recognition' },
      { key: 'help_defense', label: 'Help Defense' },
      { key: 'switching_on_defense', label: 'Switching on Defense' },
      { key: 'zone_defense', label: 'Zone Defense' },
      { key: 'defensive_mental_fortitude', label: 'Defensive Mental Fortitude' },
    ],
    mental: [
      { key: 'mental_game', label: 'Mental Game' },
      { key: 'feedback_implementation', label: 'Feedback Implementation' },
      { key: 'defensive_strategy', label: 'Defensive Team Strategy' },
      { key: 'offensive_strategy', label: 'Offensive Team Strategy' },
    ],
  });

  // 3.4) We'll keep track of the active tab, default to "home"
  const [activeTab, setActiveTab] = useState('home');

  // 3.5) Precompute the main category averages for radial tab display
  const [averages, setAverages] = useState({});
  useEffect(() => {
    if (selectedAthlete) {
      const newAvg = computeCategoryAverages(selectedAthlete);
      setAverages(newAvg);
    }
  }, [selectedAthlete]);

  // 3.6) Radar example for “Throw Comparison” inside Offensive
  const radarLabels = [
    'Backhand Power',
    'Forehand Power',
    'Specialty Power',
    'Backhand Accuracy',
    'Forehand Accuracy',
    'Specialty Accuracy',
  ];
  const radarDataValues = [
    selectedAthlete.skills.backhand_power,
    selectedAthlete.skills.forehand_power,
    selectedAthlete.skills.specialty_power,
    selectedAthlete.skills.backhand_accuracy,
    selectedAthlete.skills.forehand_accuracy,
    selectedAthlete.skills.specialty_accuracy,
  ];

  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      SyncManager.processSyncQueue();
    };
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  /* -------------------------------------
     RENDER
  -------------------------------------- */
  return (
    
    <div className="min-h-screen bg-gray-900 text-gray-100 flex flex-col">
            {!isOnline && (
        <div className="bg-yellow-600 text-white px-4 py-2 text-center">
          You're offline. Some features may be limited.
        </div>
      )}
      <InstallPrompt />
      {/** 1) Profile Header at the top */}
      <ProfileHeader
        name={selectedAthlete.metadata.name}
        email={selectedAthlete.metadata.email}
        overallScore={
          activeTab === 'home'
            ? computeOverallScore(selectedAthlete)
            : averages[activeTab] || 0
        }
        athletes={mockData}
        selectedAthleteId={selectedAthleteId}
        onSelectAthlete={(id) => setSelectedAthleteId(id)} // Pass a handler
      />

      {/** 3) The radial nav row (icons + radial) for Home, Physical, Offensive, Defensive, Mental */}
      <RadialTabs
        activeTab={activeTab}
        onChangeTab={setActiveTab}
        averages={averages}
      />

      {/** 4) Scrollable content below the radial nav */}
      <div className="flex-1 overflow-auto px-4 pb-8 mt-4">
        {/** HOME (Dashboard) */}
        {activeTab === 'home' && (
          <HomeSection player={selectedAthlete} />
        )}

        {/** PHYSICAL */}
        {activeTab === 'physical' && (
          <CategorySection
            title="Physical Attributes"
            skills={getCategoryData(selectedAthlete).physical}
            player={selectedAthlete.skills}
          />
        )}

        {/** OFFENSIVE */}
        {activeTab === 'offensive' && (
          <>
            <OffensiveSection
              offensiveData={getCategoryData(selectedAthlete).offensive}
              player={selectedAthlete.skills}
            />
            {/* Example: A Throw Comparison Radar Chart */}
            <div className="mt-6">
              <h2 className="text-xl font-semibold mb-2 text-gray-100">
                Throw Comparison
              </h2>
              <RadarChart labels={radarLabels} dataValues={radarDataValues} />
            </div>
          </>
        )}

        {/** DEFENSIVE */}
        {activeTab === 'defensive' && (
          <CategorySection
            title="Defensive Skills"
            skills={getCategoryData(selectedAthlete).defensive}
            player={selectedAthlete.skills}
          />
        )}

        {/** MENTAL */}
        {activeTab === 'mental' && (
          <CategorySection
            title="Mental & Recovery"
            skills={getCategoryData(selectedAthlete).mental}
            player={selectedAthlete.skills}
          />
        )}

        {/* Roadmap Modal */}
        <RoadmapModal 
        isOpen={isRoadmapOpen}
        onClose={() => setRoadmapOpen(false)}
        player={selectedAthlete}
      />
          <FloatingActionButton onClick={() => setRoadmapOpen(true)} />
    
    <RoadmapModal 
      isOpen={isRoadmapOpen}
      onClose={() => setRoadmapOpen(false)}
      player={selectedAthlete}
    />
      </div>
    </div>
  );
}

export default Dashboard;


File: src\data\mockData.js
================================================================================

// src/data/mockData.js

const mockData = [
  {
    id: 1, // Unique identifier for each athlete
    metadata: {
      name: "Chris Doehring",
      email: "doehring@umich.edu",
      ip: "2600:387:15:4510::6",
      user_agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_6_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Mobile/15E148 Safari/604.1",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-09T14:18:32.150Z",
    },
    growth_targets: [
      'change_of_direction',
      'defensive_pattern_recognition',
      'decision_making_vision'
    ],
    skills: {
      speed_explosiveness: 7,
      endurance: 8,
      vertical_leap: 3,
      change_of_direction: 6,
      boxing_out: 6,
      laying_out: 6,
      recovery: 7,
      flexibility_mobility: 5,
      injury_prevention: 7,
      defensive_strategy: 7,
      offensive_strategy: 8,
      mental_game: 9,
      feedback_implementation: 8,
      isolation_cutting: 6,
      continuation_cutting: 8,
      angles: 7,
      fakes_footwork: 5,
      timing_field_vision: 7,
      decisiveness: 7,
      catching: 9,
      zone_offense: 7,
      reading_the_disc: 7,
      normal_marking: 6,
      sideline_trap_marking: 7,
      downfield_defending: 4,
      handler_defending: 7,
      defensive_pattern_recognition: 6,
      help_defense: 6,
      switching_on_defense: 7,
      zone_defense: 7,
      defensive_mental_fortitude: 8,
      handler_movement: 8,
      poise_with_disc: 9,
      breaking_the_mark: 8,
      resetting_from_trap_sideline: 8,
      decision_making_vision: 8,
      flow_awareness: 8,
      throw_and_go: 7,
      offensive_pattern_recognition: 8,
      backhand_power: 8,
      backhand_accuracy: 7,
      backhand_quick_release: 7,
      backhand_release_variations: 7,
      backhand_against_wind: 8,
      backhand_against_difficult_marks: 7,
      backhand_tempo_control: 8,
      forehand_power: 4,
      forehand_accuracy: 5,
      forehand_quick_release: 7,
      forehand_release_variations: 5,
      forehand_against_wind: 4,
      forehand_against_difficult_marks: 9,
      forehand_tempo_control: 7,
      specialty_power: 4,
      specialty_accuracy: 8,
      specialty_quick_release: 7,
      specialty_release_variations: 5,
      specialty_against_wind: 4,
      specialty_against_difficult_marks: 5,
      specialty_tempo_control: 6,
      hucking_confidence: 7,
      hucking_shape_control: 7,
      hucking_tempo_control: 8,
      hucking_placement: 7,
    },
  },
  {
    id: 2,
    metadata: {
      name: "Rachel Graber",
      email: "rachelgraber16@gmail.com",
      ip: "104.36.4.125",
      user_agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 18_1_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.1.1 Mobile/15E148 Safari/605.1.15 (Ecosia ios@10.5.2.2065)",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-09T14:13:29.628Z",
    },
    growth_targets: [
      'defensive_pattern_recognition',
      'breaking_the_mark',
      'hucking_confidence'
    ],
    skills: {
      speed_explosiveness: 7,
      endurance: 7,
      vertical_leap: 4,
      change_of_direction: 8,
      boxing_out: 6,
      laying_out: 7,
      recovery: 8,
      flexibility_mobility: 9,
      injury_prevention: 8,
      defensive_strategy: 8,
      offensive_strategy: 5,
      mental_game: 7,
      feedback_implementation: 8,
      isolation_cutting: 5,
      continuation_cutting: 7,
      angles: 6,
      fakes_footwork: 7,
      timing_field_vision: 7,
      decisiveness: 4,
      catching: 7,
      zone_offense: 6,
      reading_the_disc: 6,
      normal_marking: 7,
      sideline_trap_marking: 7,
      downfield_defending: 7,
      handler_defending: 8,
      defensive_pattern_recognition: 6,
      help_defense: 6,
      switching_on_defense: 6,
      zone_defense: 8,
      defensive_mental_fortitude: 4,
      handler_movement: 6,
      poise_with_disc: 6,
      breaking_the_mark: 4,
      resetting_from_trap_sideline: 6,
      decision_making_vision: 5,
      flow_awareness: 5,
      throw_and_go: 6,
      offensive_pattern_recognition: 5,
      backhand_power: 8,
      backhand_accuracy: 7,
      backhand_quick_release: 5,
      backhand_release_variations: 5,
      backhand_against_wind: 4,
      backhand_against_difficult_marks: 5,
      backhand_tempo_control: 5,
      forehand_power: 7,
      forehand_accuracy: 7,
      forehand_quick_release: 5,
      forehand_release_variations: 6,
      forehand_against_wind: 3,
      forehand_against_difficult_marks: 7,
      forehand_tempo_control: 6,
      specialty_power: 3,
      specialty_accuracy: 3,
      specialty_quick_release: 3,
      specialty_release_variations: 3,
      specialty_against_wind: 1,
      specialty_against_difficult_marks: 3,
      specialty_tempo_control: 2,
      hucking_confidence: 7,
      hucking_shape_control: 7,
      hucking_tempo_control: 6,
      hucking_placement: 6,
    },
  },
  {
    id: 3,
    metadata: {
      name: "Charlie Vukovic",
      email: "cavukovic@gmail.com",
      ip: "68.109.206.199",
      user_agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 18_1_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/131.0.6778.154 Mobile/15E148 Safari/604.1",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-07T22:04:37.985Z",
    },
    growth_targets: [
      'speed_explosiveness',
      'defensive_mental_fortitude',
      'continuation_cutting'
    ],
    skills: {
      speed_explosiveness: 6,
      endurance: 8,
      vertical_leap: 7,
      change_of_direction: 6,
      boxing_out: 8,
      laying_out: 4,
      recovery: 5,
      flexibility_mobility: 6,
      injury_prevention: 6,
      defensive_strategy: 8,
      offensive_strategy: 6,
      mental_game: 9,
      feedback_implementation: 7,
      isolation_cutting: 6,
      continuation_cutting: 6,
      angles: 5,
      fakes_footwork: 5,
      timing_field_vision: 4,
      decisiveness: 5,
      catching: 7,
      zone_offense: 6,
      reading_the_disc: 7,
      normal_marking: 3,
      sideline_trap_marking: 5,
      downfield_defending: 6,
      handler_defending: 4,
      defensive_pattern_recognition: 7,
      help_defense: 8,
      switching_on_defense: 8,
      zone_defense: 8,
      defensive_mental_fortitude: 8,
      handler_movement: 5,
      poise_with_disc: 7,
      breaking_the_mark: 8,
      resetting_from_trap_sideline: 8,
      decision_making_vision: 4,
      flow_awareness: 5,
      throw_and_go: 5,
      offensive_pattern_recognition: 5,
      backhand_power: 9,
      backhand_accuracy: 7,
      backhand_quick_release: 6,
      backhand_release_variations: 6,
      backhand_against_wind: 8,
      backhand_against_difficult_marks: 6,
      backhand_tempo_control: 5,
      forehand_power: 7,
      forehand_accuracy: 7,
      forehand_quick_release: 7,
      forehand_release_variations: 7,
      forehand_against_wind: 6,
      forehand_against_difficult_marks: 7,
      forehand_tempo_control: 7,
      specialty_power: 7,
      specialty_accuracy: 6,
      specialty_quick_release: 6,
      specialty_release_variations: 6,
      specialty_against_wind: 4,
      specialty_against_difficult_marks: 6,
      specialty_tempo_control: 4,
      hucking_confidence: 7,
      hucking_shape_control: 6,
      hucking_tempo_control: 6,
      hucking_placement: 6,
    },
  },
  {
    id: 4,
    metadata: {
      name: "Mark Whitton",
      email: "whittonm@mail.gvsu.edu",
      ip: "2601:405:4700:1db0:411b:5a4c:ddba:1afb",
      user_agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.2 Mobile/15E148 Safari/604.1",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-07T02:07:01.581Z",
    },
    growth_targets: [
      'breaking_the_mark',
      'endurance',
      'handler_movement'
    ],
    skills: {
      speed_explosiveness: 7,
      endurance: 6,
      vertical_leap: 7,
      change_of_direction: 5,
      boxing_out: 5,
      laying_out: 7,
      recovery: 4,
      flexibility_mobility: 6,
      injury_prevention: 6,
      defensive_strategy: 8,
      offensive_strategy: 7,
      mental_game: 6,
      feedback_implementation: 6,
      isolation_cutting: 5,
      continuation_cutting: 6,
      angles: 6,
      fakes_footwork: 3,
      timing_field_vision: 7,
      decisiveness: 3,
      catching: 9,
      zone_offense: 5,
      reading_the_disc: 7,
      normal_marking: 6,
      sideline_trap_marking: 8,
      downfield_defending: 6,
      handler_defending: 4,
      defensive_pattern_recognition: 6,
      help_defense: 7,
      switching_on_defense: 8,
      zone_defense: 7,
      defensive_mental_fortitude: 7,
      handler_movement: 5,
      poise_with_disc: 7,
      breaking_the_mark: 4,
      resetting_from_trap_sideline: 7,
      decision_making_vision: 4,
      flow_awareness: 6,
      throw_and_go: 5,
      offensive_pattern_recognition: 5,
      backhand_power: 8,
      backhand_accuracy: 7,
      backhand_quick_release: 5,
      backhand_release_variations: 6,
      backhand_against_wind: 9,
      backhand_against_difficult_marks: 6,
      backhand_tempo_control: 7,
      forehand_power: 9,
      forehand_accuracy: 8,
      forehand_quick_release: 6,
      forehand_release_variations: 6,
      forehand_against_wind: 8,
      forehand_against_difficult_marks: 7,
      forehand_tempo_control: 8,
      specialty_power: 7,
      specialty_accuracy: 7,
      specialty_quick_release: 6,
      specialty_release_variations: 7,
      specialty_against_wind: 6,
      specialty_against_difficult_marks: 6,
      specialty_tempo_control: 6,
      hucking_confidence: 9,
      hucking_shape_control: 8,
      hucking_tempo_control: 8,
      hucking_placement: 8,
    },
  },
  {
    id: 5,
    metadata: {
      name: "Rachel Mast",
      email: "rachelgerb520@gmail.com",
      ip: "50.126.208.197",
      user_agent: "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-07T01:55:25.039Z",
    },
    growth_targets: [
      'hucking_confidence',
      'handler_movement',
      'breaking_the_mark'
    ],
    skills: {
      speed_explosiveness: 8,
      endurance: 8,
      vertical_leap: 7,
      change_of_direction: 8,
      boxing_out: 7,
      laying_out: 7,
      recovery: 10,
      flexibility_mobility: 8,
      injury_prevention: 9,
      defensive_strategy: 7,
      offensive_strategy: 7,
      mental_game: 9,
      feedback_implementation: 9,
      isolation_cutting: 9,
      continuation_cutting: 9,
      angles: 9,
      fakes_footwork: 7,
      timing_field_vision: 8,
      decisiveness: 8,
      catching: 9,
      zone_offense: 8,
      reading_the_disc: 8,
      normal_marking: 8,
      sideline_trap_marking: 8,
      downfield_defending: 8,
      handler_defending: 8,
      defensive_pattern_recognition: 6,
      help_defense: 8,
      switching_on_defense: 8,
      zone_defense: 7,
      defensive_mental_fortitude: 7,
      handler_movement: 7,
      poise_with_disc: 6,
      breaking_the_mark: 6,
      resetting_from_trap_sideline: 7,
      decision_making_vision: 8,
      flow_awareness: 8,
      throw_and_go: 8,
      offensive_pattern_recognition: 5,
      backhand_power: 2,
      backhand_accuracy: 7,
      backhand_quick_release: 8,
      backhand_release_variations: 6,
      backhand_against_wind: 5,
      backhand_against_difficult_marks: 6,
      backhand_tempo_control: 6,
      forehand_power: 2,
      forehand_accuracy: 6,
      forehand_quick_release: 5,
      forehand_release_variations: 5,
      forehand_against_wind: 1,
      forehand_against_difficult_marks: 5,
      forehand_tempo_control: 5,
      specialty_power: 1,
      specialty_accuracy: 1,
      specialty_quick_release: 1,
      specialty_release_variations: 1,
      specialty_against_wind: 1,
      specialty_against_difficult_marks: 1,
      specialty_tempo_control: 1,
      hucking_confidence: 2,
      hucking_shape_control: 2,
      hucking_tempo_control: 2,
      hucking_placement: 2,
    },
  },
  {
    id: 6,
    metadata: {
      name: "Anson Reppermund",
      email: "reprimand1000@gmail.com",
      ip: "108.39.240.253",
      user_agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 18_1_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.1.1 Mobile/15E148 Safari/604.1",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-06T23:35:25.293Z",
    },
    growth_targets: [
      'injury_prevention',
      'breaking_the_mark',
      'decisiveness'
    ],
    skills: {
      speed_explosiveness: 9,
      endurance: 5,
      vertical_leap: 9,
      change_of_direction: 4,
      boxing_out: 7,
      laying_out: 3,
      recovery: 7,
      flexibility_mobility: 4,
      injury_prevention: 4,
      defensive_strategy: 9,
      offensive_strategy: 7,
      mental_game: 8,
      feedback_implementation: 6,
      isolation_cutting: 6,
      continuation_cutting: 5,
      angles: 8,
      fakes_footwork: 4,
      timing_field_vision: 7,
      decisiveness: 5,
      catching: 6,
      zone_offense: 7,
      reading_the_disc: 9,
      normal_marking: 5,
      sideline_trap_marking: 8,
      downfield_defending: 10,
      handler_defending: 3,
      defensive_pattern_recognition: 10,
      help_defense: 10,
      switching_on_defense: 9,
      zone_defense: 8,
      defensive_mental_fortitude: 7,
      handler_movement: 8,
      poise_with_disc: 6,
      breaking_the_mark: 4,
      resetting_from_trap_sideline: 7,
      decision_making_vision: 7,
      flow_awareness: 6,
      throw_and_go: 5,
      offensive_pattern_recognition: 5,
      backhand_power: 8,
      backhand_accuracy: 5,
      backhand_quick_release: 8,
      backhand_release_variations: 7,
      backhand_against_wind: 7,
      backhand_against_difficult_marks: 3,
      backhand_tempo_control: 5,
      forehand_power: 5,
      forehand_accuracy: 6,
      forehand_quick_release: 4,
      forehand_release_variations: 4,
      forehand_against_wind: 6,
      forehand_against_difficult_marks: 5,
      forehand_tempo_control: 5,
      specialty_power: 6,
      specialty_accuracy: 5,
      specialty_quick_release: 5,
      specialty_release_variations: 7,
      specialty_against_wind: 3,
      specialty_against_difficult_marks: 6,
      specialty_tempo_control: 5,
      hucking_confidence: 5,
      hucking_shape_control: 6,
      hucking_tempo_control: 5,
      hucking_placement: 6,
    },
  },
  {
    id: 7,
    metadata: {
      name: "Jonathan Mast",
      email: "jon1mast@gmail.com",
      ip: "50.126.208.197",
      user_agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0",
      referrer: "https://ultimate-assessment.netlify.app/",
      created_at: "2025-01-06T23:28:51.361Z",
    },
    growth_targets: [
      'endurance',
      'speed_explosiveness',
      'decisiveness'
    ],
    skills: {
      speed_explosiveness: 4,
      endurance: 3,
      vertical_leap: 3,
      change_of_direction: 5,
      boxing_out: 7,
      laying_out: 1,
      recovery: 6,
      flexibility_mobility: 7,
      injury_prevention: 4,
      defensive_strategy: 7,
      offensive_strategy: 9,
      mental_game: 9,
      feedback_implementation: 10,
      isolation_cutting: 3,
      continuation_cutting: 4,
      angles: 6,
      fakes_footwork: 5,
      timing_field_vision: 6,
      decisiveness: 5,
      catching: 9,
      zone_offense: 8,
      reading_the_disc: 9,
      normal_marking: 8,
      sideline_trap_marking: 9,
      downfield_defending: 4,
      handler_defending: 6,
      defensive_pattern_recognition: 6,
      help_defense: 8,
      switching_on_defense: 8,
      zone_defense: 6,
      defensive_mental_fortitude: 4,
      handler_movement: 9,
      poise_with_disc: 10,
      breaking_the_mark: 9,
      resetting_from_trap_sideline: 9,
      decision_making_vision: 8,
      flow_awareness: 9,
      throw_and_go: 8,
      offensive_pattern_recognition: 9,
      backhand_power: 9,
      backhand_accuracy: 9,
      backhand_quick_release: 9,
      backhand_release_variations: 9,
      backhand_against_wind: 8,
      backhand_against_difficult_marks: 9,
      backhand_tempo_control: 9,
      forehand_power: 8,
      forehand_accuracy: 9,
      forehand_quick_release: 10,
      forehand_release_variations: 10,
      forehand_against_wind: 8,
      forehand_against_difficult_marks: 10,
      forehand_tempo_control: 10,
      specialty_power: 8,
      specialty_accuracy: 8,
      specialty_quick_release: 8,
      specialty_release_variations: 10,
      specialty_against_wind: 6,
      specialty_against_difficult_marks: 8,
      specialty_tempo_control: 8,
      hucking_confidence: 7,
      hucking_shape_control: 7,
      hucking_tempo_control: 7,
      hucking_placement: 9,
    },
  },
  // Add more athletes as needed
];

export default mockData;


File: src\hooks\usePreloadState.js
================================================================================

// src/hooks/usePreloadState.js
import { useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext'; // Import useAuth

export function usePreloadState() {
  const location = useLocation();
  const navigate = useNavigate();
  const { user } = useAuth(); // Access user from AuthContext

  useEffect(() => {
    // Store current path for direct access
    sessionStorage.setItem('last_path', location.pathname);

    // Preload next likely route based on current path
    if (location.pathname === '/login') {
      // Preload dashboard and its dependencies
      const preloadDashboard = async () => {
        try {
          // Start preloading after a short delay to prioritize login render
          await new Promise(resolve => setTimeout(resolve, 2000));
          await import('../Dashboard');
        } catch (error) {
          console.error('Error preloading Dashboard:', error);
        }
      };
      preloadDashboard();
    }

    // Handle direct access to protected routes
    if (user && location.pathname === '/login') {
      const lastPath = sessionStorage.getItem('last_path') || '/';
      navigate(lastPath, { replace: true });
    }
  }, [location, navigate, user]);

  return {
    currentPath: location.pathname,
    isAuthenticated: !!user, // Use user presence to determine authentication
  };
}


File: src\index.css
================================================================================

/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: 'Inter', sans-serif;
}


File: src\index.js
================================================================================

// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App.jsx';
import { BrowserRouter } from 'react-router-dom'; // Import BrowserRouter
import { registerServiceWorker } from './serviceWorkerRegistration';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter> {/* Wrap App with BrowserRouter */}
      <div className="dark">  {/* <-- Force dark mode */}
        <App />
      </div>
    </BrowserRouter>
  </React.StrictMode>
);
registerServiceWorker();
if (navigator.serviceWorker.controller) {
  console.log('[SW] Service worker is controlling the page');
} else {
  console.warn('[SW] Service worker is NOT controlling the page');
}


File: src\reportWebVitals.js
================================================================================

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


File: src\serviceWorkerRegistration.js
================================================================================

// src/serviceWorkerRegistration.js

export function registerServiceWorker() {
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/service-worker.js')
        .then((registration) => {
          console.log('[SW] Registration successful:', registration);

          // Listen for updates to the service worker.
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            console.log('[SW] New worker being installed:', newWorker);

            newWorker.addEventListener('statechange', () => {
              console.log('[SW] New worker state:', newWorker.state);
              if (newWorker.state === 'installed') {
                if (navigator.serviceWorker.controller) {
                  // New update available
                  console.log('[SW] New update available');
                  // Optionally, notify the user about the update
                } else {
                  // Content cached for offline use
                  console.log('[SW] Content cached for offline use');
                }
              }
            });
          });

          // Check for controlling service worker
          if (navigator.serviceWorker.controller) {
            console.log('[SW] Service worker is controlling the page');
          } else {
            console.log('[SW] Service worker is NOT controlling the page');
          }

        })
        .catch((error) => {
          console.error('[SW] Service worker registration failed:', error);
        });
    });

    // Reload the page when the service worker updates
    let refreshing = false;
    navigator.serviceWorker.addEventListener('controllerchange', () => {
      if (!refreshing) {
        refreshing = true;
        window.location.reload();
      }
    });

    // Handle messages from the service worker
    navigator.serviceWorker.addEventListener('message', (event) => {
      console.log('[SW] Received message:', event.data);
    });
  } else {
    console.log('[SW] Service workers are not supported');
  }
}


File: src\setupTests.js
================================================================================

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


File: src\utils\cache.js
================================================================================

// src/utils/cache.js
export const DataCache = {
    async getPlayer(id) {
      const key = `player-${id}`;
      try {
        const cached = localStorage.getItem(key);
        if (cached) {
          return JSON.parse(cached);
        }
        return null;
      } catch (error) {
        console.error('Error accessing cache:', error);
        return null;
      }
    },
  
    async setPlayer(id, data) {
      const key = `player-${id}`;
      try {
        localStorage.setItem(key, JSON.stringify(data));
      } catch (error) {
        console.error('Error saving to cache:', error);
      }
    }
  };

File: src\utils\constants.js
================================================================================

// src/utils/constants.js

export const METADATA_KEYS = [
    'id',
    'name',
    'email',
    'ip',
    'user_agent',
    'referrer',
    'created_at',
  ];
  

File: src\utils\helpers.js
================================================================================

// src/utils/helpers.js

import { METADATA_KEYS } from './constants';

// A small utility to average numeric values for a given list of keys
export function averageOfKeys(player, keys) {
  let sum = 0, count = 0;
  for (const key of keys) {
    if (typeof player.skills[key] === 'number' && !METADATA_KEYS.includes(key)) {
      sum += player.skills[key];
      count++;
    }
  }
  return count === 0 ? 0 : parseFloat((sum / count).toFixed(1));
}

// Compute category averages for Mental, Physical, Cutting, Throwing, Defense, Handling, Offensive
export function computeCategoryAverages(player) {
  // Define keys for each category
  const categories = {
    mental: [
      'mental_game',
      'feedback_implementation',
      'defensive_strategy',
      'offensive_strategy',

    ],
    physical: [
      'speed_explosiveness',
      'endurance',
      'vertical_leap',
      'change_of_direction',
      'boxing_out',
      'laying_out',
      'recovery',
      'flexibility_mobility',
      'injury_prevention',
    ],
    cutting: [
      'angles',
      'fakes_footwork',
      'timing_field_vision',
      'decisiveness',
      'catching',
      'flow_awareness',
      'isolation_cutting',
      'continuation_cutting',
    ],
    handling: [
      'handler_movement',
      'poise_with_disc',
      'breaking_the_mark',
      'resetting_from_trap_sideline',
      'decision_making_vision',
      'offensive_pattern_recognition',
      'throw_and_go',
    ],
    throwing: [
      // Backhand
      'backhand_power',
      'backhand_accuracy',
      'backhand_quick_release',
      'backhand_release_variations',
      'backhand_against_wind',
      'backhand_against_difficult_marks',
      'backhand_tempo_control',
      // Forehand
      'forehand_power',
      'forehand_accuracy',
      'forehand_quick_release',
      'forehand_release_variations',
      'forehand_against_wind',
      'forehand_against_difficult_marks',
      'forehand_tempo_control',
      // Specialty
      'specialty_power',
      'specialty_accuracy',
      'specialty_quick_release',
      'specialty_release_variations',
      'specialty_against_wind',
      'specialty_against_difficult_marks',
      'specialty_tempo_control',
      // Hucking
      'hucking_confidence',
      'hucking_shape_control',
      'hucking_tempo_control',
      'hucking_placement',
    ],
    defensive: [
      'normal_marking',
      'sideline_trap_marking',
      'downfield_defending',
      'handler_defending',
      'defensive_pattern_recognition',
      'help_defense',
      'switching_on_defense',
      'zone_defense',
      'defensive_mental_fortitude',
    ],
  };

  // Compute individual averages
  const mental = averageOfKeys(player, categories.mental);
  const physical = averageOfKeys(player, categories.physical);
  const cutting = averageOfKeys(player, categories.cutting);
  const handling = averageOfKeys(player, categories.handling);
  const throwing = averageOfKeys(player, categories.throwing);
  const defensive = averageOfKeys(player, categories.defensive);

  // Offensive is the average of cutting, handling, and throwing
  const offensive = parseFloat(((cutting + handling + throwing) / 3).toFixed(1));

  return {
    mental,
    physical,
    cutting,
    handling,
    throwing,
    defensive,
    offensive,
  };
}

// Compute overall score excluding metadata
export function computeOverallScore(player) {
  let sum = 0, count = 0;
  for (const key in player.skills) {
    if (typeof player.skills[key] === 'number' && !METADATA_KEYS.includes(key)) {
      sum += player.skills[key];
      count++;
    }
  }
  return count === 0 ? 0 : parseFloat((sum / count).toFixed(1));
}


File: src\utils\slugify.js
================================================================================

// src/utils/slugify.js
import slugify from 'slugify';

export const createAthleteSlug = (name) => {
  return slugify(name, {
    lower: true,       // Convert to lowercase
    strict: true,      // Remove special characters
    remove: /[*+~.()'"!:@]/g, // Additional character removal if needed
  });
};


File: src\utils\sync.js
================================================================================

// src/utils/sync.js
export const SyncManager = {
    async queueSync(action, data) {
      const syncQueue = JSON.parse(localStorage.getItem('syncQueue') || '[]');
      syncQueue.push({ action, data, timestamp: Date.now() });
      localStorage.setItem('syncQueue', JSON.stringify(syncQueue));
    },
  
    async processSyncQueue() {
      if (!navigator.onLine) return;
  
      const syncQueue = JSON.parse(localStorage.getItem('syncQueue') || '[]');
      if (syncQueue.length === 0) return;
  
      for (const item of syncQueue) {
        try {
          // Process sync item
          await this.processItem(item);
          // Remove from queue if successful
          const newQueue = syncQueue.filter(i => i !== item);
          localStorage.setItem('syncQueue', JSON.stringify(newQueue));
        } catch (error) {
          console.error('Sync failed for item:', item, error);
        }
      }
    }
  };

