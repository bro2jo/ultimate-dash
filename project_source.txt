Project: performance-app
Version: 0.1.0
Generated: 2025-01-19T22:09:04.412Z
================================================================================

File: concat-files.js
================================================================================

const fs = require('fs').promises;
const path = require('path');

async function concatenateSourceFiles(rootDir, outputFile) {
    // List of important file patterns to include
    const importantFiles = [
        // Source files
        '.js', '.jsx', '.ts', '.tsx', '.css', '.scss',
        // Config files
        'tailwind.config.js',
        'postcss.config.js',
        'package.json',
        'tsconfig.json',
        'vite.config.js',
        'next.config.js',
        '.env.example',
        '.babelrc',
        // Style files
        'global.css',
        'tailwind.css',
        'styles.css',
        // Documentation
        'README.md'
    ];

    let concatenatedContent = '';
    
    // Add project metadata
    const packageJson = await fs.readFile(path.join(rootDir, 'package.json'), 'utf8')
        .catch(() => '{ "name": "project", "version": "unknown" }');
    const pkg = JSON.parse(packageJson);
    
    concatenatedContent += `Project: ${pkg.name}\n`;
    concatenatedContent += `Version: ${pkg.version}\n`;
    concatenatedContent += `Generated: ${new Date().toISOString()}\n`;
    concatenatedContent += '='.repeat(80) + '\n\n';

    async function processDirectory(dir, isRoot = false) {
        const items = await fs.readdir(dir, { withFileTypes: true });
        
        for (const item of items) {
            const fullPath = path.join(dir, item.name);
            
            // Skip node_modules, .git, and build directories
            if (item.isDirectory()) {
                if (!['node_modules', '.git', 'dist', 'build', '.next'].includes(item.name)) {
                    await processDirectory(fullPath);
                }
                continue;
            }
            
            // Check if file should be included
            const extension = path.extname(item.name);
            const shouldInclude = importantFiles.some(pattern => 
                pattern.startsWith('.') ? extension === pattern : item.name === pattern
            );
            
            if (shouldInclude) {
                try {
                    // Read file content
                    const content = await fs.readFile(fullPath, 'utf8');
                    
                    // Add file header
                    concatenatedContent += `File: ${path.relative(rootDir, fullPath)}\n`;
                    concatenatedContent += `${'='.repeat(80)}\n\n`;
                    concatenatedContent += content;
                    concatenatedContent += '\n\n';
                } catch (error) {
                    concatenatedContent += `Error reading file: ${fullPath}\n`;
                    concatenatedContent += `${error.message}\n\n`;
                }
            }
        }
    }

    try {
        // First process root directory for config files
        await processDirectory(rootDir, true);
        
        // Then process src directory if it exists
        const srcDir = path.join(rootDir, 'src');
        try {
            await fs.access(srcDir);
            await processDirectory(srcDir);
        } catch (error) {
            console.log('No src directory found, skipping...');
        }

        // Write concatenated content to output file
        await fs.writeFile(outputFile, concatenatedContent);
        console.log(`Successfully concatenated source files to ${outputFile}`);
    } catch (error) {
        console.error('Error:', error);
    }
}

// Example usage
const projectRoot = '.';  // Current directory
const outputFile = 'project_source.txt';

concatenateSourceFiles(projectRoot, outputFile);

File: package.json
================================================================================

{
  "name": "performance-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@firebase/auth": "^1.8.1",
    "@heroicons/react": "^2.2.0",
    "chart.js": "^4.4.7",
    "cra-template": "1.2.0",
    "firebase": "^11.1.0",
    "firebase-admin": "^13.0.2",
    "framer-motion": "^11.16.4",
    "lucide-react": "^0.469.0",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.4.0",
    "react-router-dom": "^7.1.1",
    "react-scripts": "5.0.1",
    "sharp": "^0.33.5",
    "slugify": "^1.6.6"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "optimize-images": "node scripts/optimize-images.js"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "@types/node": "^22.10.7",
    "@types/react": "^19.0.7",
    "@types/react-dom": "^19.0.3",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.7.3"
  }
}


File: postcss.config.js
================================================================================

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


File: public\service-worker.js
================================================================================

/* -----------------------------------------
   service-worker.js (Refactored & Enhanced)
-------------------------------------------- */

const CACHE_NAME = 'ultify-cache-v2';      // Increment for static assets
const IMAGE_CACHE_NAME = 'ultify-images-v1';
const DATA_CACHE_NAME = 'ultify-data-v1';

// Static assets to be cached immediately
const STATIC_ASSETS = [
  '/',
  '/index.html',
  '/manifest.json',
  '/static/css/main.css',
  '/static/js/main.js',
  '/favicon.svg',
];

// Images that can be cached on first use
const IMAGE_ASSETS = [
  '/images/background-sm.webp',
  '/images/background-md.webp',
  '/images/background-lg.webp',
  '/images/background-mobileSm.webp',
  '/images/background-mobileMd.webp',
  '/images/background-mobileLg.webp',
  '/images/background-placeholder.webp',
  '/icons/icon-72x72.png',
  '/icons/icon-144x144.png',
  '/icons/icon-192x192.png',
  '/icons/icon-256x256.png',
  '/icons/icon-384x384.png',
  '/icons/icon-512x512.png',
];

/* 
  1) INSTALL
     - Cache essential assets
     - Preload small placeholder image
*/
self.addEventListener('install', (event) => {
  event.waitUntil(
    (async () => {
      const staticCache = await caches.open(CACHE_NAME);
      await staticCache.addAll(STATIC_ASSETS);

      // Pre-cache placeholder image
      const imgCache = await caches.open(IMAGE_CACHE_NAME);
      await imgCache.add('/images/background-placeholder.webp');
    })()
  );

  // Take control immediately
  self.skipWaiting();
});

/* 
  2) ACTIVATE
     - Clean up old caches
     - Notify clients of updates
*/
self.addEventListener('activate', (event) => {
  event.waitUntil(
    (async () => {
      const cacheNames = await caches.keys();
      const deletionPromises = cacheNames
        .filter((cacheName) => {
          return (
            cacheName !== CACHE_NAME &&
            cacheName !== DATA_CACHE_NAME &&
            cacheName !== IMAGE_CACHE_NAME
          );
        })
        .map((cacheName) => caches.delete(cacheName));

      await Promise.all(deletionPromises);

      // Notify all clients
      const clientsList = await self.clients.matchAll();
      for (const client of clientsList) {
        client.postMessage({ type: 'CACHE_UPDATED' });
      }
    })()
  );

  self.clients.claim();
});

/* 
  Helper: isImageRequest
     Checks if the request is for an image
*/
function isImageRequest(request) {
  return (
    request.destination === 'image' ||
    IMAGE_ASSETS.some((asset) => request.url.includes(asset))
  );
}

/*
  Helper: timeoutFetch
     Aborts a fetch if it exceeds 'timeout' ms
*/
async function timeoutFetch(request, timeout = 3000) {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeout);

  try {
    const response = await fetch(request, { signal: controller.signal });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
}

/* 
  3) FETCH EVENT
     - Different caching strategies for API, Images, and Static Assets
*/
self.addEventListener('fetch', (event) => {
  // If request is not GET, skip caching to prevent errors
  if (event.request.method !== 'GET') {
    return;
  }

  const url = new URL(event.request.url);

  // A) API requests
  if (url.pathname.startsWith('/api/')) {
    event.respondWith(
      (async () => {
        try {
          const networkResponse = await timeoutFetch(event.request);
          if (networkResponse.status === 200) {
            const clonedResponse = networkResponse.clone();
            const cache = await caches.open(DATA_CACHE_NAME);
            cache.put(event.request, clonedResponse);
          }
          return networkResponse;
        } catch (error) {
          const cachedResponse = await caches.match(event.request);
          return (
            cachedResponse ||
            new Response(JSON.stringify({ error: 'offline' }), {
              headers: { 'Content-Type': 'application/json' },
            })
          );
        }
      })()
    );
    return;
  }

  // B) Image requests
  if (isImageRequest(event.request)) {
    event.respondWith(
      (async () => {
        const cachedResponse = await caches.match(event.request);
        if (cachedResponse) {
          // Update in background
          event.waitUntil(
            (async () => {
              try {
                const response = await timeoutFetch(event.request);
                if (response && response.ok) {
                  const imgCache = await caches.open(IMAGE_CACHE_NAME);
                  imgCache.put(event.request, response);
                }
              } catch (err) {
                // silent fail
              }
            })()
          );
          return cachedResponse;
        }

        // If not cached, fetch & store
        try {
          const networkResponse = await timeoutFetch(event.request);
          if (networkResponse.ok) {
            const responseClone = networkResponse.clone();
            event.waitUntil(
              (async () => {
                const imgCache = await caches.open(IMAGE_CACHE_NAME);
                await imgCache.put(event.request, responseClone);
              })()
            );
          }
          return networkResponse;
        } catch (error) {
          return caches.match('/images/background-placeholder.webp');
        }
      })()
    );
    return;
  }

  // C) Static assets (HTML, CSS, JS, etc.)
  event.respondWith(
    (async () => {
      const cachedResponse = await caches.match(event.request);
      if (cachedResponse) {
        return cachedResponse;
      }

      try {
        const networkResponse = await timeoutFetch(event.request);
        if (
          networkResponse &&
          networkResponse.ok &&
          (networkResponse.type === 'basic' || networkResponse.type === 'cors')
        ) {
          const clonedResponse = networkResponse.clone();
          event.waitUntil(
            (async () => {
              const staticCache = await caches.open(CACHE_NAME);
              await staticCache.put(event.request, clonedResponse);
            })()
          );
        }
        return networkResponse;
      } catch (error) {
        return caches.match('/');
      }
    })()
  );
});

/*
  4) BACKGROUND SYNC
*/
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-data') {
    event.waitUntil(
      // Your logic for queued data sync
      Promise.resolve()
    );
  }
});

/*
  5) PUSH NOTIFICATIONS
*/
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    event.waitUntil(
      self.registration.showNotification(data.title, {
        body: data.message,
        icon: '/icons/icon-192x192.png',
      })
    );
  }
});


File: README.md
================================================================================

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


File: scripts\migrateMockData.js
================================================================================

// scripts/migrateMockData.js

console.log("Migration script started.");

const admin = require('firebase-admin');
const fs = require('fs');
const path = require('path');

// Path to your service account key
const serviceAccountPath = path.join(__dirname, 'serviceAccountKey.json');

(async () => {
  try {
    // Check if service account key exists
    if (!fs.existsSync(serviceAccountPath)) {
      throw new Error(`Service account key not found at path: ${serviceAccountPath}`);
    }

    // Initialize Firebase Admin SDK
    const serviceAccount = require(serviceAccountPath);
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
    });
    console.log("Firebase Admin initialized.");

    const db = admin.firestore();

    // Import mockData
    const mockData = require('../src/data/mockData');
    if (!Array.isArray(mockData)) {
      throw new Error('mockData is not an array.');
    }
    console.log(`Loaded ${mockData.length} athletes from mockData.js`);

    if (mockData.length === 0) {
      console.log("No athletes to migrate.");
      process.exit(0);
    }

    for (const [index, athlete] of mockData.entries()) {
      console.log(`Migrating athlete ${index + 1}/${mockData.length}: ${athlete.metadata.name}`);
      
      // Reference to the athletes collection with a specified document ID (optional)
      // If you want to use a specific ID, replace `.doc()` with `.doc(athlete.id.toString())`
      const athleteRef = db.collection('athletes').doc(); // Auto-generated ID

      // Set athlete data
      await athleteRef.set({
        metadata: athlete.metadata,
        growth_targets: athlete.growth_targets,
        skills: athlete.skills,
      });

      console.log(`Migrated athlete: ${athlete.metadata.name} with ID: ${athleteRef.id}`);
    }

    console.log('Data migration completed successfully.');
    process.exit(0);
  } catch (error) {
    console.error('Error migrating data:', error);
    process.exit(1);
  }
})();


File: scripts\optimize-images.js
================================================================================

const sharp = require('sharp');
const path = require('path');

// Input image path
const inputImage = path.join(__dirname, '../src/assets/background.jpg');

// Output directory
const outputDir = path.join(__dirname, '../public/images');

// Define size variants (maintaining 16:9 aspect ratio)
const sizeVariants = {
  sm: { width: 640, height: 360 },    // Small screens
  md: { width: 1280, height: 720 },   // Medium screens
  lg: { width: 1920, height: 1080 },  // Large screens/desktop
};

// Create different sizes and formats
async function optimizeImages() {
  try {
    // Generate WebP versions for all sizes
    for (const [size, dimensions] of Object.entries(sizeVariants)) {
      // WebP version
      await sharp(inputImage)
        .resize(dimensions.width, dimensions.height, {
          fit: 'cover',
          withoutEnlargement: true // Prevents upscaling if original is smaller
        })
        .webp({ 
          quality: 80,
          effort: 6, // Higher compression effort
          smartSubsample: true // Better color detail preservation
        })
        .toFile(path.join(outputDir, `background-${size}.webp`));

      // JPEG fallback
      await sharp(inputImage)
        .resize(dimensions.width, dimensions.height, {
          fit: 'cover',
          withoutEnlargement: true
        })
        .jpeg({ 
          quality: 80,
          progressive: true,
          mozjpeg: true, // Use mozjpeg for better compression
          chromaSubsampling: '4:4:4' // Better quality
        })
        .toFile(path.join(outputDir, `background-${size}.jpg`));
    }

    // Generate special mobile-optimized versions (still landscape)
    const mobileVariants = {
      mobileSm: { width: 640, height: 360 },
      mobileMd: { width: 960, height: 540 },
      mobileLg: { width: 1280, height: 720 }
    };

    for (const [size, dimensions] of Object.entries(mobileVariants)) {
      await sharp(inputImage)
        .resize(dimensions.width, dimensions.height, {
          fit: 'cover',
          withoutEnlargement: true
        })
        .webp({ 
          quality: 80,
          effort: 6,
          smartSubsample: true
        })
        .toFile(path.join(outputDir, `background-${size}.webp`));

      await sharp(inputImage)
        .resize(dimensions.width, dimensions.height, {
          fit: 'cover',
          withoutEnlargement: true
        })
        .jpeg({ 
          quality: 80,
          progressive: true,
          mozjpeg: true,
          chromaSubsampling: '4:4:4'
        })
        .toFile(path.join(outputDir, `background-${size}.jpg`));
    }

    // Generate a tiny placeholder for blur-up effect
    await sharp(inputImage)
      .resize(20, 11) // Tiny version maintaining aspect ratio
      .blur(2) // Slight blur for better placeholder appearance
      .webp({ quality: 20 })
      .toFile(path.join(outputDir, 'background-placeholder.webp'));

    console.log('Images optimized successfully!');
    
    // Log out the file sizes for verification
    const files = await Promise.all([
      sharp(path.join(outputDir, 'background-sm.webp')).metadata(),
      sharp(path.join(outputDir, 'background-md.webp')).metadata(),
      sharp(path.join(outputDir, 'background-lg.webp')).metadata(),
      sharp(path.join(outputDir, 'background-mobileSm.webp')).metadata(),
      sharp(path.join(outputDir, 'background-mobileMd.webp')).metadata(),
      sharp(path.join(outputDir, 'background-mobileLg.webp')).metadata(),
    ]);
    
    console.log('Generated file sizes:');
    files.forEach(file => {
      console.log(`${file.width}x${file.height}: ${(file.size / 1024).toFixed(2)}KB`);
    });

  } catch (error) {
    console.error('Error optimizing images:', error);
    process.exit(1);
  }
}

// Run the optimization
optimizeImages();

File: src\App.css
================================================================================

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}
/* Ensure dropdowns are visible globally */
.dropdown-container {
  position: relative;
  z-index: 1;
}

.dropdown-menu {
  position: absolute;
  z-index: 9999; /* Always on top */
}

.fixed-dropdown-wrapper {
  position: relative;
  z-index: 9999;
}

/* Ensure the dropdown menu is always on top */
.fixed-dropdown-wrapper [role="listbox"] {
  z-index: 9999;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


File: src\App.tsx
================================================================================

// src/App.tsx
import { lazy, ReactElement, Suspense } from 'react';
import { Routes, Route } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import { LoadingState } from './components/LoadingState';
import ErrorBoundary from './components/ErrorBoundary';
import ErrorFallback from './components/ErrorFallback';
import { lazyLoad } from './utils/lazyLoad';

// Define route configuration type
interface RouteConfig {
  readonly path: string;
  readonly element: ReactElement;
  readonly componentName: string;
}

// Define routes object with type safety
const ROUTES = {
  LOGIN: '/login',
  HOME: '/*'
} as const;

// Lazy load components with error handling
const LoginPage = lazyLoad(
  () => import('./components/auth/LoginPage'),
  { retry: 2, retryDelay: 1000 }
);

const Dashboard = lazyLoad(
  () => import('./Dashboard'),
  { retry: 2 }
);

const ProtectedRoute = lazyLoad(
  () => import('./components/auth/ProtectedRoute'),
  { retry: 2 }
);

// Define route configurations with component names
const routeConfig: RouteConfig[] = [
  {
    path: ROUTES.LOGIN,
    element: <LoginPage />,
    componentName: 'LoginPage'
  },
  {
    path: ROUTES.HOME,
    element: (
      <ProtectedRoute>
        <Dashboard />
      </ProtectedRoute>
    ),
    componentName: 'Dashboard'
  }
];

// Create a wrapper for suspense with error handling
const SuspenseWithErrorBoundary: React.FC<{
  children: React.ReactNode;
  name: string;
}> = ({ children, name }) => (
  <ErrorBoundary
    fallback={
      <ErrorFallback 
        error={new Error(`Failed to load ${name}. Please try refreshing the page.`)}
        resetErrorBoundary={() => window.location.reload()}
      />
    }
  >
    <Suspense fallback={<LoadingState />}>
      {children}
    </Suspense>
  </ErrorBoundary>
);

function App(): ReactElement {
  return (
    <ErrorBoundary
      fallback={
        <ErrorFallback 
          resetErrorBoundary={() => window.location.reload()}
        />
      }
    >
      <AuthProvider>
        <Routes>
          {routeConfig.map(({ path, element, componentName }) => (
            <Route
              key={path}
              path={path}
              element={
                <SuspenseWithErrorBoundary name={componentName}>
                  {element}
                </SuspenseWithErrorBoundary>
              }
            />
          ))}
        </Routes>
      </AuthProvider>
    </ErrorBoundary>
  );
}

export default App;


File: src\components\AthleteDropdown.jsx
================================================================================

// src/components/AthleteDropdown.jsx

import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

const AthleteDropdown = ({ athletes, selectedAthleteId, onSelectAthlete }) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef();

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target)
      ) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Get the selected athlete's name
  const selectedAthlete = athletes.find(a => a.id === selectedAthleteId);

  return (
    <div className="absolute top-4 right-4 md:top-6 md:right-6" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center bg-gray-800 text-gray-300 hover:bg-gray-700 px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-emerald-500"
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        <span className="mr-2 text-sm">{selectedAthlete ? selectedAthlete.name : "Select Athlete"}</span>
        <ChevronDown className="w-4 h-4" aria-hidden="true" />
      </button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="mt-2 w-48 bg-gray-800 rounded-md shadow-lg z-30"
            role="listbox"
            aria-labelledby="athlete-dropdown"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            transition={{ duration: 0.2 }}
          >
            <ul className="py-1">
              {athletes.map(athlete => (
                <li key={athlete.id}>
                  <button
                    onClick={() => {
                      onSelectAthlete(athlete.id);
                      setIsOpen(false);
                    }}
                    className={`w-full text-left px-4 py-2 text-sm ${
                      athlete.id === selectedAthleteId
                        ? 'bg-gray-700 text-white'
                        : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                    }`}
                    role="option"
                    aria-selected={athlete.id === selectedAthleteId}
                  >
                    {athlete.name}
                  </button>
                </li>
              ))}
            </ul>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default AthleteDropdown;


File: src\components\AthleteList.jsx
================================================================================

// src/components/AthleteList.jsx

import React from 'react';

const AthleteList = ({ athletes }) => {
  return (
    <div>
      <h2>Athletes</h2>
      <ul>
        {athletes.map(athlete => (
          <li key={athlete.id}>
            <strong>{athlete.metadata.name}</strong> - {athlete.metadata.email}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default AthleteList;


File: src\components\auth\LoginPage.jsx
================================================================================

import React, { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Mail, 
  Lock, 
  AlertCircle, 
  Loader2, 
  ArrowRight,
  CheckCircle 
} from 'lucide-react';

export default function LoginPage() {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [isResetPassword, setIsResetPassword] = useState(false);
  const navigate = useNavigate();
  const { login, signup, loginWithGoogle, resetPassword } = useAuth();

  // Function to handle user-friendly error messages
  const getErrorMessage = useCallback((error) => {
    switch (error.code) {
      case 'auth/invalid-credential':
        return 'Invalid email or password. Please check your credentials and try again.';
      case 'auth/wrong-password':
        return 'Incorrect password. Please try again.';
      case 'auth/user-not-found':
        return 'No account found with this email.';
      case 'auth/email-already-in-use':
        return 'An account already exists with this email.';
      case 'auth/weak-password':
        return 'Password should be at least 6 characters.';
      case 'auth/invalid-email':
        return 'Please enter a valid email address.';
      case 'auth/too-many-requests':
        return 'Too many attempts. Please try again later.';
      case 'auth/network-request-failed':
        return 'Network error. Please check your internet connection and try again.';
      case 'auth/popup-closed-by-user':
        return 'Sign in was cancelled. Please try again.';
      case 'auth/cancelled-popup-request':
        return 'Sign in process was interrupted. Please try again.';
      case 'auth/operation-not-allowed':
        return 'This sign in method is not enabled. Please try another method.';
      case 'auth/user-disabled':
        return 'This account has been disabled. Please contact support for assistance.';
      default:
        return error.message || 'An error occurred. Please try again.';
    }
}, []);

  const clearMessages = useCallback(() => {
    setError('');
    setSuccessMessage('');
  }, []);

  const resetForm = useCallback(() => {
    setEmail('');
    setPassword('');
    clearMessages();
  }, [clearMessages]);

  const handleAuthModeChange = useCallback((mode) => {
    if (mode === 'reset') {
      setIsResetPassword(true);
      setIsLogin(true);
    } else {
      setIsResetPassword(false);
      setIsLogin(mode === 'login');
    }
    clearMessages();
  }, [clearMessages]);

  async function handleSubmit(e) {
    e.preventDefault();
    clearMessages();
    setLoading(true);

    try {
      if (isResetPassword) {
        await resetPassword(email);
        setSuccessMessage('Password reset email sent! Please check your inbox.');
        setIsResetPassword(false);
      } else if (isLogin) {
        await login(email, password);
        resetForm();
        navigate('/');
      } else {
        await signup(email, password);
        resetForm();
        navigate('/');
      }
    } catch (err) {
      setError(getErrorMessage(err));
    } finally {
      setLoading(false);
    }
  }

  async function handleGoogleLogin() {
    clearMessages();
    setLoading(true);

    try {
      await loginWithGoogle();
      resetForm();
      navigate('/');
    } catch (err) {
      setError(getErrorMessage(err));
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 flex flex-col items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Logo/Brand Section */}
        <div className="text-center mb-8">
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            <div className="w-16 h-16 mx-auto mb-4 flex items-center justify-center">
              <img src="/favicon.svg" alt="Logo" className="w-full h-full" />
            </div>
          </motion.div>
          <h2 className="text-2xl md:text-3xl font-bold text-white">
            {isResetPassword 
              ? 'Reset Password'
              : isLogin 
                ? 'Welcome back' 
                : 'Create your account'}
          </h2>
          <p className="mt-2 text-gray-400 text-sm">
            {isResetPassword
              ? 'Enter your email and we will send you reset instructions.'
              : isLogin 
                ? 'Great to see you again! Please enter your details.'
                : 'Start your performance tracking journey today.'}
          </p>
        </div>

        {/* Main Form */}
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.4, delay: 0.1 }}
          className="bg-gray-800/50 backdrop-blur-xl rounded-2xl p-6 md:p-8 shadow-xl border border-gray-700/50"
        >
          <AnimatePresence mode="wait">
            {error && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="mb-4 p-3 rounded-lg bg-red-500/10 border border-red-500/50 flex items-center gap-2"
              >
                <AlertCircle className="h-4 w-4 text-red-500 flex-shrink-0" />
                <p className="text-sm text-red-500">{error}</p>
              </motion.div>
            )}
            {successMessage && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="mb-4 p-3 rounded-lg bg-emerald-500/10 border border-emerald-500/50 flex items-center gap-2"
              >
                <CheckCircle className="h-4 w-4 text-emerald-500 flex-shrink-0" />
                <p className="text-sm text-emerald-500">{successMessage}</p>
              </motion.div>
            )}
          </AnimatePresence>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-1">
              <label htmlFor="email" className="text-sm font-medium text-gray-300">
                Email
              </label>
              <div className="relative">
                <input
                  id="email"
                  type="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full px-4 py-2.5 rounded-lg bg-gray-900/50 border border-gray-700 text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500 transition-colors"
                  placeholder="you@example.com"
                />
                <Mail className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
              </div>
            </div>

            {!isResetPassword && (
              <div className="space-y-1">
                <div className="flex items-center justify-between">
                  <label htmlFor="password" className="text-sm font-medium text-gray-300">
                    Password
                  </label>
                  {isLogin && (
                    <button
                      type="button"
                      onClick={() => handleAuthModeChange('reset')}
                      className="text-sm text-emerald-400 hover:text-emerald-300 transition-colors"
                    >
                      Forgot password?
                    </button>
                  )}
                </div>
                <div className="relative">
                  <input
                    id="password"
                    type="password"
                    required={!isResetPassword}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full px-4 py-2.5 rounded-lg bg-gray-900/50 border border-gray-700 text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500 transition-colors"
                    placeholder="••••••••"
                  />
                  <Lock className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
                </div>
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-emerald-500 hover:bg-emerald-600 text-white py-2.5 rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {loading ? (
                <Loader2 className="w-5 h-5 animate-spin" />
              ) : (
                <>
                  {isResetPassword 
                    ? 'Send reset instructions' 
                    : isLogin 
                      ? 'Sign in' 
                      : 'Create account'}
                  <ArrowRight className="w-5 h-5" />
                </>
              )}
            </button>
          </form>

          {!isResetPassword && (
            <>
              <div className="mt-6">
                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-gray-700"></div>
                  </div>
                  <div className="relative flex justify-center text-sm">
                    <span className="px-2 bg-gray-800/50 text-gray-400">
                      Or continue with
                    </span>
                  </div>
                </div>

                <button
                  onClick={handleGoogleLogin}
                  disabled={loading}
                  className="mt-4 w-full flex items-center justify-center gap-3 px-4 py-2.5 border border-gray-700 rounded-lg text-gray-300 hover:bg-gray-700/50 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500"
                >
                  <svg className="h-5 w-5" viewBox="0 0 24 24">
                    <path
                      fill="currentColor"
                      d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
                    />
                  </svg>
                  Google
                </button>
              </div>
            </>
          )}

          <div className="mt-6 text-center space-y-3">
            {!isResetPassword && (
              <button
                onClick={() => handleAuthModeChange(isLogin ? 'signup' : 'login')}
                className="text-sm text-emerald-400 hover:text-emerald-300 transition-colors"
              >
                {isLogin ? "Don't have an account? Sign up" : 'Already have an account? Sign in'}
              </button>
            )}
            {isResetPassword && (
              <button
                onClick={() => handleAuthModeChange('login')}
                className="block w-full text-sm text-gray-400 hover:text-gray-300 transition-colors"
              >
                Return to login
              </button>
            )}
          </div>
        </motion.div>
      </div>
    </div>
  );
}

File: src\components\auth\ProtectedRoute.jsx
================================================================================

// src/components/auth/ProtectedRoute.jsx
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { LoadingState } from '../LoadingState'; // adjust import path if needed

export default function ProtectedRoute({ children }) {
  const { user, loading } = useAuth(); 
  // ^ Make sure your AuthContext provides both `user` and `loading` (or `authLoading`).

  // 1) If Auth is still loading, show a spinner (or any fallback).
  if (loading) {
    return <LoadingState />;
  }

  // 2) If no user, redirect to login page.
  if (!user) {
    return <Navigate to="/login" replace />;
  }

  // 3) Otherwise, render the protected component(s).
  return children;
}


File: src\components\CategorySection.jsx
================================================================================

// src/components/CategorySection.jsx

import React from 'react';
import SkillCard from './SkillCard';

const CategorySection = ({ title, skills, player }) => {
  return (
    <div className="mb-6">
      <h2 className="text-xl font-semibold mb-3 text-gray-100">{title}</h2>
      <div className="space-y-2">
        {skills.map((skill) => (
          <SkillCard
            key={skill.key}
            label={skill.label}
            value={player[skill.key]}
          />
        ))}
      </div>
    </div>
  );
};

export default CategorySection;


File: src\components\ErrorBoundary.tsx
================================================================================

// src/components/ErrorBoundary.tsx
import React, { Component, ErrorInfo, ReactNode } from 'react';
import ErrorFallback from './ErrorFallback';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught by error boundary:', error, errorInfo);
    this.props.onError?.(error, errorInfo);
  }

  private handleReset = () => {
    this.setState({ hasError: false, error: undefined });
  };

  public render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return (
        <ErrorFallback
          error={this.state.error}
          resetErrorBoundary={this.handleReset}
        />
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

File: src\components\ErrorFallback.tsx
================================================================================

// src/components/ErrorFallback.tsx
interface ErrorFallbackProps {
    error?: Error;
    resetErrorBoundary?: () => void;
  }
  
  const ErrorFallback: React.FC<ErrorFallbackProps> = ({ 
    error, 
    resetErrorBoundary 
  }) => {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900">
        <div className="text-center p-4 max-w-md">
          <h1 className="text-xl text-red-500 mb-2">
            Oops! Something went wrong
          </h1>
          <p className="text-gray-400 mb-4">
            {error?.message || 'Please try again or refresh the page'}
          </p>
          {resetErrorBoundary && (
            <button
              onClick={resetErrorBoundary}
              className="px-4 py-2 bg-emerald-500 text-white rounded-lg 
                       hover:bg-emerald-600 transition-colors"
            >
              Try Again
            </button>
          )}
        </div>
      </div>
    );
  };
  
  export default ErrorFallback;

File: src\components\FirestoreTest.jsx
================================================================================

// src/components/FirestoreTest.jsx

import React, { useEffect } from 'react';
import { db } from '../config/firebase';
import { collection, getDocs } from 'firebase/firestore';

const FirestoreTest = () => {
  useEffect(() => {
    const fetchData = async () => {
      try {
        const athletesCol = collection(db, 'athletes');
        const athletesSnapshot = await getDocs(athletesCol);
        const athletesList = athletesSnapshot.docs.map(doc => doc.data());
        console.log('Athletes:', athletesList);
      } catch (error) {
        console.error('Error fetching athletes:', error);
      }
    };

    fetchData();
  }, []);

  return (
    <div>
      <h2>Firestore Test</h2>
    </div>
  );
};

export default FirestoreTest;


File: src\components\FloatingActionButton.jsx
================================================================================

import React, { useState } from 'react';
import { Milestone } from 'lucide-react';

const FloatingActionButton = ({ onClick }) => {
  const [ripple, setRipple] = useState({ active: false, x: 0, y: 0 });

  const handleClick = (e) => {
    // Get click coordinates relative to button
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    // Trigger ripple
    setRipple({ active: true, x, y });
    
    // Reset ripple after animation
    setTimeout(() => setRipple({ active: false, x: 0, y: 0 }), 600);
    
    // Call the original onClick handler
    onClick();
  };

  return (
    <button
      onClick={handleClick}
      className="fixed bottom-6 right-6 bg-emerald-500 hover:bg-emerald-600 text-white p-3 rounded-full shadow-lg z-50 transition-colors duration-200 flex items-center justify-center overflow-hidden"
      aria-label="View Development Path"
    >
      <Milestone className="w-6 h-6" />
      {ripple.active && (
        <span
          className="absolute animate-ripple rounded-full bg-white/30"
          style={{
            left: ripple.x - 50,  // Center the 100px wide ripple
            top: ripple.y - 50,   // Center the 100px tall ripple
            width: '100px',
            height: '100px',
          }}
        />
      )}
    </button>
  );
};

export default FloatingActionButton;

File: src\components\HomeSection.jsx
================================================================================

// src/components/HomeSection.jsx

import React, { useState, useEffect } from 'react';
import RadarChart from './RadarChart';
import SwipeableInsights from './SwipeableInsights';
import SkillHierarchy from './SkillHierarchy';
import { computeCategoryAverages } from '../utils/helpers';

function HomeSection({ player }) {
  const [averages, setAverages] = useState({
    mental: 0,
    physical: 0,
    cutting: 0,
    handling: 0,
    throwing: 0,
    defensive: 0,
    offensive: 0,
  });

  useEffect(() => {
    const avg = computeCategoryAverages(player);
    setAverages(avg);
  }, [player]);

  // Radar chart data for 6 categories
  const radarLabels = ['Mental', 'Physical', 'Cutting', 'Handling', 'Throwing', 'Defense'];
  const radarDataValues = [
    averages.mental,
    averages.physical,
    averages.cutting,
    averages.handling,
    averages.throwing,
    averages.defensive,
  ];

  return (
    <div className="mx-auto space-y-6">
      {/* Key Insights (Top 3 strengths, etc.) */}
      <SwipeableInsights 
        player={player} 
        growthTargets={player.growth_targets || []}
      />

      {/* Main Stats Section */}
      <div className="grid gap-6 grid-cols-1 lg:grid-cols-2">
        {/* Radar Chart */}
        <div className="bg-gray-800 p-5 rounded-lg shadow-md">
          <h2 className="text-lg font-semibold text-gray-100 mb-4 mt-0">
            Category Averages
          </h2>
          <div className="w-full flex justify-center">
            <div className="w-full aspect-square max-w-[400px]">
              <RadarChart labels={radarLabels} dataValues={radarDataValues} />
            </div>
          </div>
        </div>

        {/* Skill Hierarchy */}
        <div className="bg-gray-800 p-5 rounded-lg shadow-md">
          <h2 className="text-lg font-semibold text-gray-100 mb-4 mt-0">
            Detailed Breakdown
          </h2>
          <div className="overflow-auto max-h-[400px] custom-scrollbar">
            <SkillHierarchy player={player} />
          </div>
        </div>
      </div>

      {/* Additional Info or Future Sections */}
      <div className="bg-gray-800 p-5 rounded-lg shadow-md">
        <h2 className="text-lg font-semibold text-gray-100 mb-4">
          Recent Progress
        </h2>
        <p className="text-gray-400 text-sm">
          Progress tracking section coming soon...
        </p>
      </div>
    </div>
  );
}

export default HomeSection;

File: src\components\InsightsSection.jsx
================================================================================

// src/components/InsightsSection.jsx

import React from 'react';
import { METADATA_KEYS } from '../utils/constants';

const InsightsSection = ({ player }) => {
  // Example logic: find top 3 skills (by numeric value)
  const skillEntries = Object.entries(player).filter(([key, val]) => {
    return typeof val === 'number' && !METADATA_KEYS.includes(key);
  });

  // Sort descending by value
  skillEntries.sort((a, b) => b[1] - a[1]);
  const topThree = skillEntries.slice(0, 3);

  return (
    <div className="mb-6">
      <h2 className="text-xl font-bold uppercase mb-2 text-gray-100">
        Key Insights
      </h2>
      <div className="bg-gray-800 p-4 rounded-lg shadow-md">
        <div className="text-gray-300 text-xs font-bold uppercase tracking-widest mb-2">
          <span className="font-semibold text-emerald-400">
            Top 3 Strengths:
          </span>
        </div>
        {topThree.map(([skillKey, skillValue]) => (
          <div key={skillKey} className="flex justify-between mb-1">
            <span className="capitalize text-gray-200">
              {skillKey.replace(/_/g, ' ')}
            </span>
            <span className="text-emerald-400 font-semibold">
              {skillValue}/10
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default InsightsSection;


File: src\components\InstallPrompt.jsx
================================================================================

import React, { useState, useEffect } from 'react';

export const InstallPrompt = () => {
  const [prompt, setPrompt] = useState(null);
  const [criteria, setCriteria] = useState({
    protocolCheck: false,
    serviceWorkerCheck: false,
    isAppInstalled: false,
    hasPromptBeenShown: false
  });

  useEffect(() => {
    // Check if we're on HTTPS or localhost
    const isSecureContext = window.isSecureContext || 
                          window.location.hostname === 'localhost' ||
                          window.location.protocol === 'https:';
    
    // Check for service worker support
    const hasServiceWorker = 'serviceWorker' in navigator;

    // Check if app is already installed
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone;
    const promptShownBefore = localStorage.getItem('installPromptShown') === 'true';

    console.log('Installation Criteria Checks:', {
      protocol: window.location.protocol,
      hostname: window.location.hostname,
      isSecureContext: isSecureContext,
      serviceWorkerAvailable: hasServiceWorker,
      serviceWorkerController: !!navigator.serviceWorker?.controller,
      isStandalone: isStandalone,
      hasPromptBeenShown: promptShownBefore
    });

    setCriteria({
      protocolCheck: isSecureContext,
      serviceWorkerCheck: hasServiceWorker,
      isAppInstalled: isStandalone,
      hasPromptBeenShown: promptShownBefore
    });

    const handleInstallPrompt = (e) => {
      e.preventDefault();
      console.log('Real install prompt captured');
      setPrompt(e);
    };

    window.addEventListener('beforeinstallprompt', handleInstallPrompt);
    window.addEventListener('appinstalled', () => {
      console.log('App has been installed');
      localStorage.setItem('installPromptShown', 'true');
    });

    return () => window.removeEventListener('beforeinstallprompt', handleInstallPrompt);
  }, []);

  // Check if all criteria are met
  const allCriteriaMet = Object.values(criteria).every(check => check);

  if (criteria.isAppInstalled || criteria.hasPromptBeenShown || !allCriteriaMet) {
    console.log('Installation criteria not met or app already installed:', criteria);
    return null;
  }

  return (
    <div className="fixed bottom-4 left-4 right-4 md:right-4 md:w-96 bg-gray-800 p-4 rounded-lg shadow-lg z-50 border border-gray-700">
      <div className="flex flex-col space-y-3">
        <div>
          <h3 className="text-gray-100 font-medium">Install Ultify</h3>
          <p className="text-gray-400 text-sm mt-1">
            Get the best experience and offline functionality by installing the app.
          </p>
          <div className="mt-2 space-y-1">
            <span className={`block text-xs ${criteria.protocolCheck ? 'text-emerald-400' : 'text-red-500'}`}>
              Protocol Check: {criteria.protocolCheck ? '✓ Passed' : '✗ Failed'}
            </span>
            <span className={`block text-xs ${criteria.serviceWorkerCheck ? 'text-emerald-400' : 'text-red-500'}`}>
              Service Worker Check: {criteria.serviceWorkerCheck ? '✓ Passed' : '✗ Failed'}
            </span>
            <span className={`block text-xs ${prompt ? 'text-emerald-400' : 'text-red-500'}`}>
              Install Prompt Captured: {prompt ? '✓ Yes' : '✗ No'}
            </span>
          </div>
        </div>

        <div className="flex justify-end space-x-3">
          <button
            onClick={() => {
              setPrompt(null);
              localStorage.setItem('installPromptShown', 'true');
            }}
            className="px-4 py-2 text-sm text-gray-300 hover:text-white transition-colors"
          >
            Not now
          </button>
          <button
            onClick={() => {
              if (prompt) {
                prompt.prompt();
                prompt.userChoice.then((result) => {
                  console.log('Install choice:', result.outcome);
                  if (result.outcome === 'accepted') {
                    alert('🎉 Installation started!');
                  } else {
                    alert('❌ Installation dismissed.');
                  }
                  localStorage.setItem('installPromptShown', 'true');
                  setPrompt(null);
                });
              }
            }}
            className="px-4 py-2 text-sm bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg transition-colors"
          >
            Install
          </button>
        </div>
      </div>
    </div>
  );
};


File: src\components\LoadingState.tsx
================================================================================

// export function LoadingState({ size = 'h-16 w-16', color = 'emerald-500', text = 'Loading...' }) {
//   return (
//     <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 z-50">
//       <div className="flex flex-col items-center gap-4">
//         {/* Loading Spinner */}
//         <div
//           className={`animate-spin rounded-full ${size} border-t-4 border-b-4 border-${color}`}
//           role="status"
//           aria-label="Loading"
//         />
//         {/* Loading Text */}
//         <div className="text-gray-300 text-lg">{text}</div>
//       </div>
//     </div>
//   );
// }

// src/components/LoadingState.tsx
interface LoadingStateProps {
  size?: string;
  color?: string;
  text?: string;
}

const defaultProps = {
  size: 'h-16 w-16',
  color: 'emerald-500',
  text: 'Loading...'
};

export const LoadingState: React.FC<LoadingStateProps> = (props) => {
  const { size, color, text } = { ...defaultProps, ...props };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 z-50">
      <div className="flex flex-col items-center gap-4">
        <div
          className={`animate-spin rounded-full border-t-4 border-b-4 border-${color} ${size}`}
          role="status"
          aria-label="Loading"
        />
        {text && <div className="text-gray-300 text-lg">{text}</div>}
      </div>
    </div>
  );
};

File: src\components\MiniRadial.jsx
================================================================================

// src/components/MiniRadial.jsx

import React from 'react';

// The ring color can be a gradient or solid color for the "filled" portion
// We'll do a conic gradient from 0 to (score/10)*360 degrees.

function MiniRadial({ score, icon, isActive }) {
  // Score out of 10. If your scale is different, adjust accordingly.
  const percentage = (score / 10) * 100; // 0 to 100
  const deg = (360 * percentage) / 100;  // 0 to 360

  // Active ring color vs. inactive ring color
  const ringColorActive = "rgba(16,185,129,1)";  // emerald-500
  const ringColorInactive = "rgba(107,114,128,1)"; // gray-500

  // Decide color: if isActive is true, use emerald-500, else maybe a duller color
  const ringColor = isActive ? ringColorActive : ringColorInactive;

  // Construct the conic gradient
  const ringStyle = {
    background: `
      conic-gradient(
        ${ringColor} 0deg,
        ${ringColor} ${deg}deg,
        rgba(75,85,99,0.2) ${deg}deg,
        rgba(75,85,99,0.2) 360deg
      )
    `,
  };

  return (
    <div className="relative w-12 h-12">
      {/* Outer ring */}
      <div
        className="w-12 h-12 rounded-full"
        style={ringStyle}
      ></div>

      {/* Inner circle (white or gray background) */}
      <div className="absolute top-[4px] left-[4px] w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center">
        {icon}
      </div>
    </div>
  );
}

export default MiniRadial;


File: src\components\OffensiveSection.jsx
================================================================================

// src/components/OffensiveSection.jsx

import React, { useState } from 'react';
import Tabs from './Tabs';
import CategorySection from './CategorySection';
import ThrowingSection from './ThrowingSection'; // NEW import

function OffensiveSection({ offensiveData, player }) {
  const [activeSubTab, setActiveSubTab] = useState('cutting');

  const subTabs = [
    { value: 'cutting', label: 'Cutting' },
    { value: 'handling', label: 'Handling' },
    { value: 'throwing', label: 'Throwing' },
  ];

  return (
    <div className="mb-6">
      {/* Offensive Sub-Tabs */}
      <Tabs
        tabs={subTabs}
        activeTab={activeSubTab}
        onChange={setActiveSubTab}
      />

      {activeSubTab === 'cutting' && (
        <CategorySection
          title="Cutting Skills"
          skills={offensiveData.cutting}
          player={player}
        />
      )}

      {activeSubTab === 'handling' && (
        <CategorySection
          title="Handling Skills"
          skills={offensiveData.handling}
          player={player}
        />
      )}

      {/* NEW: If sub-tab is throwing, render ThrowingSection */}
      {activeSubTab === 'throwing' && (
        <ThrowingSection
          throwingData={offensiveData.throwing}
          player={player}
        />
      )}
    </div>
  );
}

export default OffensiveSection;


File: src\components\OptimizedBackground.jsx
================================================================================

import React, { useState, useEffect } from 'react';

const OptimizedBackground = () => {
  const [loaded, setLoaded] = useState(false);

  useEffect(() => {
    // Check if we already have a preload link for any of our background images
    const existingPreload = document.querySelector('link[rel="preload"][href*="background"]');
    
    // Only add new preload if we don't already have one
    if (!existingPreload) {
      const isMobile = window.innerWidth < 768;

      const link = document.createElement('link');
      link.rel = 'preload';
      link.as = 'image';
      link.type = 'image/webp';

      if (isMobile) {
        link.href = '/images/background-mobileSm.webp';
        link.media = '(max-width: 767px)';
      } else {
        link.href = '/images/background-sm.webp';
        link.media = '(min-width: 768px)';
      }

      document.head.appendChild(link);

      return () => {
        if (link.parentNode) {
          link.parentNode.removeChild(link);
        }
      };
    }
  }, []);

  return (
    <>
      {/* Placeholder overlay while the main image loads */}
      <div
        className={`absolute inset-0 bg-gradient-to-b from-gray-800 to-gray-900 transition-opacity duration-500 ${
          loaded ? 'opacity-0' : 'opacity-100'
        }`}
      />

      <picture>
        {/* Desktop WebP variants */}
        <source
          srcSet="/images/background-lg.webp 1920w,
                  /images/background-md.webp 1280w,
                  /images/background-sm.webp 640w"
          sizes="(min-width: 1536px) 1920px,
                 (min-width: 1024px) 1280px,
                 (min-width: 768px) 960px,
                 640px"
          type="image/webp"
          media="(min-width: 768px)"
        />

        {/* Mobile WebP variants */}
        <source
          srcSet="/images/background-mobileLg.webp 1280w,
                  /images/background-mobileMd.webp 960w,
                  /images/background-mobileSm.webp 640w"
          sizes="(min-width: 640px) 960px,
                 640px"
          type="image/webp"
          media="(max-width: 767px)"
        />

        {/* Desktop JPEG fallback */}
        <source
          srcSet="/images/background-lg.jpg 1920w,
                  /images/background-md.jpg 1280w,
                  /images/background-sm.jpg 640w"
          sizes="(min-width: 1536px) 1920px,
                 (min-width: 1024px) 1280px,
                 (min-width: 768px) 960px,
                 640px"
          type="image/jpeg"
          media="(min-width: 768px)"
        />

        {/* Mobile JPEG fallback */}
        <source
          srcSet="/images/background-mobileLg.jpg 1280w,
                  /images/background-mobileMd.jpg 960w,
                  /images/background-mobileSm.jpg 640w"
          sizes="(min-width: 640px) 960px,
                 640px"
          type="image/jpeg"
          media="(max-width: 767px)"
        />

        <img
          src="/images/background-sm.jpg"
          alt="Background"
          className={`absolute inset-0 w-full h-full object-cover opacity-60 transition-opacity duration-500 ${
            loaded ? 'opacity-60' : 'opacity-0'
          }`}
          loading="eager"
          fetchPriority="high"
          width="1920"
          height="1080"
          onLoad={() => setLoaded(true)}
          style={{
            backgroundImage: `url('/images/background-placeholder.webp')`,
            backgroundSize: 'cover',
            backgroundPosition: 'center',
          }}
        />
      </picture>
    </>
  );
};

export default OptimizedBackground;


File: src\components\OverallScoreRing.jsx
================================================================================

// src/components/OverallScoreRing.jsx

import React from 'react';
import { Doughnut } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

const OverallScoreRing = ({ overallScore }) => {
  const score = parseFloat(overallScore);
  const maxScore = 10; // Adjust if your scale differs

  const data = {
    labels: ['Score', 'Remaining'],
    datasets: [
      {
        data: [score, maxScore - score],
        backgroundColor: ['#10b981', '#374151'], // emerald-500 & gray-700
        borderWidth: 0,
      },
    ],
  };

  const options = {
    cutout: '80%',
    plugins: {
      legend: { display: false },
      tooltip: { enabled: false },
    },
  };

  return (
    <div className="relative w-24 h-24 md:w-32 md:h-32 lg:w-40 lg:h-40">
      <Doughnut data={data} options={options} />
      {/* Centered Score Text */}
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-lg md:text-xl font-bold text-emerald-400">
          {overallScore}
        </span>
        <span className="text-xs md:text-sm text-gray-300">/10</span>
      </div>
    </div>
  );
};

export default OverallScoreRing;


File: src\components\ProfileHeader.jsx
================================================================================

import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import OverallScoreRing from './OverallScoreRing';
import OptimizedBackground from './OptimizedBackground';

const ProfileHeader = ({ 
  name, 
  email, 
  overallScore, 
  athletes, 
  selectedAthleteId, 
  onSelectAthlete,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);
  const navigate = useNavigate();

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const selectedAthlete = athletes?.find(a => a.id === selectedAthleteId);

  if (!selectedAthlete) {
    return (
      <div className="flex items-center justify-center h-56 bg-gray-800 rounded-lg">
        <p className="text-gray-300">Loading athlete data...</p>
      </div>
    );
  }

  const menuVariants = {
    closed: {
      opacity: 0,
      scaleY: 0,
      transition: { duration: 0.2 }
    },
    open: {
      opacity: 1,
      scaleY: 1,
      transition: { duration: 0.2 }
    }
  };

  const handleAthleteSelect = (athlete) => {
    onSelectAthlete(athlete.id);
    navigate(`/?id=${athlete.id}&name=${encodeURIComponent(athlete.metadata.name)}`);
    setIsOpen(false);
  };

  return (
    <div className="relative w-full h-56 md:h-64 lg:h-72 bg-gray-800 rounded-lg">
      {/* Background Image */}
      <OptimizedBackground />
      <div className="absolute inset-0 bg-black bg-opacity-40" />

      {/* Content */}
      <div className="relative z-10 flex flex-col items-center justify-center h-full px-4">
        <div className="text-center">
          <h1 className="text-2xl md:text-3xl font-semibold text-white">{name}</h1>
          <p className="text-sm md:text-base text-gray-300 mt-1">{email}</p>
        </div>
        <div className="mt-4">
          <OverallScoreRing overallScore={overallScore} />
        </div>
      </div>

      {/* Dropdown Container - Portal the dropdown menu */}
      <div 
        ref={dropdownRef} 
        className="absolute top-4 right-4 md:top-6 md:right-6"
        style={{ zIndex: 9999 }}
      >
        
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="flex items-center justify-center w-10 h-10 rounded-full 
                   bg-gray-800/50 backdrop-blur-sm hover:bg-gray-700 
                   transition-colors duration-200 focus:outline-none 
                   focus:ring-2 focus:ring-emerald-500 focus:ring-opacity-50"
          aria-expanded={isOpen}
          aria-haspopup="listbox"
          aria-controls="athlete-listbox"
        >
          <motion.div
            animate={{ rotate: isOpen ? 180 : 0 }}
            transition={{ duration: 0.2 }}
          >
            <ChevronDown className="w-5 h-5 text-white" />
          </motion.div>
        </button>

        <AnimatePresence>
          {isOpen && (
            <motion.div
              initial="closed"
              animate="open"
              exit="closed"
              variants={menuVariants}
              className="absolute right-0 mt-2 w-64 bg-gray-800 rounded-lg shadow-lg 
                       ring-1 ring-black ring-opacity-5 max-h-[calc(100vh-120px)]"
              style={{ 
                zIndex: 9999,
                transformOrigin: "top",
                top: "calc(100% + 0.5rem)" // Position directly below button
              }}
            >
              <ul
                id="athlete-listbox"
                role="listbox"
                aria-label="Select athlete"
                className="divide-y divide-gray-700 overflow-y-auto"
              >
                {athletes.map((athlete) => (
                  <li key={athlete.id} role="option" aria-selected={athlete.id === selectedAthleteId}>
                    <button
                      onClick={() => handleAthleteSelect(athlete)}
                      className={`w-full text-left px-4 py-3 text-sm ${
                        athlete.id === selectedAthleteId
                          ? 'bg-gray-700 text-white'
                          : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                      }`}
                    >
                      {athlete.metadata.name}
                    </button>
                  </li>
                ))}
              </ul>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default ProfileHeader;

File: src\components\PWADebug.jsx
================================================================================

import React, { useEffect, useState } from 'react';

const PWADebug = () => {
  const [debug, setDebug] = useState({
    secureContext: false,
    protocol: '',
    hostname: '',
    browserSupport: false,
    manifestPresent: false,
    serviceWorkerSupport: false,
    serviceWorkerActive: false
  });

  useEffect(() => {
    const checkPWASupport = async () => {
      // Check secure context and protocol
      const protocol = window.location.protocol;
      const hostname = window.location.hostname;
      const isSecure = window.isSecureContext;

      // Check manifest
      const manifest = document.querySelector('link[rel="manifest"]');

      // Check service worker
      const swSupport = 'serviceWorker' in navigator;
      let swActive = false;
      if (swSupport) {
        const registration = await navigator.serviceWorker.getRegistration();
        swActive = !!registration?.active;
      }

      setDebug({
        secureContext: isSecure,
        protocol,
        hostname,
        browserSupport: 'BeforeInstallPromptEvent' in window,
        manifestPresent: !!manifest,
        serviceWorkerSupport: swSupport,
        serviceWorkerActive: swActive
      });
    };

    checkPWASupport();
  }, []);

  return (
    <div className="p-4 bg-gray-800 rounded-lg shadow">
      <h2 className="text-lg font-bold text-white mb-4">PWA Debug Info</h2>
      <div className="space-y-2">
        <div className="flex justify-between">
          <span className="text-gray-400">Secure Context:</span>
          <span className={debug.secureContext ? 'text-green-400' : 'text-red-400'}>
            {debug.secureContext ? 'Yes' : 'No'}
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Protocol:</span>
          <span className={debug.protocol === 'https:' ? 'text-green-400' : 'text-yellow-400'}>
            {debug.protocol}
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Hostname:</span>
          <span className="text-white">{debug.hostname}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Browser Support:</span>
          <span className={debug.browserSupport ? 'text-green-400' : 'text-red-400'}>
            {debug.browserSupport ? 'Yes' : 'No'}
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Manifest Present:</span>
          <span className={debug.manifestPresent ? 'text-green-400' : 'text-red-400'}>
            {debug.manifestPresent ? 'Yes' : 'No'}
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Service Worker Support:</span>
          <span className={debug.serviceWorkerSupport ? 'text-green-400' : 'text-red-400'}>
            {debug.serviceWorkerSupport ? 'Yes' : 'No'}
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Service Worker Active:</span>
          <span className={debug.serviceWorkerActive ? 'text-green-400' : 'text-red-400'}>
            {debug.serviceWorkerActive ? 'Yes' : 'No'}
          </span>
        </div>
      </div>
    </div>
  );
};

export default PWADebug;

File: src\components\RadarChart.jsx
================================================================================

// src/components/RadarChart.jsx

import React from 'react';
import { Radar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend
);

/**
 * RadarChart Component
 * @param {Object} props - Component props
 * @param {Array} props.labels - Labels for the radar chart axes
 * @param {Array} props.dataValues - Data values for each axis
 * @param {Function} props.onDataPointClick - Callback when a data point is clicked
 */
const RadarChart = ({ labels, dataValues, onDataPointClick }) => {
  const data = {
    labels,
    datasets: [
      {
        label: 'Category Scores',
        data: dataValues,
        backgroundColor: 'rgba(16, 185, 129, 0.2)',
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 2,
        pointBackgroundColor: 'rgba(16, 185, 129, 1)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(16, 185, 129, 1)',
        pointRadius: 3, // Reduced from 5 to 3
        pointHoverRadius: 7, // Kept or adjusted as needed
        pointHitRadius: 10, // Maintained for consistent touch area
      },
    ],
  };

  const options = {
    responsive: true,
    maintainAspectRatio: false, // Allows the chart to fill the container
    scales: {
      r: {
        beginAtZero: true,
        max: 10,
        ticks: {
          stepSize: 2,
          display: false,
          backdropColor: 'transparent',
        },
        grid: {
          color: '#4b5563',
          lineWidth: 1,
        },
        angleLines: {
          color: '#4b5563',
          lineWidth: 1,
        },
        pointLabels: {
          color: '#e2e8f0',
          font: {
            size: 11,
            family: 'Inter',
          },
          padding: 8,
        },
      },
    },
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        enabled: true,
        backgroundColor: 'rgba(17, 24, 39, 0.95)',
        padding: 8,
        titleFont: {
          size: 12,
          family: 'Inter',
        },
        bodyFont: {
          size: 11,
          family: 'Inter',
        },
        displayColors: false,
        callbacks: {
          title: (items) => labels[items[0].dataIndex],
          label: (item) => `${item.formattedValue}/10`,
        },
      },
    },
    onClick: (event, elements) => {
      if (elements.length > 0 && onDataPointClick) {
        const { index, datasetIndex } = elements[0];
        const label = labels[index];
        const value = dataValues[index];
        onDataPointClick({ label, value, index, datasetIndex });
      }
    },
    // Optional: Change cursor to pointer on hover
    onHover: (event, elements) => {
      const target = event.native.target;
      if (elements.length > 0) {
        target.style.cursor = 'pointer';
      } else {
        target.style.cursor = 'default';
      }
    },
  };

  return (
    <div className="w-full h-full">
      <Radar data={data} options={options} />
    </div>
  );
};

export default RadarChart;


File: src\components\RadialTabs.jsx
================================================================================

// src/components/RadialTabs.jsx

import React from 'react';
import { motion } from 'framer-motion';
import { Home, Brain, Shield, Sword, Activity } from 'lucide-react';

// Utility to merge class names conditionally
const cn = (...classes) => classes.filter(Boolean).join(' ');

// Circular progress component with an icon in the center
const RadialProgress = ({ value = 0, isActive, children }) => {
  const percentage = Math.min(Math.max((value / 10) * 100, 0), 100);
  
  return (
    <div className="relative w-16 h-16">
      {/* Background Circle */}
      <div className="absolute inset-0 rounded-full bg-gray-800" />
      
      {/* Progress Circle */}
      <svg className="absolute inset-0 w-full h-full -rotate-90">
        <circle
          cx="32"
          cy="32"
          r="28"
          strokeWidth="3"
          fill="none"
          className="stroke-gray-700"
        />
        <circle
          cx="32"
          cy="32"
          r="28"
          strokeWidth="3"
          fill="none"
          strokeDasharray={`${percentage * 1.76} 176`}
          className={cn(
            "transition-all duration-300",
            isActive ? "stroke-emerald-500" : "stroke-gray-600"
          )}
        />
      </svg>
      
      {/* Icon */}
      <div className="absolute inset-0 flex items-center justify-center">
        <div className={cn(
          "p-3 rounded-full transition-colors",
          isActive ? "bg-emerald-500 text-white" : "bg-gray-700 text-gray-300"
        )}>
          {children}
        </div>
      </div>
    </div>
  );
};

// Each radial tab button
const TabButton = ({ isActive, onClick, icon, label, score = 0 }) => {
  return (
    <motion.button
      onClick={onClick}
      className="flex flex-col items-center space-y-2 group"
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.95 }}
    >
      <RadialProgress value={score} isActive={isActive}>
        {icon}
      </RadialProgress>
      
      <span className={cn(
        "text-xs font-medium transition-colors",
        isActive ? "text-emerald-400" : "text-gray-400 group-hover:text-gray-300"
      )}>
        {label}
      </span>
    </motion.button>
  );
};

// Radial Tabs Navigation Component
const RadialTabs = ({ activeTab = 'home', onChangeTab = () => {}, averages = {} }) => {
  // Safely get the score for each tab
  const getScore = (key) => (averages && typeof averages[key] === 'number') ? averages[key] : 0;

  // Tabs Configuration
  const TABS = [
    { value: 'home', label: 'Overview', icon: <Home className="w-5 h-5" />, score: getScore('home') },
    { value: 'physical', label: 'Physical', icon: <Activity className="w-5 h-5" />, score: getScore('physical') },
    { value: 'offensive', label: 'Offensive', icon: <Sword className="w-5 h-5" />, score: getScore('offensive') },
    { value: 'defensive', label: 'Defensive', icon: <Shield className="w-5 h-5" />, score: getScore('defensive') },
    { value: 'mental', label: 'Mental', icon: <Brain className="w-5 h-5" />, score: getScore('mental') },
  ];

  return (
    <div className="relative">
      {/* Navigation Background */}
      <div className="absolute inset-0 bg-gradient-to-b from-gray-900 to-gray-800" />
      
      {/* Navigation Buttons */}
      <div className="relative px-6 py-4">
        <div className="flex items-center justify-between max-w-4xl mx-auto">
          {TABS.map((tab) => (
            <TabButton
              key={tab.value}
              isActive={activeTab === tab.value}
              onClick={() => onChangeTab(tab.value)}
              icon={tab.icon}
              label={tab.label}
              score={tab.score}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default RadialTabs;


File: src\components\RatingBar.jsx
================================================================================

// src/components/RatingBar.jsx

import React from 'react';

const RatingBar = ({ value, max = 10 }) => {
  const percentage = (value / max) * 100;
  return (
    <div className="w-full bg-gray-700 rounded-full h-2.5 overflow-hidden">
      <div
        className="h-2.5 bg-emerald-500 transition-all duration-300"
        style={{ width: `${percentage}%` }}
      ></div>
    </div>
  );
};

export default RatingBar;


File: src\components\RingChart.jsx
================================================================================

// src/components/RingChart.jsx

import React from 'react';

const RingChart = ({ label, value }) => {
  const percentage = (value / 10) * 100;

  return (
    <div className="relative w-32 h-32">
      <svg className="w-full h-full" viewBox="0 0 36 36">
        <circle
          className="text-gray-700"
          strokeWidth="3.8"
          stroke="currentColor"
          fill="transparent"
          r="16"
          cx="18"
          cy="18"
        />
        <circle
          className="text-emerald-400"
          strokeWidth="3.8"
          strokeDasharray={`${percentage}, 100`}
          stroke="currentColor"
          fill="transparent"
          r="16"
          cx="18"
          cy="18"
          strokeLinecap="round"
        />
      </svg>
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-lg font-semibold text-gray-100">{value}/10</span>
        <span className="text-sm text-gray-400">{label}</span>
      </div>
    </div>
  );
};

export default RingChart;


File: src\components\RoadmapModal.jsx
================================================================================

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, Trophy, Target, Calendar, 
  Dumbbell, Wind, Users, CheckCircle2
} from 'lucide-react';

const ActionTarget = ({ icon: Icon, title, frequency, progress, total, tags }) => (
  <div className="bg-gray-700/50 rounded-lg p-4 space-y-2">
    <div className="flex items-start gap-3">
      <div className="mt-1">
        <Icon className="w-5 h-5 text-emerald-400" />
      </div>
      <div className="flex-1">
        <h4 className="font-medium text-gray-200">{title}</h4>
        <p className="text-sm text-gray-400">{frequency}</p>
        
        {/* Progress Section */}
        <div className="mt-2">
          <div className="flex justify-between text-xs text-gray-400 mb-1">
            <span>Progress</span>
            <span>{progress} / {total}</span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-1.5">
            <div 
              className="bg-emerald-400 h-1.5 rounded-full transition-all duration-300"
              style={{ width: `${(progress / total) * 100}%` }}
            />
          </div>
        </div>

        {/* Tags */}
        <div className="mt-2 flex flex-wrap gap-2">
          {tags.map((tag, index) => (
            <span 
              key={index}
              className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-700 text-emerald-400"
            >
              {tag}
            </span>
          ))}
        </div>
      </div>

      {/* Completion Status */}
      {progress >= total && (
        <CheckCircle2 className="w-5 h-5 text-emerald-400 flex-shrink-0" />
      )}
    </div>
  </div>
);

const RoadmapModal = ({ isOpen, onClose, player }) => (
  <AnimatePresence>
    {isOpen && (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
      >
        <motion.div
          initial={{ y: '100%' }}
          animate={{ y: 0 }}
          exit={{ y: '100%' }}
          transition={{ type: 'spring', damping: 25 }}
          className="absolute bottom-0 left-0 right-0 bg-gray-900 rounded-t-2xl max-h-[90vh] overflow-auto"
        >
          {/* Header */}
          <div className="sticky top-0 bg-gray-900/95 backdrop-blur-sm p-4 border-b border-gray-800 flex items-center justify-between">
            <h2 className="text-lg font-semibold text-white">Development Roadmap</h2>
            <button
              onClick={onClose}
              className="p-1 rounded-lg hover:bg-gray-800"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Content */}
          <div className="p-4 space-y-6">
            {/* Weekly Action Targets */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Calendar className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">THIS WEEK'S TARGETS</h3>
              </div>
              <div className="space-y-3">
                <ActionTarget 
                  icon={Dumbbell}
                  title="Endurance Training"
                  frequency="3 sessions per week"
                  progress={2}
                  total={3}
                  tags={['Sprints', 'Distance Running', 'HIIT']}
                />
                
                <ActionTarget 
                  icon={Wind}
                  title="Focused Throwing Practice"
                  frequency="3 hours per week"
                  progress={1.5}
                  total={3}
                  tags={['Breaking the Mark', 'Release Points', 'Quick Release']}
                />

                <ActionTarget 
                  icon={Users}
                  title="Joint Training Session"
                  frequency="1 session this week"
                  progress={0}
                  total={1}
                  tags={['Handler Movement', 'Field Vision', 'Team Dynamics']}
                />
              </div>
            </section>

            {/* Monthly Goals */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Target className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">MONTHLY GOALS</h3>
              </div>
              <div className="bg-gray-800 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <span className="w-2 h-2 rounded-full bg-emerald-400 mt-2" />
                  <div>
                    <h4 className="font-medium text-gray-200">Master New Throws</h4>
                    <p className="text-sm text-gray-400">Focus on specialty throws and situations</p>
                    <div className="mt-2">
                      <div className="flex justify-between text-xs text-gray-400 mb-1">
                        <span>Progress</span>
                        <span>60%</span>
                      </div>
                      <div className="w-full bg-gray-700 rounded-full h-1.5">
                        <div className="bg-emerald-400 h-1.5 rounded-full w-3/5" />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>

            {/* Development Path */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Trophy className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">DEVELOPMENT PATH</h3>
              </div>
              <div className="bg-gray-800 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <span className="w-2 h-2 rounded-full bg-emerald-400 mt-2" />
                  <div>
                    <h4 className="font-medium text-gray-200">Handler Certification</h4>
                    <p className="text-sm text-gray-400">Complete advanced handler training program</p>
                  </div>
                </div>
              </div>
            </section>
          </div>

          {/* Action Buttons */}
          <div className="sticky bottom-0 bg-gray-900/95 backdrop-blur-sm p-4 border-t border-gray-800">
            <div className="flex gap-3">
              <button className="flex-1 bg-gray-800 text-white py-3 rounded-lg font-medium">
                Log Progress
              </button>
              <button className="flex-1 bg-emerald-500 text-white py-3 rounded-lg font-medium">
                Complete Target
              </button>
            </div>
          </div>
        </motion.div>
      </motion.div>
    )}
  </AnimatePresence>
);

export default RoadmapModal;

File: src\components\RootErrorBoundary.tsx
================================================================================

// src/components/RootErrorBoundary.tsx
import React, { Component, ErrorInfo, ReactNode } from 'react';
import ErrorFallback from './ErrorFallback';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
  errorInfo?: ErrorInfo;
}

class RootErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    // Log error to your error reporting service
    console.error('Root level error:', error);
    console.error('Error info:', errorInfo);
    
    this.setState({
      errorInfo
    });
  }

  private handleReset = () => {
    // Reset error state and reload app
    this.setState({ hasError: false, error: undefined, errorInfo: undefined });
    window.location.reload();
  };

  public render() {
    if (this.state.hasError) {
      return (
        <ErrorFallback
          error={this.state.error}
          resetErrorBoundary={this.handleReset}
        />
      );
    }

    return this.props.children;
  }
}

export default RootErrorBoundary;

File: src\components\SkillCard.jsx
================================================================================

// src/components/SkillCard.jsx

import React from 'react';
import RatingBar from './RatingBar';

const SkillCard = ({ label, value }) => {
  return (
    <div className="flex items-center bg-gray-800 rounded-lg p-3 shadow-sm">
      <div className="flex-1">
        <div className="text-sm font-medium text-gray-100 mb-1">
          {label}
        </div>
        <RatingBar value={value} />
      </div>
      <div className="ml-4 text-emerald-400 font-bold text-lg">
        {value}
      </div>
    </div>
  );
};

export default SkillCard;


File: src\components\SkillHierarchy.jsx
================================================================================

// src/components/SkillHierarchy.jsx
import React from 'react';
import { ChevronRight } from 'lucide-react';
import { averageOfKeys, computeCategoryAverages, computeOverallScore } from '../utils/helpers';

const SkillBar = ({ value, maxValue = 10 }) => (
  <div className="w-24 bg-gray-700 rounded-full h-1.5 overflow-hidden">
    <div
      className="h-1.5 bg-emerald-500 transition-all duration-300"
      style={{ width: `${(value / maxValue) * 100}%` }}
    />
  </div>
);

const SkillNode = ({ label, value, depth = 0, children }) => {
  const hasChildren = React.Children.count(children) > 0;
  
  return (
    <div className="space-y-2">
      <div className={`flex items-center gap-3 ${hasChildren ? 'mb-2' : ''}`}>
        {depth > 0 && (
          <div className="flex items-center">
            <div 
              className="w-4 h-px bg-gray-700"
              style={{ marginLeft: `${(depth - 1) * 16}px` }}
            />
            <ChevronRight className="w-4 h-4 text-gray-600" />
          </div>
        )}
        
        <div className="flex-1 flex items-center justify-between">
          <span className="text-sm font-medium text-gray-300">{label}</span>
          <div className="flex items-center gap-3">
            <SkillBar value={value} />
            <span className="text-sm font-semibold text-emerald-400 w-8">
              {value.toFixed(1)}
            </span>
          </div>
        </div>
      </div>
      
      {hasChildren && (
        <div className="space-y-2">
          {children}
        </div>
      )}
    </div>
  );
};

const SkillHierarchy = ({ player }) => {
  // Get all category averages using helper function
  const categoryAverages = computeCategoryAverages(player);
  const overallScore = computeOverallScore(player);

  // Compute throwing subcategory averages (not included in helpers)
  const throwingSubcategories = {
    backhand: [
      'backhand_power', 'backhand_accuracy', 'backhand_quick_release',
      'backhand_release_variations', 'backhand_against_wind',
      'backhand_against_difficult_marks', 'backhand_tempo_control'
    ],
    forehand: [
      'forehand_power', 'forehand_accuracy', 'forehand_quick_release',
      'forehand_release_variations', 'forehand_against_wind',
      'forehand_against_difficult_marks', 'forehand_tempo_control'
    ],
    specialty: [
      'specialty_power', 'specialty_accuracy', 'specialty_quick_release',
      'specialty_release_variations', 'specialty_against_wind',
      'specialty_against_difficult_marks', 'specialty_tempo_control'
    ],
    hucking: [
      'hucking_confidence', 'hucking_shape_control',
      'hucking_tempo_control', 'hucking_placement'
    ]
  };

  const throwingAverages = {
    backhand: averageOfKeys(player, throwingSubcategories.backhand),
    forehand: averageOfKeys(player, throwingSubcategories.forehand),
    specialty: averageOfKeys(player, throwingSubcategories.specialty),
    hucking: averageOfKeys(player, throwingSubcategories.hucking)
  };

  return (
    <div className="space-y-4">
      <SkillNode label="Overall" value={overallScore}>
        <SkillNode label="Physical" value={categoryAverages.physical} depth={1} />
        <SkillNode label="Mental" value={categoryAverages.mental} depth={1} />
        <SkillNode label="Defensive" value={categoryAverages.defensive} depth={1} />
        <SkillNode label="Offensive" value={categoryAverages.offensive} depth={1}>
          <SkillNode label="Cutting" value={categoryAverages.cutting} depth={2} />
          <SkillNode label="Handling" value={categoryAverages.handling} depth={2} />
          <SkillNode label="Throwing" value={categoryAverages.throwing} depth={2}>
            <SkillNode label="Backhand" value={throwingAverages.backhand} depth={3} />
            <SkillNode label="Forehand" value={throwingAverages.forehand} depth={3} />
            <SkillNode label="Specialty" value={throwingAverages.specialty} depth={3} />
            <SkillNode label="Hucking" value={throwingAverages.hucking} depth={3} />
          </SkillNode>
        </SkillNode>
      </SkillNode>
    </div>
  );
};

export default SkillHierarchy;

File: src\components\SwipeableInsights.jsx
================================================================================

import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence, useAnimation } from 'framer-motion';

const SWIPE_THRESHOLD = 30;
const VELOCITY_THRESHOLD = 200;

const InsightsCard = ({ title, data = [], subtitle }) => (
  <div className="bg-gray-800 p-4 rounded-lg shadow-md w-full">
    <div className="text-gray-300 text-xs font-bold uppercase tracking-widest mb-2">
      <span className="font-semibold text-emerald-400">{title}</span>
      {subtitle && (
        <span className="block text-gray-400 text-xs mt-1 normal-case">
          {subtitle}
        </span>
      )}
    </div>
    {data.map(([skillKey, skillValue], index) => (
      <div key={`${skillKey}-${index}`} className="flex justify-between mb-1">
        <span className="capitalize text-gray-200">
          {skillKey.replace(/_/g, ' ')}
        </span>
        <span className="text-emerald-400 font-semibold">
          {typeof skillValue === 'number' ? `${skillValue}/10` : 'N/A'}
        </span>
      </div>
    ))}
  </div>
);

const SwipeableInsights = ({ player, growthTargets = [] }) => {

    const [currentIndex, setCurrentIndex] = useState(0);
    const [isDragging, setIsDragging] = useState(false);
    const controls = useAnimation();
    const [containerWidth, setContainerWidth] = useState(0);
    const containerRef = useRef(null);
  
    const growthTargetPairs = growthTargets
    .map(targetKey => [
      targetKey.replace(/_/g, ' '),  
      player.skills[targetKey] || 0  // Access skills through player.skills
    ])
    .filter(([_, value]) => typeof value === 'number'); 
  
    useEffect(() => {
      const updateWidth = () => {
        if (containerRef.current) {
          setContainerWidth(containerRef.current.offsetWidth);
        }
      };
      
      updateWidth();
      const resizeObserver = new ResizeObserver(updateWidth);
      
      if (containerRef.current) {
        resizeObserver.observe(containerRef.current);
      }
      
      return () => resizeObserver.disconnect();
    }, []);
  
    const getSortedSkills = () => {
        // Change to access player.skills instead of player directly
        const skillEntries = Object.entries(player.skills)
          .filter(([key, val]) => typeof val === 'number' && !key.includes('id'))
          .sort((a, b) => b[1] - a[1]);
        return skillEntries;
      };
  
    // Call getSortedSkills once and store result
    const sortedSkills = getSortedSkills();
  
    const cards = [
      {
        title: 'Current Growth Targets',
        data: growthTargetPairs,
        subtitle: growthTargetPairs.length === 0 ? 'No growth targets set' : null
      },
      {
        title: 'Top 3 Strengths',
        data: sortedSkills.slice(0, 3)
      },
      {
        title: 'Areas for Improvement',
        data: [...sortedSkills].reverse().slice(0, 3)
      }
    ];

  const snapToIndex = (index) => {
    controls.start({
      x: -index * containerWidth,
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 40,
        mass: 0.8,
        restSpeed: 0.5,
        restDelta: 0.5
      }
    }).then(() => {
      setIsDragging(false);
    });
  };

  const handleDragStart = () => {
    setIsDragging(true);
  };

  const handleDragEnd = (event, info) => {
    const swipe = info.offset.x;
    const velocity = info.velocity.x;
    
    const shouldSwipe = Math.abs(swipe) > SWIPE_THRESHOLD || Math.abs(velocity) > VELOCITY_THRESHOLD;
    
    if (shouldSwipe) {
      const direction = swipe > 0 ? -1 : 1;
      const nextIndex = currentIndex + direction;
      
      if (nextIndex >= 0 && nextIndex < cards.length) {
        setCurrentIndex(nextIndex);
        snapToIndex(nextIndex);
      } else {
        snapToIndex(currentIndex);
      }
    } else {
      snapToIndex(currentIndex);
    }
  };

  const handleDotClick = (index) => {
    if (!isDragging) {
      setCurrentIndex(index);
      snapToIndex(index);
    }
  };

  return (
    <div className="mb-6">
      <h2 className="text-xl font-bold uppercase mb-3 text-gray-100">
        Key Insights
      </h2>
      
      <div ref={containerRef} className="relative insights-container overflow-hidden bg-gray-800 rounded-lg shadow-md">
        <AnimatePresence initial={false}>
          <motion.div
            className="flex"
            style={{ width: `${cards.length * 100}%` }}
            drag="x"
            dragConstraints={{
              left: -containerWidth * (cards.length - 1),
              right: 0
            }}
            dragElastic={0.1}
            dragMomentum={false}
            onDragStart={handleDragStart}
            onDragEnd={handleDragEnd}
            animate={controls}
            initial={{ x: 0 }}
          >
            {cards.map((card, index) => (
              <div
                key={`card-${index}`}
                className="flex-shrink-0"
                style={{ width: containerWidth }}
              >
                <InsightsCard 
                  {...card}
                  key={`insight-${index}`} 
                />
              </div>
            ))}
          </motion.div>
        </AnimatePresence>
      </div>

      {/* Navigation Dots */}
      <div className="flex justify-center mt-4 space-x-3">
        {cards.map((_, index) => (
          <button
            key={`dot-${index}`}
            onClick={() => handleDotClick(index)}
            className={`w-2 h-2 rounded-full transition-all duration-200 ${
              index === currentIndex 
                ? 'bg-emerald-400 scale-110' 
                : 'bg-gray-600 hover:bg-gray-500'
            }`}
            disabled={isDragging}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    </div>
  );
};

export default SwipeableInsights;

File: src\components\Tabs.jsx
================================================================================

// src/components/Tabs.jsx

import React from 'react';

const Tabs = ({ tabs, activeTab, onChange }) => {
  return (
    <div className="flex justify-between bg-gray-800 p-1 rounded-lg gap-1 mb-4">
      {tabs.map((tab) => (
        <button
          key={tab.value}
          onClick={() => onChange(tab.value)}
          className={
            "flex-1 py-2 text-sm font-medium rounded-md transition-colors " +
            (activeTab === tab.value
              ? "bg-emerald-500 text-gray-900 shadow"
              : "text-gray-300 hover:bg-gray-700")
          }
        >
          {tab.label}
        </button>
      ))}
    </div>
  );
};

export default Tabs;


File: src\components\ThrowingSection.jsx
================================================================================

// src/components/ThrowingSection.jsx

import React, { useState } from 'react';
import Tabs from './Tabs';
import CategorySection from './CategorySection';

function ThrowingSection({ throwingData, player }) {
  // Sub-sub tab state
  const [activeThrowTab, setActiveThrowTab] = useState('backhand');

  const throwTabs = [
    { value: 'backhand', label: 'Backhand' },
    { value: 'forehand', label: 'Forehand' },
    { value: 'specialty', label: 'Specialty' },
    { value: 'hucking', label: 'Hucking' },
  ];

  return (
    <div className="mb-4">
      {/* Throwing sub-sub tabs */}
      <Tabs
        tabs={throwTabs}
        activeTab={activeThrowTab}
        onChange={setActiveThrowTab}
      />

      {/* Conditionally render the relevant CategorySection */}
      {activeThrowTab === 'backhand' && (
        <CategorySection
          title="Backhand Skills"
          skills={throwingData.backhand}
          player={player}
        />
      )}
      {activeThrowTab === 'forehand' && (
        <CategorySection
          title="Forehand Skills"
          skills={throwingData.forehand}
          player={player}
        />
      )}
      {activeThrowTab === 'specialty' && (
        <CategorySection
          title="Specialty Skills"
          skills={throwingData.specialty}
          player={player}
        />
      )}
        {activeThrowTab === 'hucking' && (
        <CategorySection
          title="Hucking Skills"
          skills={throwingData.hucking}
          player={player}
        />
        )}
    </div>
  );
}

export default ThrowingSection;


File: src\config\env.ts
================================================================================

// src/config/env.ts
import { EnvironmentVariables } from '../types/environment';

const requiredEnvVars = [
  'REACT_APP_FIREBASE_API_KEY',
  'REACT_APP_FIREBASE_AUTH_DOMAIN',
  'REACT_APP_FIREBASE_PROJECT_ID',
  'REACT_APP_FIREBASE_STORAGE_BUCKET',
  'REACT_APP_FIREBASE_MESSAGING_SENDER_ID',
  'REACT_APP_FIREBASE_APP_ID',
] as const;

const validateEnv = (): void => {
  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      throw new Error(`Missing required environment variable: ${envVar}`);
    }
  }
};

export const getEnvConfig = (): Readonly<EnvironmentVariables> => {
  validateEnv();

  return {
    NODE_ENV: process.env.NODE_ENV || 'development',
    REACT_APP_FIREBASE_API_KEY: process.env.REACT_APP_FIREBASE_API_KEY!,
    REACT_APP_FIREBASE_AUTH_DOMAIN: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN!,
    REACT_APP_FIREBASE_PROJECT_ID: process.env.REACT_APP_FIREBASE_PROJECT_ID!,
    REACT_APP_FIREBASE_STORAGE_BUCKET: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET!,
    REACT_APP_FIREBASE_MESSAGING_SENDER_ID: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID!,
    REACT_APP_FIREBASE_APP_ID: process.env.REACT_APP_FIREBASE_APP_ID!,
    REACT_APP_FIREBASE_MEASUREMENT_ID: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID || '',
    PUBLIC_URL: process.env.PUBLIC_URL || '',
  } as const;
};

File: src\config\firebase.ts
================================================================================

// src/config/firebase.ts
import { initializeApp, FirebaseApp } from "firebase/app";
import { Analytics, getAnalytics } from "firebase/analytics";
import { Auth, getAuth } from "firebase/auth";
import { Firestore, getFirestore } from "firebase/firestore";
import { getEnvConfig } from './env';

// Firebase instance type definitions
interface FirebaseInstances {
  app: FirebaseApp | null;
  analytics: Analytics | null;
  auth: Auth | null;
  db: Firestore | null;
}

// Create a singleton instances object
const instances: FirebaseInstances = {
  app: null,
  analytics: null,
  auth: null,
  db: null
};

// Get environment variables
const env = getEnvConfig();

// Firebase configuration with environment variables
const firebaseConfig = {
  apiKey: env.REACT_APP_FIREBASE_API_KEY,
  authDomain: env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: env.REACT_APP_FIREBASE_APP_ID,
  measurementId: env.REACT_APP_FIREBASE_MEASUREMENT_ID
};

/**
 * Initializes Firebase services.
 * Ensures that Firebase is initialized only once.
 * 
 * @returns {FirebaseApp} The initialized Firebase app instance.
 * @throws {Error} If initialization fails
 */
export const initializeFirebase = (): FirebaseApp => {
  try {
    if (!instances.app) {
      // Initialize Firebase App
      instances.app = initializeApp(firebaseConfig);
      
      // Initialize Firebase Authentication
      instances.auth = getAuth(instances.app);
      
      // Initialize Firestore
      instances.db = getFirestore(instances.app);
      
      // Defer Analytics initialization
      if (typeof window !== 'undefined' && env.NODE_ENV === 'production') {
        setTimeout(() => {
          try {
            instances.analytics = getAnalytics(instances.app!);
          } catch (error) {
            console.warn('Analytics initialization failed:', error);
          }
        }, 2000);
      }
    }

    return instances.app;
  } catch (error) {
    console.error('Firebase initialization failed:', error);
    throw error;
  }
};

// Initialize Firebase immediately
initializeFirebase();

// Export Firebase services with type safety
export const getFirebaseInstances = () => {
  if (!instances.app) {
    throw new Error('Firebase has not been initialized. Call initializeFirebase first.');
  }
  
  return {
    app: instances.app,
    auth: instances.auth!,
    db: instances.db!,
    analytics: instances.analytics
  };
};

// Export individual services for backward compatibility
export const { app, auth, db } = getFirebaseInstances();

File: src\contexts\AuthContext.js
================================================================================

// src/contexts/AuthContext.js
import React, { createContext, useContext, useState, useEffect } from 'react';
import { getAuth } from 'firebase/auth';
import { initializeFirebase } from '../config/firebase';
import { LoadingState } from '../components/LoadingState'; // adjust import path if needed


const AuthContext = createContext({});

// Lazy imports for auth methods
const lazyImportAuth = () => import('firebase/auth').then(module => ({
  signInWithEmailAndPassword: module.signInWithEmailAndPassword,
  createUserWithEmailAndPassword: module.createUserWithEmailAndPassword,
  signInWithPopup: module.signInWithPopup,
  GoogleAuthProvider: module.GoogleAuthProvider,
  signOut: module.signOut,
  sendPasswordResetEmail: module.sendPasswordResetEmail
}));

export function useAuth() {
  return useContext(AuthContext);
}

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [auth, setAuth] = useState(null);

  // Initialize Firebase and Auth lazily
  useEffect(() => {
    const initAuth = async () => {
      const app = initializeFirebase();
      const auth = getAuth(app);
      setAuth(auth);
      
      const { onAuthStateChanged } = await import('firebase/auth');
      const unsubscribe = onAuthStateChanged(auth, (user) => {
        setUser(user);
        setLoading(false);
      });

      return unsubscribe;
    };

    initAuth();
  }, []);

  // Lazy auth methods
  const login = async (email, password) => {
    const { signInWithEmailAndPassword } = await lazyImportAuth();
    return signInWithEmailAndPassword(auth, email, password);
  };

  const signup = async (email, password) => {
    const { createUserWithEmailAndPassword } = await lazyImportAuth();
    return createUserWithEmailAndPassword(auth, email, password);
  };

  const loginWithGoogle = async () => {
    const { signInWithPopup, GoogleAuthProvider } = await lazyImportAuth();
    const provider = new GoogleAuthProvider();
    return signInWithPopup(auth, provider);
  };

  const logout = async () => {
    const { signOut } = await lazyImportAuth();
    return signOut(auth);
  };

  const resetPassword = async (email) => {
    const { sendPasswordResetEmail } = await lazyImportAuth();
    return sendPasswordResetEmail(auth, email);
  };

  const value = {
    user,
    login,
    signup,
    loginWithGoogle,
    logout,
    resetPassword
  };

  if (loading) {
    return <LoadingState />;
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}



File: src\Dashboard.jsx
================================================================================

import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import ProfileHeader from './components/ProfileHeader';
import CategorySection from './components/CategorySection';
import RadarChart from './components/RadarChart';
import OffensiveSection from './components/OffensiveSection';
import RadialTabs from './components/RadialTabs';
import { computeCategoryAverages, computeOverallScore } from './utils/helpers';
import HomeSection from './components/HomeSection';
import { SyncManager } from './utils/sync';
import { InstallPrompt } from './components/InstallPrompt';
import RoadmapModal from './components/RoadmapModal';
import FloatingActionButton from './components/FloatingActionButton';
import './index.css';
import { fetchAthletes } from './services/athleteService';
import { LoadingState } from './components/LoadingState';

function Dashboard() {
  const location = useLocation();
  const navigate = useNavigate();
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [syncPending, setSyncPending] = useState(false);
  const [isRoadmapOpen, setRoadmapOpen] = useState(false);

  // Athlete selection
  const [selectedAthleteId, setSelectedAthleteId] = useState(null);

  // Data fetching states
  const [athletes, setAthletes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch athletes from Firestore
  useEffect(() => {
    const getAthletes = async () => {
      try {
        const data = await fetchAthletes();
        setAthletes(data);
        setLoading(false);

        // URL parameter check for athlete ID
        const searchParams = new URLSearchParams(location.search);
        const athleteIdFromUrl = searchParams.get('id');

        if (athleteIdFromUrl) {
          const athleteExists = data.some(a => a.id === athleteIdFromUrl);
          if (athleteExists) {
            setSelectedAthleteId(athleteIdFromUrl);
          } else {
            console.warn(`[Dashboard] Athlete ID ${athleteIdFromUrl} not found, redirecting.`);
            navigate('/', { replace: true });
          }
        } else if (data.length > 0) {
          // Default to the first athlete
          setSelectedAthleteId(data[0].id);
        }
      } catch (err) {
        console.error('[Dashboard] Error fetching athletes:', err);
        setError('Failed to load athletes.');
        setLoading(false);
      }
    };
    getAthletes();
  }, [location.search, navigate]);

  // Current selected athlete
  const selectedAthlete = athletes.find(a => a.id === selectedAthleteId);

  // Data grouping for categories
  const getCategoryData = (athlete) => ({
    physical: [
      { key: 'speed_explosiveness', label: 'Speed & Explosiveness' },
      { key: 'endurance', label: 'Endurance' },
      { key: 'vertical_leap', label: 'Vertical Leap' },
      { key: 'change_of_direction', label: 'Change of Direction' },
      { key: 'boxing_out', label: 'Boxing Out' },
      { key: 'laying_out', label: 'Laying Out' },
      { key: 'recovery', label: 'Recovery' },
      { key: 'flexibility_mobility', label: 'Flexibility & Mobility' },
      { key: 'injury_prevention', label: 'Injury Prevention' },
    ],
    offensive: {
      cutting: [
        { key: 'angles', label: 'Angles' },
        { key: 'fakes_footwork', label: 'Fakes & Footwork' },
        { key: 'timing_field_vision', label: 'Timing & Field Vision' },
        { key: 'decisiveness', label: 'Decisiveness' },
        { key: 'catching', label: 'Catching' },
        { key: 'flow_awareness', label: 'Flow Awareness' },
        { key: 'isolation_cutting', label: 'Isolation Cutting' },
        { key: 'continuation_cutting', label: 'Continuation Cutting' },
      ],
      handling: [
        { key: 'handler_movement', label: 'Handler Movement' },
        { key: 'poise_with_disc', label: 'Poise w/ Disc' },
        { key: 'breaking_the_mark', label: 'Breaking the Mark' },
        { key: 'resetting_from_trap_sideline', label: 'Reset from Trap' },
        { key: 'decision_making_vision', label: 'Decision Making & Vision' },
        { key: 'offensive_pattern_recognition', label: 'Pattern Recognition' },
        { key: 'throw_and_go', label: 'Throw & Go' },
      ],
      throwing: {
        backhand: [
          { key: 'backhand_power', label: 'Backhand Power' },
          { key: 'backhand_accuracy', label: 'Backhand Accuracy' },
          { key: 'backhand_quick_release', label: 'Backhand Quick Release' },
          { key: 'backhand_release_variations', label: 'Backhand Variations' },
          { key: 'backhand_against_wind', label: 'Backhand vs Wind' },
          { key: 'backhand_against_difficult_marks', label: 'Backhand vs Difficult Marks' },
          { key: 'backhand_tempo_control', label: 'Backhand Tempo Control' },
        ],
        forehand: [
          { key: 'forehand_power', label: 'Forehand Power' },
          { key: 'forehand_accuracy', label: 'Forehand Accuracy' },
          { key: 'forehand_quick_release', label: 'Forehand Quick Release' },
          { key: 'forehand_release_variations', label: 'Forehand Variations' },
          { key: 'forehand_against_wind', label: 'Forehand vs Wind' },
          { key: 'forehand_against_difficult_marks', label: 'Forehand vs Difficult Marks' },
          { key: 'forehand_tempo_control', label: 'Forehand Tempo Control' },
        ],
        specialty: [
          { key: 'specialty_power', label: 'Specialty Power' },
          { key: 'specialty_accuracy', label: 'Specialty Accuracy' },
          { key: 'specialty_quick_release', label: 'Specialty Quick Release' },
          { key: 'specialty_release_variations', label: 'Specialty Variations' },
          { key: 'specialty_against_wind', label: 'Specialty vs Wind' },
          { key: 'specialty_against_difficult_marks', label: 'Specialty vs Difficult Marks' },
          { key: 'specialty_tempo_control', label: 'Specialty Tempo Control' },
        ],
        hucking: [
          { key: 'hucking_confidence', label: 'Hucking Confidence' },
          { key: 'hucking_shape_control', label: 'Hucking Shape Control' },
          { key: 'hucking_tempo_control', label: 'Hucking Tempo Control' },
          { key: 'hucking_placement', label: 'Hucking Placement' },
        ],
      },
    },
    defensive: [
      { key: 'normal_marking', label: 'Normal Marking' },
      { key: 'sideline_trap_marking', label: 'Sideline Trap Marking' },
      { key: 'downfield_defending', label: 'Downfield Defending' },
      { key: 'handler_defending', label: 'Handler Defending' },
      { key: 'defensive_pattern_recognition', label: 'Pattern Recognition' },
      { key: 'help_defense', label: 'Help Defense' },
      { key: 'switching_on_defense', label: 'Switching on Defense' },
      { key: 'zone_defense', label: 'Zone Defense' },
      { key: 'defensive_mental_fortitude', label: 'Defensive Mental Fortitude' },
    ],
    mental: [
      { key: 'mental_game', label: 'Mental Game' },
      { key: 'feedback_implementation', label: 'Feedback Implementation' },
      { key: 'defensive_strategy', label: 'Defensive Team Strategy' },
      { key: 'offensive_strategy', label: 'Offensive Team Strategy' },
    ],
  });

  // Tab management
  const [activeTab, setActiveTab] = useState('home');

  // Precompute main category averages for radial tabs
  const [averages, setAverages] = useState({});
  useEffect(() => {
    if (selectedAthlete) {
      const newAverages = computeCategoryAverages(selectedAthlete);
      setAverages(newAverages);
    }
  }, [selectedAthlete]);

  // Example Throw Comparison Radar
  const radarLabels = [
    'Backhand Power',
    'Forehand Power',
    'Specialty Power',
    'Backhand Accuracy',
    'Forehand Accuracy',
    'Specialty Accuracy',
  ];
  const radarDataValues = selectedAthlete
    ? [
        selectedAthlete.skills.backhand_power,
        selectedAthlete.skills.forehand_power,
        selectedAthlete.skills.specialty_power,
        selectedAthlete.skills.backhand_accuracy,
        selectedAthlete.skills.forehand_accuracy,
        selectedAthlete.skills.specialty_accuracy,
      ]
    : [];

  // Online/Offline status
  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      // Attempt to sync pending data if any
      SyncManager.processSyncQueue();
    };
    const handleOffline = () => {
      setIsOnline(false);
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 flex flex-col">
      {!isOnline && (
        <div className="bg-yellow-600 text-white px-4 py-2 text-center">
          You're offline. Some features may be limited.
        </div>
      )}

      {/* Show custom InstallPrompt for PWA */}
      <InstallPrompt />

      {/** Profile Header (only if selectedAthlete is available) */}
      {selectedAthlete && (
        <ProfileHeader
          name={selectedAthlete.metadata.name}
          email={selectedAthlete.metadata.email}
          overallScore={
            activeTab === 'home'
              ? computeOverallScore(selectedAthlete)
              : averages[activeTab] || 0
          }
          athletes={athletes}
          selectedAthleteId={selectedAthleteId}
          onSelectAthlete={(id) => setSelectedAthleteId(id)}
        />
      )}

      {/** Radial navigation row for main tabs */}
      <RadialTabs
        activeTab={activeTab}
        onChangeTab={setActiveTab}
        averages={averages}
      />

      {/** Main content container */}
      <div className="flex-1 overflow-auto px-4 pb-8 mt-4">
        {/** Loading indicator */}
        {loading && <LoadingState />}

        {/** Error message */}
        {error && (
          <div className="bg-red-600 text-white px-4 py-2 rounded">
            {error}
          </div>
        )}

        {/** Main content if data is loaded */}
        {!loading && !error && selectedAthlete && (
          <>
            {activeTab === 'home' && <HomeSection player={selectedAthlete} />}
            
            {activeTab === 'physical' && (
              <CategorySection
                title="Physical Attributes"
                skills={getCategoryData(selectedAthlete).physical}
                player={selectedAthlete.skills}
              />
            )}

            {activeTab === 'offensive' && (
              <>
                <OffensiveSection
                  offensiveData={getCategoryData(selectedAthlete).offensive}
                  player={selectedAthlete.skills}
                />
                <div className="mt-6">
                  <h2 className="text-xl font-semibold mb-2 text-gray-100">
                    Throw Comparison
                  </h2>
                  <RadarChart labels={radarLabels} dataValues={radarDataValues} />
                </div>
              </>
            )}

            {activeTab === 'defensive' && (
              <CategorySection
                title="Defensive Skills"
                skills={getCategoryData(selectedAthlete).defensive}
                player={selectedAthlete.skills}
              />
            )}

            {activeTab === 'mental' && (
              <CategorySection
                title="Mental & Recovery"
                skills={getCategoryData(selectedAthlete).mental}
                player={selectedAthlete.skills}
              />
            )}

            {/* Roadmap Modal */}
            <RoadmapModal
              isOpen={isRoadmapOpen}
              onClose={() => setRoadmapOpen(false)}
              player={selectedAthlete}
            />
            <FloatingActionButton onClick={() => setRoadmapOpen(true)} />
          </>
        )}
      </div>
    </div>
  );
}

export default Dashboard;


File: src\hooks\usePreloadState.js
================================================================================

// src/hooks/usePreloadState.js
import { useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext'; // Import useAuth

export function usePreloadState() {
  const location = useLocation();
  const navigate = useNavigate();
  const { user } = useAuth(); // Access user from AuthContext

  useEffect(() => {
    // Store current path for direct access
    sessionStorage.setItem('last_path', location.pathname);

    // Preload next likely route based on current path
    if (location.pathname === '/login') {
      // Preload dashboard and its dependencies
      const preloadDashboard = async () => {
        try {
          // Start preloading after a short delay to prioritize login render
          await new Promise(resolve => setTimeout(resolve, 2000));
          await import('../Dashboard');
        } catch (error) {
          console.error('Error preloading Dashboard:', error);
        }
      };
      preloadDashboard();
    }

    // Handle direct access to protected routes
    if (user && location.pathname === '/login') {
      const lastPath = sessionStorage.getItem('last_path') || '/';
      navigate(lastPath, { replace: true });
    }
  }, [location, navigate, user]);

  return {
    currentPath: location.pathname,
    isAuthenticated: !!user, // Use user presence to determine authentication
  };
}


File: src\index.css
================================================================================

/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: 'Inter', sans-serif;
}


File: src\index.tsx
================================================================================

// src/index.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import { BrowserRouter } from 'react-router-dom';
import { registerServiceWorker } from './serviceWorkerRegistration';
import RootErrorBoundary from './components/RootErrorBoundary';
import ErrorFallback from './components/ErrorFallback';
import { getEnvConfig } from './config/env';

const initializeApp = () => {
  try {
    // Validate environment variables
    getEnvConfig();
    
    const rootElement = document.getElementById('root');
    if (!rootElement) throw new Error('Failed to find the root element');
    
    const root = ReactDOM.createRoot(rootElement);

    root.render(
      <React.StrictMode>
        <RootErrorBoundary>
          <BrowserRouter>
            <div className="dark">
              <App />
            </div>
          </BrowserRouter>
        </RootErrorBoundary>
      </React.StrictMode>
    );

    if (process.env.NODE_ENV === 'production') {
      registerServiceWorker();
    }
  } catch (error) {
    // Handle initialization errors
    console.error('Failed to initialize app:', error);
    
    const rootElement = document.getElementById('root');
    if (rootElement) {
      const root = ReactDOM.createRoot(rootElement);
      root.render(
        <ErrorFallback 
          error={error as Error}
          resetErrorBoundary={() => window.location.reload()} 
        />
      );
    }
  }
};

initializeApp();

File: src\reportWebVitals.js
================================================================================

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


File: src\services\athleteService.js
================================================================================

// src/services/athleteService.js

import { collection, getDocs, addDoc, doc, updateDoc, deleteDoc } from 'firebase/firestore';
import { db } from '../config/firebase';

/**
 * Fetch all athletes
 */
export const fetchAthletes = async () => {
  const athletesCol = collection(db, 'athletes');
  const athletesSnapshot = await getDocs(athletesCol);
  const athletesList = athletesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  return athletesList;
};

/**
 * Add a new athlete
 */
export const addAthlete = async (athleteData) => {
  const athletesCol = collection(db, 'athletes');
  const docRef = await addDoc(athletesCol, athleteData);
  return docRef.id;
};

/**
 * Update an athlete
 */
export const updateAthlete = async (id, updatedData) => {
  const athleteDoc = doc(db, 'athletes', id);
  await updateDoc(athleteDoc, updatedData);
};

/**
 * Delete an athlete
 */
export const deleteAthlete = async (id) => {
  const athleteDoc = doc(db, 'athletes', id);
  await deleteDoc(athleteDoc);
};


File: src\serviceWorkerRegistration.js
================================================================================

/* ------------------------------------------
   serviceWorkerRegistration.js (Refactored)
------------------------------------------- */

export function registerServiceWorker() {
  // Check if the browser supports service workers
  if (!('serviceWorker' in navigator)) {
    console.log('[SW] Service workers are not supported in this browser.');
    return;
  }

  // Register the service worker after the window loads
    navigator.serviceWorker
      .register('/service-worker.js')
      .then((registration) => {

        // Listen for updates to the service worker
        registration.addEventListener('updatefound', () => {
          const installingWorker = registration.installing;
          console.log('[SW] New worker installing:', installingWorker);

          // Track the state of the new worker
          installingWorker.addEventListener('statechange', () => {
            console.log('[SW] New worker state:', installingWorker.state);

            if (installingWorker.state === 'installed') {
              if (navigator.serviceWorker.controller) {
                // There's an existing SW, so this is an update
                console.log('[SW] New update available');
                // Optionally, display a notification or UI prompt to the user
              } else {
                // First SW install: content is now cached for offline use
                console.log('[SW] Content cached for offline use');
              }
            }
          });
        });

        // Check if the SW is already controlling the page
        if (navigator.serviceWorker.controller) {
        } else {
          console.log('[SW] Service worker is NOT controlling the page');
        }
      })
      .catch((error) => {
        console.error('[SW] Service worker registration failed:', error);
      });

  // Reload the page when the service worker updates to the new version
  let refreshing = false;
  navigator.serviceWorker.addEventListener('controllerchange', () => {
    if (!refreshing) {
      refreshing = true;
      // Reload the page to allow the new service worker to control
      window.location.reload();
    }
  });

  // Listen for messages from the service worker
  navigator.serviceWorker.addEventListener('message', (event) => {
    console.log('[SW] Received message from service worker:', event.data);
    // For example, handle 'CACHE_UPDATED' messages or other custom events
  });
}


File: src\setupTests.js
================================================================================

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


File: src\types\components.d.ts
================================================================================

// src/types/components.d.ts

export interface LoadingStateProps {
    size?: string;
    color?: string;
    text?: string;
  }
  
  export interface ErrorBoundaryProps {
    children: React.ReactNode;
    fallback: React.ReactElement;
  }
  
  export interface AuthProviderProps {
    children: React.ReactNode;
  }
  
  export interface ProtectedRouteProps {
    children: React.ReactNode;
  }

File: src\types\environment.d.ts
================================================================================

// src/types/environment.d.ts
export interface EnvironmentVariables {
    readonly NODE_ENV: 'development' | 'production' | 'test';
    readonly REACT_APP_FIREBASE_API_KEY: string;
    readonly REACT_APP_FIREBASE_AUTH_DOMAIN: string;
    readonly REACT_APP_FIREBASE_PROJECT_ID: string;
    readonly REACT_APP_FIREBASE_STORAGE_BUCKET: string;
    readonly REACT_APP_FIREBASE_MESSAGING_SENDER_ID: string;
    readonly REACT_APP_FIREBASE_APP_ID: string;
    readonly REACT_APP_FIREBASE_MEASUREMENT_ID: string;
    readonly PUBLIC_URL: string;
  }
  
  declare global {
    namespace NodeJS {
      interface ProcessEnv extends EnvironmentVariables {}
    }
  }

File: src\utils\cache.js
================================================================================

// src/utils/cache.js
export const DataCache = {
    async getPlayer(id) {
      const key = `player-${id}`;
      try {
        const cached = localStorage.getItem(key);
        if (cached) {
          return JSON.parse(cached);
        }
        return null;
      } catch (error) {
        console.error('Error accessing cache:', error);
        return null;
      }
    },
  
    async setPlayer(id, data) {
      const key = `player-${id}`;
      try {
        localStorage.setItem(key, JSON.stringify(data));
      } catch (error) {
        console.error('Error saving to cache:', error);
      }
    }
  };

File: src\utils\constants.js
================================================================================

// src/utils/constants.js

export const METADATA_KEYS = [
    'id',
    'name',
    'email',
    'ip',
    'user_agent',
    'referrer',
    'created_at',
  ];
  

File: src\utils\helpers.js
================================================================================

// src/utils/helpers.js

import { METADATA_KEYS } from './constants';

// A small utility to average numeric values for a given list of keys
export function averageOfKeys(player, keys) {
  let sum = 0, count = 0;
  for (const key of keys) {
    if (typeof player.skills[key] === 'number' && !METADATA_KEYS.includes(key)) {
      sum += player.skills[key];
      count++;
    }
  }
  return count === 0 ? 0 : parseFloat((sum / count).toFixed(1));
}

// Compute category averages for Mental, Physical, Cutting, Throwing, Defense, Handling, Offensive
export function computeCategoryAverages(player) {
  // Define keys for each category
  const categories = {
    mental: [
      'mental_game',
      'feedback_implementation',
      'defensive_strategy',
      'offensive_strategy',

    ],
    physical: [
      'speed_explosiveness',
      'endurance',
      'vertical_leap',
      'change_of_direction',
      'boxing_out',
      'laying_out',
      'recovery',
      'flexibility_mobility',
      'injury_prevention',
    ],
    cutting: [
      'angles',
      'fakes_footwork',
      'timing_field_vision',
      'decisiveness',
      'catching',
      'flow_awareness',
      'isolation_cutting',
      'continuation_cutting',
    ],
    handling: [
      'handler_movement',
      'poise_with_disc',
      'breaking_the_mark',
      'resetting_from_trap_sideline',
      'decision_making_vision',
      'offensive_pattern_recognition',
      'throw_and_go',
    ],
    throwing: [
      // Backhand
      'backhand_power',
      'backhand_accuracy',
      'backhand_quick_release',
      'backhand_release_variations',
      'backhand_against_wind',
      'backhand_against_difficult_marks',
      'backhand_tempo_control',
      // Forehand
      'forehand_power',
      'forehand_accuracy',
      'forehand_quick_release',
      'forehand_release_variations',
      'forehand_against_wind',
      'forehand_against_difficult_marks',
      'forehand_tempo_control',
      // Specialty
      'specialty_power',
      'specialty_accuracy',
      'specialty_quick_release',
      'specialty_release_variations',
      'specialty_against_wind',
      'specialty_against_difficult_marks',
      'specialty_tempo_control',
      // Hucking
      'hucking_confidence',
      'hucking_shape_control',
      'hucking_tempo_control',
      'hucking_placement',
    ],
    defensive: [
      'normal_marking',
      'sideline_trap_marking',
      'downfield_defending',
      'handler_defending',
      'defensive_pattern_recognition',
      'help_defense',
      'switching_on_defense',
      'zone_defense',
      'defensive_mental_fortitude',
    ],
  };

  // Compute individual averages
  const mental = averageOfKeys(player, categories.mental);
  const physical = averageOfKeys(player, categories.physical);
  const cutting = averageOfKeys(player, categories.cutting);
  const handling = averageOfKeys(player, categories.handling);
  const throwing = averageOfKeys(player, categories.throwing);
  const defensive = averageOfKeys(player, categories.defensive);

  // Offensive is the average of cutting, handling, and throwing
  const offensive = parseFloat(((cutting + handling + throwing) / 3).toFixed(1));

  return {
    mental,
    physical,
    cutting,
    handling,
    throwing,
    defensive,
    offensive,
  };
}

// Compute overall score excluding metadata
export function computeOverallScore(player) {
  let sum = 0, count = 0;
  for (const key in player.skills) {
    if (typeof player.skills[key] === 'number' && !METADATA_KEYS.includes(key)) {
      sum += player.skills[key];
      count++;
    }
  }
  return count === 0 ? 0 : parseFloat((sum / count).toFixed(1));
}


File: src\utils\lazyLoad.ts
================================================================================

// src/utils/lazyLoad.ts
import { lazy, ComponentType } from 'react';

interface LazyLoadOptions {
  readonly retry?: number;
  readonly retryDelay?: number;
}

export const lazyLoad = <T extends ComponentType<any>>(
  importPromise: () => Promise<{ default: T }>,
  options: LazyLoadOptions = {}
) => {
  const { retry = 1, retryDelay = 1000 } = options;

  const retryImport = (attemptsLeft: number, delay: number): Promise<{ default: T }> => {
    return importPromise().catch((error: Error) => {
      if (attemptsLeft <= 1) {
        console.error('Lazy load failed after retries:', error);
        return Promise.reject(error);
      }
      return new Promise((resolve) => setTimeout(resolve, delay)).then(() =>
        retryImport(attemptsLeft - 1, delay)
      );
    });
  };

  return lazy(() => retryImport(retry, retryDelay));
};


File: src\utils\slugify.js
================================================================================

// src/utils/slugify.js
import slugify from 'slugify';

export const createAthleteSlug = (name) => {
  return slugify(name, {
    lower: true,       // Convert to lowercase
    strict: true,      // Remove special characters
    remove: /[*+~.()'"!:@]/g, // Additional character removal if needed
  });
};


File: src\utils\sync.js
================================================================================

// src/utils/sync.js
export const SyncManager = {
    async queueSync(action, data) {
      const syncQueue = JSON.parse(localStorage.getItem('syncQueue') || '[]');
      syncQueue.push({ action, data, timestamp: Date.now() });
      localStorage.setItem('syncQueue', JSON.stringify(syncQueue));
    },
  
    async processSyncQueue() {
      if (!navigator.onLine) return;
  
      const syncQueue = JSON.parse(localStorage.getItem('syncQueue') || '[]');
      if (syncQueue.length === 0) return;
  
      for (const item of syncQueue) {
        try {
          // Process sync item
          await this.processItem(item);
          // Remove from queue if successful
          const newQueue = syncQueue.filter(i => i !== item);
          localStorage.setItem('syncQueue', JSON.stringify(newQueue));
        } catch (error) {
          console.error('Sync failed for item:', item, error);
        }
      }
    }
  };

File: tailwind.config.js
================================================================================

module.exports = {
  darkMode: 'class',
  content: ['./src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter', 'ui-sans-serif', 'system-ui'],
      },
      colors: {
        emerald: {
          400: '#10b981',
        },
        fuchsia: {
          400: '#d946ef',
        },
      },
      transitionProperty: {
        'opacity': 'opacity',
      },
      transitionDuration: {
        '500': '500ms',
      },
    },
  },
  plugins: [],
};

File: tsconfig.json
================================================================================

{
    "compilerOptions": {
      "target": "es5",
      "lib": ["dom", "dom.iterable", "esnext"],
      "allowJs": true,
      "skipLibCheck": true,
      "esModuleInterop": true,
      "allowSyntheticDefaultImports": true,
      "strict": true,
      "forceConsistentCasingInFileNames": true,
      "module": "esnext",
      "moduleResolution": "node",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "noEmit": true,
      "jsx": "react-jsx",
      "baseUrl": "src"
    },
    "include": ["src"],
    "exclude": ["node_modules"]
  }

File: src\App.css
================================================================================

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}
/* Ensure dropdowns are visible globally */
.dropdown-container {
  position: relative;
  z-index: 1;
}

.dropdown-menu {
  position: absolute;
  z-index: 9999; /* Always on top */
}

.fixed-dropdown-wrapper {
  position: relative;
  z-index: 9999;
}

/* Ensure the dropdown menu is always on top */
.fixed-dropdown-wrapper [role="listbox"] {
  z-index: 9999;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


File: src\App.tsx
================================================================================

// src/App.tsx
import { lazy, ReactElement, Suspense } from 'react';
import { Routes, Route } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import { LoadingState } from './components/LoadingState';
import ErrorBoundary from './components/ErrorBoundary';
import ErrorFallback from './components/ErrorFallback';
import { lazyLoad } from './utils/lazyLoad';

// Define route configuration type
interface RouteConfig {
  readonly path: string;
  readonly element: ReactElement;
  readonly componentName: string;
}

// Define routes object with type safety
const ROUTES = {
  LOGIN: '/login',
  HOME: '/*'
} as const;

// Lazy load components with error handling
const LoginPage = lazyLoad(
  () => import('./components/auth/LoginPage'),
  { retry: 2, retryDelay: 1000 }
);

const Dashboard = lazyLoad(
  () => import('./Dashboard'),
  { retry: 2 }
);

const ProtectedRoute = lazyLoad(
  () => import('./components/auth/ProtectedRoute'),
  { retry: 2 }
);

// Define route configurations with component names
const routeConfig: RouteConfig[] = [
  {
    path: ROUTES.LOGIN,
    element: <LoginPage />,
    componentName: 'LoginPage'
  },
  {
    path: ROUTES.HOME,
    element: (
      <ProtectedRoute>
        <Dashboard />
      </ProtectedRoute>
    ),
    componentName: 'Dashboard'
  }
];

// Create a wrapper for suspense with error handling
const SuspenseWithErrorBoundary: React.FC<{
  children: React.ReactNode;
  name: string;
}> = ({ children, name }) => (
  <ErrorBoundary
    fallback={
      <ErrorFallback 
        error={new Error(`Failed to load ${name}. Please try refreshing the page.`)}
        resetErrorBoundary={() => window.location.reload()}
      />
    }
  >
    <Suspense fallback={<LoadingState />}>
      {children}
    </Suspense>
  </ErrorBoundary>
);

function App(): ReactElement {
  return (
    <ErrorBoundary
      fallback={
        <ErrorFallback 
          resetErrorBoundary={() => window.location.reload()}
        />
      }
    >
      <AuthProvider>
        <Routes>
          {routeConfig.map(({ path, element, componentName }) => (
            <Route
              key={path}
              path={path}
              element={
                <SuspenseWithErrorBoundary name={componentName}>
                  {element}
                </SuspenseWithErrorBoundary>
              }
            />
          ))}
        </Routes>
      </AuthProvider>
    </ErrorBoundary>
  );
}

export default App;


File: src\components\AthleteDropdown.jsx
================================================================================

// src/components/AthleteDropdown.jsx

import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

const AthleteDropdown = ({ athletes, selectedAthleteId, onSelectAthlete }) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef();

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target)
      ) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Get the selected athlete's name
  const selectedAthlete = athletes.find(a => a.id === selectedAthleteId);

  return (
    <div className="absolute top-4 right-4 md:top-6 md:right-6" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center bg-gray-800 text-gray-300 hover:bg-gray-700 px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-emerald-500"
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        <span className="mr-2 text-sm">{selectedAthlete ? selectedAthlete.name : "Select Athlete"}</span>
        <ChevronDown className="w-4 h-4" aria-hidden="true" />
      </button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="mt-2 w-48 bg-gray-800 rounded-md shadow-lg z-30"
            role="listbox"
            aria-labelledby="athlete-dropdown"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            transition={{ duration: 0.2 }}
          >
            <ul className="py-1">
              {athletes.map(athlete => (
                <li key={athlete.id}>
                  <button
                    onClick={() => {
                      onSelectAthlete(athlete.id);
                      setIsOpen(false);
                    }}
                    className={`w-full text-left px-4 py-2 text-sm ${
                      athlete.id === selectedAthleteId
                        ? 'bg-gray-700 text-white'
                        : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                    }`}
                    role="option"
                    aria-selected={athlete.id === selectedAthleteId}
                  >
                    {athlete.name}
                  </button>
                </li>
              ))}
            </ul>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default AthleteDropdown;


File: src\components\AthleteList.jsx
================================================================================

// src/components/AthleteList.jsx

import React from 'react';

const AthleteList = ({ athletes }) => {
  return (
    <div>
      <h2>Athletes</h2>
      <ul>
        {athletes.map(athlete => (
          <li key={athlete.id}>
            <strong>{athlete.metadata.name}</strong> - {athlete.metadata.email}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default AthleteList;


File: src\components\auth\LoginPage.jsx
================================================================================

import React, { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Mail, 
  Lock, 
  AlertCircle, 
  Loader2, 
  ArrowRight,
  CheckCircle 
} from 'lucide-react';

export default function LoginPage() {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [isResetPassword, setIsResetPassword] = useState(false);
  const navigate = useNavigate();
  const { login, signup, loginWithGoogle, resetPassword } = useAuth();

  // Function to handle user-friendly error messages
  const getErrorMessage = useCallback((error) => {
    switch (error.code) {
      case 'auth/invalid-credential':
        return 'Invalid email or password. Please check your credentials and try again.';
      case 'auth/wrong-password':
        return 'Incorrect password. Please try again.';
      case 'auth/user-not-found':
        return 'No account found with this email.';
      case 'auth/email-already-in-use':
        return 'An account already exists with this email.';
      case 'auth/weak-password':
        return 'Password should be at least 6 characters.';
      case 'auth/invalid-email':
        return 'Please enter a valid email address.';
      case 'auth/too-many-requests':
        return 'Too many attempts. Please try again later.';
      case 'auth/network-request-failed':
        return 'Network error. Please check your internet connection and try again.';
      case 'auth/popup-closed-by-user':
        return 'Sign in was cancelled. Please try again.';
      case 'auth/cancelled-popup-request':
        return 'Sign in process was interrupted. Please try again.';
      case 'auth/operation-not-allowed':
        return 'This sign in method is not enabled. Please try another method.';
      case 'auth/user-disabled':
        return 'This account has been disabled. Please contact support for assistance.';
      default:
        return error.message || 'An error occurred. Please try again.';
    }
}, []);

  const clearMessages = useCallback(() => {
    setError('');
    setSuccessMessage('');
  }, []);

  const resetForm = useCallback(() => {
    setEmail('');
    setPassword('');
    clearMessages();
  }, [clearMessages]);

  const handleAuthModeChange = useCallback((mode) => {
    if (mode === 'reset') {
      setIsResetPassword(true);
      setIsLogin(true);
    } else {
      setIsResetPassword(false);
      setIsLogin(mode === 'login');
    }
    clearMessages();
  }, [clearMessages]);

  async function handleSubmit(e) {
    e.preventDefault();
    clearMessages();
    setLoading(true);

    try {
      if (isResetPassword) {
        await resetPassword(email);
        setSuccessMessage('Password reset email sent! Please check your inbox.');
        setIsResetPassword(false);
      } else if (isLogin) {
        await login(email, password);
        resetForm();
        navigate('/');
      } else {
        await signup(email, password);
        resetForm();
        navigate('/');
      }
    } catch (err) {
      setError(getErrorMessage(err));
    } finally {
      setLoading(false);
    }
  }

  async function handleGoogleLogin() {
    clearMessages();
    setLoading(true);

    try {
      await loginWithGoogle();
      resetForm();
      navigate('/');
    } catch (err) {
      setError(getErrorMessage(err));
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 flex flex-col items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Logo/Brand Section */}
        <div className="text-center mb-8">
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            <div className="w-16 h-16 mx-auto mb-4 flex items-center justify-center">
              <img src="/favicon.svg" alt="Logo" className="w-full h-full" />
            </div>
          </motion.div>
          <h2 className="text-2xl md:text-3xl font-bold text-white">
            {isResetPassword 
              ? 'Reset Password'
              : isLogin 
                ? 'Welcome back' 
                : 'Create your account'}
          </h2>
          <p className="mt-2 text-gray-400 text-sm">
            {isResetPassword
              ? 'Enter your email and we will send you reset instructions.'
              : isLogin 
                ? 'Great to see you again! Please enter your details.'
                : 'Start your performance tracking journey today.'}
          </p>
        </div>

        {/* Main Form */}
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.4, delay: 0.1 }}
          className="bg-gray-800/50 backdrop-blur-xl rounded-2xl p-6 md:p-8 shadow-xl border border-gray-700/50"
        >
          <AnimatePresence mode="wait">
            {error && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="mb-4 p-3 rounded-lg bg-red-500/10 border border-red-500/50 flex items-center gap-2"
              >
                <AlertCircle className="h-4 w-4 text-red-500 flex-shrink-0" />
                <p className="text-sm text-red-500">{error}</p>
              </motion.div>
            )}
            {successMessage && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="mb-4 p-3 rounded-lg bg-emerald-500/10 border border-emerald-500/50 flex items-center gap-2"
              >
                <CheckCircle className="h-4 w-4 text-emerald-500 flex-shrink-0" />
                <p className="text-sm text-emerald-500">{successMessage}</p>
              </motion.div>
            )}
          </AnimatePresence>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-1">
              <label htmlFor="email" className="text-sm font-medium text-gray-300">
                Email
              </label>
              <div className="relative">
                <input
                  id="email"
                  type="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full px-4 py-2.5 rounded-lg bg-gray-900/50 border border-gray-700 text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500 transition-colors"
                  placeholder="you@example.com"
                />
                <Mail className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
              </div>
            </div>

            {!isResetPassword && (
              <div className="space-y-1">
                <div className="flex items-center justify-between">
                  <label htmlFor="password" className="text-sm font-medium text-gray-300">
                    Password
                  </label>
                  {isLogin && (
                    <button
                      type="button"
                      onClick={() => handleAuthModeChange('reset')}
                      className="text-sm text-emerald-400 hover:text-emerald-300 transition-colors"
                    >
                      Forgot password?
                    </button>
                  )}
                </div>
                <div className="relative">
                  <input
                    id="password"
                    type="password"
                    required={!isResetPassword}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full px-4 py-2.5 rounded-lg bg-gray-900/50 border border-gray-700 text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500 transition-colors"
                    placeholder="••••••••"
                  />
                  <Lock className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
                </div>
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-emerald-500 hover:bg-emerald-600 text-white py-2.5 rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {loading ? (
                <Loader2 className="w-5 h-5 animate-spin" />
              ) : (
                <>
                  {isResetPassword 
                    ? 'Send reset instructions' 
                    : isLogin 
                      ? 'Sign in' 
                      : 'Create account'}
                  <ArrowRight className="w-5 h-5" />
                </>
              )}
            </button>
          </form>

          {!isResetPassword && (
            <>
              <div className="mt-6">
                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-gray-700"></div>
                  </div>
                  <div className="relative flex justify-center text-sm">
                    <span className="px-2 bg-gray-800/50 text-gray-400">
                      Or continue with
                    </span>
                  </div>
                </div>

                <button
                  onClick={handleGoogleLogin}
                  disabled={loading}
                  className="mt-4 w-full flex items-center justify-center gap-3 px-4 py-2.5 border border-gray-700 rounded-lg text-gray-300 hover:bg-gray-700/50 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500"
                >
                  <svg className="h-5 w-5" viewBox="0 0 24 24">
                    <path
                      fill="currentColor"
                      d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
                    />
                  </svg>
                  Google
                </button>
              </div>
            </>
          )}

          <div className="mt-6 text-center space-y-3">
            {!isResetPassword && (
              <button
                onClick={() => handleAuthModeChange(isLogin ? 'signup' : 'login')}
                className="text-sm text-emerald-400 hover:text-emerald-300 transition-colors"
              >
                {isLogin ? "Don't have an account? Sign up" : 'Already have an account? Sign in'}
              </button>
            )}
            {isResetPassword && (
              <button
                onClick={() => handleAuthModeChange('login')}
                className="block w-full text-sm text-gray-400 hover:text-gray-300 transition-colors"
              >
                Return to login
              </button>
            )}
          </div>
        </motion.div>
      </div>
    </div>
  );
}

File: src\components\auth\ProtectedRoute.jsx
================================================================================

// src/components/auth/ProtectedRoute.jsx
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { LoadingState } from '../LoadingState'; // adjust import path if needed

export default function ProtectedRoute({ children }) {
  const { user, loading } = useAuth(); 
  // ^ Make sure your AuthContext provides both `user` and `loading` (or `authLoading`).

  // 1) If Auth is still loading, show a spinner (or any fallback).
  if (loading) {
    return <LoadingState />;
  }

  // 2) If no user, redirect to login page.
  if (!user) {
    return <Navigate to="/login" replace />;
  }

  // 3) Otherwise, render the protected component(s).
  return children;
}


File: src\components\CategorySection.jsx
================================================================================

// src/components/CategorySection.jsx

import React from 'react';
import SkillCard from './SkillCard';

const CategorySection = ({ title, skills, player }) => {
  return (
    <div className="mb-6">
      <h2 className="text-xl font-semibold mb-3 text-gray-100">{title}</h2>
      <div className="space-y-2">
        {skills.map((skill) => (
          <SkillCard
            key={skill.key}
            label={skill.label}
            value={player[skill.key]}
          />
        ))}
      </div>
    </div>
  );
};

export default CategorySection;


File: src\components\ErrorBoundary.tsx
================================================================================

// src/components/ErrorBoundary.tsx
import React, { Component, ErrorInfo, ReactNode } from 'react';
import ErrorFallback from './ErrorFallback';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught by error boundary:', error, errorInfo);
    this.props.onError?.(error, errorInfo);
  }

  private handleReset = () => {
    this.setState({ hasError: false, error: undefined });
  };

  public render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return (
        <ErrorFallback
          error={this.state.error}
          resetErrorBoundary={this.handleReset}
        />
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

File: src\components\ErrorFallback.tsx
================================================================================

// src/components/ErrorFallback.tsx
interface ErrorFallbackProps {
    error?: Error;
    resetErrorBoundary?: () => void;
  }
  
  const ErrorFallback: React.FC<ErrorFallbackProps> = ({ 
    error, 
    resetErrorBoundary 
  }) => {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900">
        <div className="text-center p-4 max-w-md">
          <h1 className="text-xl text-red-500 mb-2">
            Oops! Something went wrong
          </h1>
          <p className="text-gray-400 mb-4">
            {error?.message || 'Please try again or refresh the page'}
          </p>
          {resetErrorBoundary && (
            <button
              onClick={resetErrorBoundary}
              className="px-4 py-2 bg-emerald-500 text-white rounded-lg 
                       hover:bg-emerald-600 transition-colors"
            >
              Try Again
            </button>
          )}
        </div>
      </div>
    );
  };
  
  export default ErrorFallback;

File: src\components\FirestoreTest.jsx
================================================================================

// src/components/FirestoreTest.jsx

import React, { useEffect } from 'react';
import { db } from '../config/firebase';
import { collection, getDocs } from 'firebase/firestore';

const FirestoreTest = () => {
  useEffect(() => {
    const fetchData = async () => {
      try {
        const athletesCol = collection(db, 'athletes');
        const athletesSnapshot = await getDocs(athletesCol);
        const athletesList = athletesSnapshot.docs.map(doc => doc.data());
        console.log('Athletes:', athletesList);
      } catch (error) {
        console.error('Error fetching athletes:', error);
      }
    };

    fetchData();
  }, []);

  return (
    <div>
      <h2>Firestore Test</h2>
    </div>
  );
};

export default FirestoreTest;


File: src\components\FloatingActionButton.jsx
================================================================================

import React, { useState } from 'react';
import { Milestone } from 'lucide-react';

const FloatingActionButton = ({ onClick }) => {
  const [ripple, setRipple] = useState({ active: false, x: 0, y: 0 });

  const handleClick = (e) => {
    // Get click coordinates relative to button
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    // Trigger ripple
    setRipple({ active: true, x, y });
    
    // Reset ripple after animation
    setTimeout(() => setRipple({ active: false, x: 0, y: 0 }), 600);
    
    // Call the original onClick handler
    onClick();
  };

  return (
    <button
      onClick={handleClick}
      className="fixed bottom-6 right-6 bg-emerald-500 hover:bg-emerald-600 text-white p-3 rounded-full shadow-lg z-50 transition-colors duration-200 flex items-center justify-center overflow-hidden"
      aria-label="View Development Path"
    >
      <Milestone className="w-6 h-6" />
      {ripple.active && (
        <span
          className="absolute animate-ripple rounded-full bg-white/30"
          style={{
            left: ripple.x - 50,  // Center the 100px wide ripple
            top: ripple.y - 50,   // Center the 100px tall ripple
            width: '100px',
            height: '100px',
          }}
        />
      )}
    </button>
  );
};

export default FloatingActionButton;

File: src\components\HomeSection.jsx
================================================================================

// src/components/HomeSection.jsx

import React, { useState, useEffect } from 'react';
import RadarChart from './RadarChart';
import SwipeableInsights from './SwipeableInsights';
import SkillHierarchy from './SkillHierarchy';
import { computeCategoryAverages } from '../utils/helpers';

function HomeSection({ player }) {
  const [averages, setAverages] = useState({
    mental: 0,
    physical: 0,
    cutting: 0,
    handling: 0,
    throwing: 0,
    defensive: 0,
    offensive: 0,
  });

  useEffect(() => {
    const avg = computeCategoryAverages(player);
    setAverages(avg);
  }, [player]);

  // Radar chart data for 6 categories
  const radarLabels = ['Mental', 'Physical', 'Cutting', 'Handling', 'Throwing', 'Defense'];
  const radarDataValues = [
    averages.mental,
    averages.physical,
    averages.cutting,
    averages.handling,
    averages.throwing,
    averages.defensive,
  ];

  return (
    <div className="mx-auto space-y-6">
      {/* Key Insights (Top 3 strengths, etc.) */}
      <SwipeableInsights 
        player={player} 
        growthTargets={player.growth_targets || []}
      />

      {/* Main Stats Section */}
      <div className="grid gap-6 grid-cols-1 lg:grid-cols-2">
        {/* Radar Chart */}
        <div className="bg-gray-800 p-5 rounded-lg shadow-md">
          <h2 className="text-lg font-semibold text-gray-100 mb-4 mt-0">
            Category Averages
          </h2>
          <div className="w-full flex justify-center">
            <div className="w-full aspect-square max-w-[400px]">
              <RadarChart labels={radarLabels} dataValues={radarDataValues} />
            </div>
          </div>
        </div>

        {/* Skill Hierarchy */}
        <div className="bg-gray-800 p-5 rounded-lg shadow-md">
          <h2 className="text-lg font-semibold text-gray-100 mb-4 mt-0">
            Detailed Breakdown
          </h2>
          <div className="overflow-auto max-h-[400px] custom-scrollbar">
            <SkillHierarchy player={player} />
          </div>
        </div>
      </div>

      {/* Additional Info or Future Sections */}
      <div className="bg-gray-800 p-5 rounded-lg shadow-md">
        <h2 className="text-lg font-semibold text-gray-100 mb-4">
          Recent Progress
        </h2>
        <p className="text-gray-400 text-sm">
          Progress tracking section coming soon...
        </p>
      </div>
    </div>
  );
}

export default HomeSection;

File: src\components\InsightsSection.jsx
================================================================================

// src/components/InsightsSection.jsx

import React from 'react';
import { METADATA_KEYS } from '../utils/constants';

const InsightsSection = ({ player }) => {
  // Example logic: find top 3 skills (by numeric value)
  const skillEntries = Object.entries(player).filter(([key, val]) => {
    return typeof val === 'number' && !METADATA_KEYS.includes(key);
  });

  // Sort descending by value
  skillEntries.sort((a, b) => b[1] - a[1]);
  const topThree = skillEntries.slice(0, 3);

  return (
    <div className="mb-6">
      <h2 className="text-xl font-bold uppercase mb-2 text-gray-100">
        Key Insights
      </h2>
      <div className="bg-gray-800 p-4 rounded-lg shadow-md">
        <div className="text-gray-300 text-xs font-bold uppercase tracking-widest mb-2">
          <span className="font-semibold text-emerald-400">
            Top 3 Strengths:
          </span>
        </div>
        {topThree.map(([skillKey, skillValue]) => (
          <div key={skillKey} className="flex justify-between mb-1">
            <span className="capitalize text-gray-200">
              {skillKey.replace(/_/g, ' ')}
            </span>
            <span className="text-emerald-400 font-semibold">
              {skillValue}/10
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default InsightsSection;


File: src\components\InstallPrompt.jsx
================================================================================

import React, { useState, useEffect } from 'react';

export const InstallPrompt = () => {
  const [prompt, setPrompt] = useState(null);
  const [criteria, setCriteria] = useState({
    protocolCheck: false,
    serviceWorkerCheck: false,
    isAppInstalled: false,
    hasPromptBeenShown: false
  });

  useEffect(() => {
    // Check if we're on HTTPS or localhost
    const isSecureContext = window.isSecureContext || 
                          window.location.hostname === 'localhost' ||
                          window.location.protocol === 'https:';
    
    // Check for service worker support
    const hasServiceWorker = 'serviceWorker' in navigator;

    // Check if app is already installed
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone;
    const promptShownBefore = localStorage.getItem('installPromptShown') === 'true';

    console.log('Installation Criteria Checks:', {
      protocol: window.location.protocol,
      hostname: window.location.hostname,
      isSecureContext: isSecureContext,
      serviceWorkerAvailable: hasServiceWorker,
      serviceWorkerController: !!navigator.serviceWorker?.controller,
      isStandalone: isStandalone,
      hasPromptBeenShown: promptShownBefore
    });

    setCriteria({
      protocolCheck: isSecureContext,
      serviceWorkerCheck: hasServiceWorker,
      isAppInstalled: isStandalone,
      hasPromptBeenShown: promptShownBefore
    });

    const handleInstallPrompt = (e) => {
      e.preventDefault();
      console.log('Real install prompt captured');
      setPrompt(e);
    };

    window.addEventListener('beforeinstallprompt', handleInstallPrompt);
    window.addEventListener('appinstalled', () => {
      console.log('App has been installed');
      localStorage.setItem('installPromptShown', 'true');
    });

    return () => window.removeEventListener('beforeinstallprompt', handleInstallPrompt);
  }, []);

  // Check if all criteria are met
  const allCriteriaMet = Object.values(criteria).every(check => check);

  if (criteria.isAppInstalled || criteria.hasPromptBeenShown || !allCriteriaMet) {
    console.log('Installation criteria not met or app already installed:', criteria);
    return null;
  }

  return (
    <div className="fixed bottom-4 left-4 right-4 md:right-4 md:w-96 bg-gray-800 p-4 rounded-lg shadow-lg z-50 border border-gray-700">
      <div className="flex flex-col space-y-3">
        <div>
          <h3 className="text-gray-100 font-medium">Install Ultify</h3>
          <p className="text-gray-400 text-sm mt-1">
            Get the best experience and offline functionality by installing the app.
          </p>
          <div className="mt-2 space-y-1">
            <span className={`block text-xs ${criteria.protocolCheck ? 'text-emerald-400' : 'text-red-500'}`}>
              Protocol Check: {criteria.protocolCheck ? '✓ Passed' : '✗ Failed'}
            </span>
            <span className={`block text-xs ${criteria.serviceWorkerCheck ? 'text-emerald-400' : 'text-red-500'}`}>
              Service Worker Check: {criteria.serviceWorkerCheck ? '✓ Passed' : '✗ Failed'}
            </span>
            <span className={`block text-xs ${prompt ? 'text-emerald-400' : 'text-red-500'}`}>
              Install Prompt Captured: {prompt ? '✓ Yes' : '✗ No'}
            </span>
          </div>
        </div>

        <div className="flex justify-end space-x-3">
          <button
            onClick={() => {
              setPrompt(null);
              localStorage.setItem('installPromptShown', 'true');
            }}
            className="px-4 py-2 text-sm text-gray-300 hover:text-white transition-colors"
          >
            Not now
          </button>
          <button
            onClick={() => {
              if (prompt) {
                prompt.prompt();
                prompt.userChoice.then((result) => {
                  console.log('Install choice:', result.outcome);
                  if (result.outcome === 'accepted') {
                    alert('🎉 Installation started!');
                  } else {
                    alert('❌ Installation dismissed.');
                  }
                  localStorage.setItem('installPromptShown', 'true');
                  setPrompt(null);
                });
              }
            }}
            className="px-4 py-2 text-sm bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg transition-colors"
          >
            Install
          </button>
        </div>
      </div>
    </div>
  );
};


File: src\components\LoadingState.tsx
================================================================================

// export function LoadingState({ size = 'h-16 w-16', color = 'emerald-500', text = 'Loading...' }) {
//   return (
//     <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 z-50">
//       <div className="flex flex-col items-center gap-4">
//         {/* Loading Spinner */}
//         <div
//           className={`animate-spin rounded-full ${size} border-t-4 border-b-4 border-${color}`}
//           role="status"
//           aria-label="Loading"
//         />
//         {/* Loading Text */}
//         <div className="text-gray-300 text-lg">{text}</div>
//       </div>
//     </div>
//   );
// }

// src/components/LoadingState.tsx
interface LoadingStateProps {
  size?: string;
  color?: string;
  text?: string;
}

const defaultProps = {
  size: 'h-16 w-16',
  color: 'emerald-500',
  text: 'Loading...'
};

export const LoadingState: React.FC<LoadingStateProps> = (props) => {
  const { size, color, text } = { ...defaultProps, ...props };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 z-50">
      <div className="flex flex-col items-center gap-4">
        <div
          className={`animate-spin rounded-full border-t-4 border-b-4 border-${color} ${size}`}
          role="status"
          aria-label="Loading"
        />
        {text && <div className="text-gray-300 text-lg">{text}</div>}
      </div>
    </div>
  );
};

File: src\components\MiniRadial.jsx
================================================================================

// src/components/MiniRadial.jsx

import React from 'react';

// The ring color can be a gradient or solid color for the "filled" portion
// We'll do a conic gradient from 0 to (score/10)*360 degrees.

function MiniRadial({ score, icon, isActive }) {
  // Score out of 10. If your scale is different, adjust accordingly.
  const percentage = (score / 10) * 100; // 0 to 100
  const deg = (360 * percentage) / 100;  // 0 to 360

  // Active ring color vs. inactive ring color
  const ringColorActive = "rgba(16,185,129,1)";  // emerald-500
  const ringColorInactive = "rgba(107,114,128,1)"; // gray-500

  // Decide color: if isActive is true, use emerald-500, else maybe a duller color
  const ringColor = isActive ? ringColorActive : ringColorInactive;

  // Construct the conic gradient
  const ringStyle = {
    background: `
      conic-gradient(
        ${ringColor} 0deg,
        ${ringColor} ${deg}deg,
        rgba(75,85,99,0.2) ${deg}deg,
        rgba(75,85,99,0.2) 360deg
      )
    `,
  };

  return (
    <div className="relative w-12 h-12">
      {/* Outer ring */}
      <div
        className="w-12 h-12 rounded-full"
        style={ringStyle}
      ></div>

      {/* Inner circle (white or gray background) */}
      <div className="absolute top-[4px] left-[4px] w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center">
        {icon}
      </div>
    </div>
  );
}

export default MiniRadial;


File: src\components\OffensiveSection.jsx
================================================================================

// src/components/OffensiveSection.jsx

import React, { useState } from 'react';
import Tabs from './Tabs';
import CategorySection from './CategorySection';
import ThrowingSection from './ThrowingSection'; // NEW import

function OffensiveSection({ offensiveData, player }) {
  const [activeSubTab, setActiveSubTab] = useState('cutting');

  const subTabs = [
    { value: 'cutting', label: 'Cutting' },
    { value: 'handling', label: 'Handling' },
    { value: 'throwing', label: 'Throwing' },
  ];

  return (
    <div className="mb-6">
      {/* Offensive Sub-Tabs */}
      <Tabs
        tabs={subTabs}
        activeTab={activeSubTab}
        onChange={setActiveSubTab}
      />

      {activeSubTab === 'cutting' && (
        <CategorySection
          title="Cutting Skills"
          skills={offensiveData.cutting}
          player={player}
        />
      )}

      {activeSubTab === 'handling' && (
        <CategorySection
          title="Handling Skills"
          skills={offensiveData.handling}
          player={player}
        />
      )}

      {/* NEW: If sub-tab is throwing, render ThrowingSection */}
      {activeSubTab === 'throwing' && (
        <ThrowingSection
          throwingData={offensiveData.throwing}
          player={player}
        />
      )}
    </div>
  );
}

export default OffensiveSection;


File: src\components\OptimizedBackground.jsx
================================================================================

import React, { useState, useEffect } from 'react';

const OptimizedBackground = () => {
  const [loaded, setLoaded] = useState(false);

  useEffect(() => {
    // Check if we already have a preload link for any of our background images
    const existingPreload = document.querySelector('link[rel="preload"][href*="background"]');
    
    // Only add new preload if we don't already have one
    if (!existingPreload) {
      const isMobile = window.innerWidth < 768;

      const link = document.createElement('link');
      link.rel = 'preload';
      link.as = 'image';
      link.type = 'image/webp';

      if (isMobile) {
        link.href = '/images/background-mobileSm.webp';
        link.media = '(max-width: 767px)';
      } else {
        link.href = '/images/background-sm.webp';
        link.media = '(min-width: 768px)';
      }

      document.head.appendChild(link);

      return () => {
        if (link.parentNode) {
          link.parentNode.removeChild(link);
        }
      };
    }
  }, []);

  return (
    <>
      {/* Placeholder overlay while the main image loads */}
      <div
        className={`absolute inset-0 bg-gradient-to-b from-gray-800 to-gray-900 transition-opacity duration-500 ${
          loaded ? 'opacity-0' : 'opacity-100'
        }`}
      />

      <picture>
        {/* Desktop WebP variants */}
        <source
          srcSet="/images/background-lg.webp 1920w,
                  /images/background-md.webp 1280w,
                  /images/background-sm.webp 640w"
          sizes="(min-width: 1536px) 1920px,
                 (min-width: 1024px) 1280px,
                 (min-width: 768px) 960px,
                 640px"
          type="image/webp"
          media="(min-width: 768px)"
        />

        {/* Mobile WebP variants */}
        <source
          srcSet="/images/background-mobileLg.webp 1280w,
                  /images/background-mobileMd.webp 960w,
                  /images/background-mobileSm.webp 640w"
          sizes="(min-width: 640px) 960px,
                 640px"
          type="image/webp"
          media="(max-width: 767px)"
        />

        {/* Desktop JPEG fallback */}
        <source
          srcSet="/images/background-lg.jpg 1920w,
                  /images/background-md.jpg 1280w,
                  /images/background-sm.jpg 640w"
          sizes="(min-width: 1536px) 1920px,
                 (min-width: 1024px) 1280px,
                 (min-width: 768px) 960px,
                 640px"
          type="image/jpeg"
          media="(min-width: 768px)"
        />

        {/* Mobile JPEG fallback */}
        <source
          srcSet="/images/background-mobileLg.jpg 1280w,
                  /images/background-mobileMd.jpg 960w,
                  /images/background-mobileSm.jpg 640w"
          sizes="(min-width: 640px) 960px,
                 640px"
          type="image/jpeg"
          media="(max-width: 767px)"
        />

        <img
          src="/images/background-sm.jpg"
          alt="Background"
          className={`absolute inset-0 w-full h-full object-cover opacity-60 transition-opacity duration-500 ${
            loaded ? 'opacity-60' : 'opacity-0'
          }`}
          loading="eager"
          fetchPriority="high"
          width="1920"
          height="1080"
          onLoad={() => setLoaded(true)}
          style={{
            backgroundImage: `url('/images/background-placeholder.webp')`,
            backgroundSize: 'cover',
            backgroundPosition: 'center',
          }}
        />
      </picture>
    </>
  );
};

export default OptimizedBackground;


File: src\components\OverallScoreRing.jsx
================================================================================

// src/components/OverallScoreRing.jsx

import React from 'react';
import { Doughnut } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

const OverallScoreRing = ({ overallScore }) => {
  const score = parseFloat(overallScore);
  const maxScore = 10; // Adjust if your scale differs

  const data = {
    labels: ['Score', 'Remaining'],
    datasets: [
      {
        data: [score, maxScore - score],
        backgroundColor: ['#10b981', '#374151'], // emerald-500 & gray-700
        borderWidth: 0,
      },
    ],
  };

  const options = {
    cutout: '80%',
    plugins: {
      legend: { display: false },
      tooltip: { enabled: false },
    },
  };

  return (
    <div className="relative w-24 h-24 md:w-32 md:h-32 lg:w-40 lg:h-40">
      <Doughnut data={data} options={options} />
      {/* Centered Score Text */}
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-lg md:text-xl font-bold text-emerald-400">
          {overallScore}
        </span>
        <span className="text-xs md:text-sm text-gray-300">/10</span>
      </div>
    </div>
  );
};

export default OverallScoreRing;


File: src\components\ProfileHeader.jsx
================================================================================

import React, { useState, useRef, useEffect } from 'react';
import { ChevronDown } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import OverallScoreRing from './OverallScoreRing';
import OptimizedBackground from './OptimizedBackground';

const ProfileHeader = ({ 
  name, 
  email, 
  overallScore, 
  athletes, 
  selectedAthleteId, 
  onSelectAthlete,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);
  const navigate = useNavigate();

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const selectedAthlete = athletes?.find(a => a.id === selectedAthleteId);

  if (!selectedAthlete) {
    return (
      <div className="flex items-center justify-center h-56 bg-gray-800 rounded-lg">
        <p className="text-gray-300">Loading athlete data...</p>
      </div>
    );
  }

  const menuVariants = {
    closed: {
      opacity: 0,
      scaleY: 0,
      transition: { duration: 0.2 }
    },
    open: {
      opacity: 1,
      scaleY: 1,
      transition: { duration: 0.2 }
    }
  };

  const handleAthleteSelect = (athlete) => {
    onSelectAthlete(athlete.id);
    navigate(`/?id=${athlete.id}&name=${encodeURIComponent(athlete.metadata.name)}`);
    setIsOpen(false);
  };

  return (
    <div className="relative w-full h-56 md:h-64 lg:h-72 bg-gray-800 rounded-lg">
      {/* Background Image */}
      <OptimizedBackground />
      <div className="absolute inset-0 bg-black bg-opacity-40" />

      {/* Content */}
      <div className="relative z-10 flex flex-col items-center justify-center h-full px-4">
        <div className="text-center">
          <h1 className="text-2xl md:text-3xl font-semibold text-white">{name}</h1>
          <p className="text-sm md:text-base text-gray-300 mt-1">{email}</p>
        </div>
        <div className="mt-4">
          <OverallScoreRing overallScore={overallScore} />
        </div>
      </div>

      {/* Dropdown Container - Portal the dropdown menu */}
      <div 
        ref={dropdownRef} 
        className="absolute top-4 right-4 md:top-6 md:right-6"
        style={{ zIndex: 9999 }}
      >
        
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="flex items-center justify-center w-10 h-10 rounded-full 
                   bg-gray-800/50 backdrop-blur-sm hover:bg-gray-700 
                   transition-colors duration-200 focus:outline-none 
                   focus:ring-2 focus:ring-emerald-500 focus:ring-opacity-50"
          aria-expanded={isOpen}
          aria-haspopup="listbox"
          aria-controls="athlete-listbox"
        >
          <motion.div
            animate={{ rotate: isOpen ? 180 : 0 }}
            transition={{ duration: 0.2 }}
          >
            <ChevronDown className="w-5 h-5 text-white" />
          </motion.div>
        </button>

        <AnimatePresence>
          {isOpen && (
            <motion.div
              initial="closed"
              animate="open"
              exit="closed"
              variants={menuVariants}
              className="absolute right-0 mt-2 w-64 bg-gray-800 rounded-lg shadow-lg 
                       ring-1 ring-black ring-opacity-5 max-h-[calc(100vh-120px)]"
              style={{ 
                zIndex: 9999,
                transformOrigin: "top",
                top: "calc(100% + 0.5rem)" // Position directly below button
              }}
            >
              <ul
                id="athlete-listbox"
                role="listbox"
                aria-label="Select athlete"
                className="divide-y divide-gray-700 overflow-y-auto"
              >
                {athletes.map((athlete) => (
                  <li key={athlete.id} role="option" aria-selected={athlete.id === selectedAthleteId}>
                    <button
                      onClick={() => handleAthleteSelect(athlete)}
                      className={`w-full text-left px-4 py-3 text-sm ${
                        athlete.id === selectedAthleteId
                          ? 'bg-gray-700 text-white'
                          : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                      }`}
                    >
                      {athlete.metadata.name}
                    </button>
                  </li>
                ))}
              </ul>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default ProfileHeader;

File: src\components\PWADebug.jsx
================================================================================

import React, { useEffect, useState } from 'react';

const PWADebug = () => {
  const [debug, setDebug] = useState({
    secureContext: false,
    protocol: '',
    hostname: '',
    browserSupport: false,
    manifestPresent: false,
    serviceWorkerSupport: false,
    serviceWorkerActive: false
  });

  useEffect(() => {
    const checkPWASupport = async () => {
      // Check secure context and protocol
      const protocol = window.location.protocol;
      const hostname = window.location.hostname;
      const isSecure = window.isSecureContext;

      // Check manifest
      const manifest = document.querySelector('link[rel="manifest"]');

      // Check service worker
      const swSupport = 'serviceWorker' in navigator;
      let swActive = false;
      if (swSupport) {
        const registration = await navigator.serviceWorker.getRegistration();
        swActive = !!registration?.active;
      }

      setDebug({
        secureContext: isSecure,
        protocol,
        hostname,
        browserSupport: 'BeforeInstallPromptEvent' in window,
        manifestPresent: !!manifest,
        serviceWorkerSupport: swSupport,
        serviceWorkerActive: swActive
      });
    };

    checkPWASupport();
  }, []);

  return (
    <div className="p-4 bg-gray-800 rounded-lg shadow">
      <h2 className="text-lg font-bold text-white mb-4">PWA Debug Info</h2>
      <div className="space-y-2">
        <div className="flex justify-between">
          <span className="text-gray-400">Secure Context:</span>
          <span className={debug.secureContext ? 'text-green-400' : 'text-red-400'}>
            {debug.secureContext ? 'Yes' : 'No'}
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Protocol:</span>
          <span className={debug.protocol === 'https:' ? 'text-green-400' : 'text-yellow-400'}>
            {debug.protocol}
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Hostname:</span>
          <span className="text-white">{debug.hostname}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Browser Support:</span>
          <span className={debug.browserSupport ? 'text-green-400' : 'text-red-400'}>
            {debug.browserSupport ? 'Yes' : 'No'}
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Manifest Present:</span>
          <span className={debug.manifestPresent ? 'text-green-400' : 'text-red-400'}>
            {debug.manifestPresent ? 'Yes' : 'No'}
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Service Worker Support:</span>
          <span className={debug.serviceWorkerSupport ? 'text-green-400' : 'text-red-400'}>
            {debug.serviceWorkerSupport ? 'Yes' : 'No'}
          </span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-400">Service Worker Active:</span>
          <span className={debug.serviceWorkerActive ? 'text-green-400' : 'text-red-400'}>
            {debug.serviceWorkerActive ? 'Yes' : 'No'}
          </span>
        </div>
      </div>
    </div>
  );
};

export default PWADebug;

File: src\components\RadarChart.jsx
================================================================================

// src/components/RadarChart.jsx

import React from 'react';
import { Radar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend
);

/**
 * RadarChart Component
 * @param {Object} props - Component props
 * @param {Array} props.labels - Labels for the radar chart axes
 * @param {Array} props.dataValues - Data values for each axis
 * @param {Function} props.onDataPointClick - Callback when a data point is clicked
 */
const RadarChart = ({ labels, dataValues, onDataPointClick }) => {
  const data = {
    labels,
    datasets: [
      {
        label: 'Category Scores',
        data: dataValues,
        backgroundColor: 'rgba(16, 185, 129, 0.2)',
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 2,
        pointBackgroundColor: 'rgba(16, 185, 129, 1)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(16, 185, 129, 1)',
        pointRadius: 3, // Reduced from 5 to 3
        pointHoverRadius: 7, // Kept or adjusted as needed
        pointHitRadius: 10, // Maintained for consistent touch area
      },
    ],
  };

  const options = {
    responsive: true,
    maintainAspectRatio: false, // Allows the chart to fill the container
    scales: {
      r: {
        beginAtZero: true,
        max: 10,
        ticks: {
          stepSize: 2,
          display: false,
          backdropColor: 'transparent',
        },
        grid: {
          color: '#4b5563',
          lineWidth: 1,
        },
        angleLines: {
          color: '#4b5563',
          lineWidth: 1,
        },
        pointLabels: {
          color: '#e2e8f0',
          font: {
            size: 11,
            family: 'Inter',
          },
          padding: 8,
        },
      },
    },
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        enabled: true,
        backgroundColor: 'rgba(17, 24, 39, 0.95)',
        padding: 8,
        titleFont: {
          size: 12,
          family: 'Inter',
        },
        bodyFont: {
          size: 11,
          family: 'Inter',
        },
        displayColors: false,
        callbacks: {
          title: (items) => labels[items[0].dataIndex],
          label: (item) => `${item.formattedValue}/10`,
        },
      },
    },
    onClick: (event, elements) => {
      if (elements.length > 0 && onDataPointClick) {
        const { index, datasetIndex } = elements[0];
        const label = labels[index];
        const value = dataValues[index];
        onDataPointClick({ label, value, index, datasetIndex });
      }
    },
    // Optional: Change cursor to pointer on hover
    onHover: (event, elements) => {
      const target = event.native.target;
      if (elements.length > 0) {
        target.style.cursor = 'pointer';
      } else {
        target.style.cursor = 'default';
      }
    },
  };

  return (
    <div className="w-full h-full">
      <Radar data={data} options={options} />
    </div>
  );
};

export default RadarChart;


File: src\components\RadialTabs.jsx
================================================================================

// src/components/RadialTabs.jsx

import React from 'react';
import { motion } from 'framer-motion';
import { Home, Brain, Shield, Sword, Activity } from 'lucide-react';

// Utility to merge class names conditionally
const cn = (...classes) => classes.filter(Boolean).join(' ');

// Circular progress component with an icon in the center
const RadialProgress = ({ value = 0, isActive, children }) => {
  const percentage = Math.min(Math.max((value / 10) * 100, 0), 100);
  
  return (
    <div className="relative w-16 h-16">
      {/* Background Circle */}
      <div className="absolute inset-0 rounded-full bg-gray-800" />
      
      {/* Progress Circle */}
      <svg className="absolute inset-0 w-full h-full -rotate-90">
        <circle
          cx="32"
          cy="32"
          r="28"
          strokeWidth="3"
          fill="none"
          className="stroke-gray-700"
        />
        <circle
          cx="32"
          cy="32"
          r="28"
          strokeWidth="3"
          fill="none"
          strokeDasharray={`${percentage * 1.76} 176`}
          className={cn(
            "transition-all duration-300",
            isActive ? "stroke-emerald-500" : "stroke-gray-600"
          )}
        />
      </svg>
      
      {/* Icon */}
      <div className="absolute inset-0 flex items-center justify-center">
        <div className={cn(
          "p-3 rounded-full transition-colors",
          isActive ? "bg-emerald-500 text-white" : "bg-gray-700 text-gray-300"
        )}>
          {children}
        </div>
      </div>
    </div>
  );
};

// Each radial tab button
const TabButton = ({ isActive, onClick, icon, label, score = 0 }) => {
  return (
    <motion.button
      onClick={onClick}
      className="flex flex-col items-center space-y-2 group"
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.95 }}
    >
      <RadialProgress value={score} isActive={isActive}>
        {icon}
      </RadialProgress>
      
      <span className={cn(
        "text-xs font-medium transition-colors",
        isActive ? "text-emerald-400" : "text-gray-400 group-hover:text-gray-300"
      )}>
        {label}
      </span>
    </motion.button>
  );
};

// Radial Tabs Navigation Component
const RadialTabs = ({ activeTab = 'home', onChangeTab = () => {}, averages = {} }) => {
  // Safely get the score for each tab
  const getScore = (key) => (averages && typeof averages[key] === 'number') ? averages[key] : 0;

  // Tabs Configuration
  const TABS = [
    { value: 'home', label: 'Overview', icon: <Home className="w-5 h-5" />, score: getScore('home') },
    { value: 'physical', label: 'Physical', icon: <Activity className="w-5 h-5" />, score: getScore('physical') },
    { value: 'offensive', label: 'Offensive', icon: <Sword className="w-5 h-5" />, score: getScore('offensive') },
    { value: 'defensive', label: 'Defensive', icon: <Shield className="w-5 h-5" />, score: getScore('defensive') },
    { value: 'mental', label: 'Mental', icon: <Brain className="w-5 h-5" />, score: getScore('mental') },
  ];

  return (
    <div className="relative">
      {/* Navigation Background */}
      <div className="absolute inset-0 bg-gradient-to-b from-gray-900 to-gray-800" />
      
      {/* Navigation Buttons */}
      <div className="relative px-6 py-4">
        <div className="flex items-center justify-between max-w-4xl mx-auto">
          {TABS.map((tab) => (
            <TabButton
              key={tab.value}
              isActive={activeTab === tab.value}
              onClick={() => onChangeTab(tab.value)}
              icon={tab.icon}
              label={tab.label}
              score={tab.score}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default RadialTabs;


File: src\components\RatingBar.jsx
================================================================================

// src/components/RatingBar.jsx

import React from 'react';

const RatingBar = ({ value, max = 10 }) => {
  const percentage = (value / max) * 100;
  return (
    <div className="w-full bg-gray-700 rounded-full h-2.5 overflow-hidden">
      <div
        className="h-2.5 bg-emerald-500 transition-all duration-300"
        style={{ width: `${percentage}%` }}
      ></div>
    </div>
  );
};

export default RatingBar;


File: src\components\RingChart.jsx
================================================================================

// src/components/RingChart.jsx

import React from 'react';

const RingChart = ({ label, value }) => {
  const percentage = (value / 10) * 100;

  return (
    <div className="relative w-32 h-32">
      <svg className="w-full h-full" viewBox="0 0 36 36">
        <circle
          className="text-gray-700"
          strokeWidth="3.8"
          stroke="currentColor"
          fill="transparent"
          r="16"
          cx="18"
          cy="18"
        />
        <circle
          className="text-emerald-400"
          strokeWidth="3.8"
          strokeDasharray={`${percentage}, 100`}
          stroke="currentColor"
          fill="transparent"
          r="16"
          cx="18"
          cy="18"
          strokeLinecap="round"
        />
      </svg>
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-lg font-semibold text-gray-100">{value}/10</span>
        <span className="text-sm text-gray-400">{label}</span>
      </div>
    </div>
  );
};

export default RingChart;


File: src\components\RoadmapModal.jsx
================================================================================

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, Trophy, Target, Calendar, 
  Dumbbell, Wind, Users, CheckCircle2
} from 'lucide-react';

const ActionTarget = ({ icon: Icon, title, frequency, progress, total, tags }) => (
  <div className="bg-gray-700/50 rounded-lg p-4 space-y-2">
    <div className="flex items-start gap-3">
      <div className="mt-1">
        <Icon className="w-5 h-5 text-emerald-400" />
      </div>
      <div className="flex-1">
        <h4 className="font-medium text-gray-200">{title}</h4>
        <p className="text-sm text-gray-400">{frequency}</p>
        
        {/* Progress Section */}
        <div className="mt-2">
          <div className="flex justify-between text-xs text-gray-400 mb-1">
            <span>Progress</span>
            <span>{progress} / {total}</span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-1.5">
            <div 
              className="bg-emerald-400 h-1.5 rounded-full transition-all duration-300"
              style={{ width: `${(progress / total) * 100}%` }}
            />
          </div>
        </div>

        {/* Tags */}
        <div className="mt-2 flex flex-wrap gap-2">
          {tags.map((tag, index) => (
            <span 
              key={index}
              className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-700 text-emerald-400"
            >
              {tag}
            </span>
          ))}
        </div>
      </div>

      {/* Completion Status */}
      {progress >= total && (
        <CheckCircle2 className="w-5 h-5 text-emerald-400 flex-shrink-0" />
      )}
    </div>
  </div>
);

const RoadmapModal = ({ isOpen, onClose, player }) => (
  <AnimatePresence>
    {isOpen && (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
      >
        <motion.div
          initial={{ y: '100%' }}
          animate={{ y: 0 }}
          exit={{ y: '100%' }}
          transition={{ type: 'spring', damping: 25 }}
          className="absolute bottom-0 left-0 right-0 bg-gray-900 rounded-t-2xl max-h-[90vh] overflow-auto"
        >
          {/* Header */}
          <div className="sticky top-0 bg-gray-900/95 backdrop-blur-sm p-4 border-b border-gray-800 flex items-center justify-between">
            <h2 className="text-lg font-semibold text-white">Development Roadmap</h2>
            <button
              onClick={onClose}
              className="p-1 rounded-lg hover:bg-gray-800"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Content */}
          <div className="p-4 space-y-6">
            {/* Weekly Action Targets */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Calendar className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">THIS WEEK'S TARGETS</h3>
              </div>
              <div className="space-y-3">
                <ActionTarget 
                  icon={Dumbbell}
                  title="Endurance Training"
                  frequency="3 sessions per week"
                  progress={2}
                  total={3}
                  tags={['Sprints', 'Distance Running', 'HIIT']}
                />
                
                <ActionTarget 
                  icon={Wind}
                  title="Focused Throwing Practice"
                  frequency="3 hours per week"
                  progress={1.5}
                  total={3}
                  tags={['Breaking the Mark', 'Release Points', 'Quick Release']}
                />

                <ActionTarget 
                  icon={Users}
                  title="Joint Training Session"
                  frequency="1 session this week"
                  progress={0}
                  total={1}
                  tags={['Handler Movement', 'Field Vision', 'Team Dynamics']}
                />
              </div>
            </section>

            {/* Monthly Goals */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Target className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">MONTHLY GOALS</h3>
              </div>
              <div className="bg-gray-800 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <span className="w-2 h-2 rounded-full bg-emerald-400 mt-2" />
                  <div>
                    <h4 className="font-medium text-gray-200">Master New Throws</h4>
                    <p className="text-sm text-gray-400">Focus on specialty throws and situations</p>
                    <div className="mt-2">
                      <div className="flex justify-between text-xs text-gray-400 mb-1">
                        <span>Progress</span>
                        <span>60%</span>
                      </div>
                      <div className="w-full bg-gray-700 rounded-full h-1.5">
                        <div className="bg-emerald-400 h-1.5 rounded-full w-3/5" />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>

            {/* Development Path */}
            <section>
              <div className="flex items-center gap-2 mb-3">
                <Trophy className="w-4 h-4 text-emerald-400" />
                <h3 className="text-sm font-medium text-gray-400">DEVELOPMENT PATH</h3>
              </div>
              <div className="bg-gray-800 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <span className="w-2 h-2 rounded-full bg-emerald-400 mt-2" />
                  <div>
                    <h4 className="font-medium text-gray-200">Handler Certification</h4>
                    <p className="text-sm text-gray-400">Complete advanced handler training program</p>
                  </div>
                </div>
              </div>
            </section>
          </div>

          {/* Action Buttons */}
          <div className="sticky bottom-0 bg-gray-900/95 backdrop-blur-sm p-4 border-t border-gray-800">
            <div className="flex gap-3">
              <button className="flex-1 bg-gray-800 text-white py-3 rounded-lg font-medium">
                Log Progress
              </button>
              <button className="flex-1 bg-emerald-500 text-white py-3 rounded-lg font-medium">
                Complete Target
              </button>
            </div>
          </div>
        </motion.div>
      </motion.div>
    )}
  </AnimatePresence>
);

export default RoadmapModal;

File: src\components\RootErrorBoundary.tsx
================================================================================

// src/components/RootErrorBoundary.tsx
import React, { Component, ErrorInfo, ReactNode } from 'react';
import ErrorFallback from './ErrorFallback';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
  errorInfo?: ErrorInfo;
}

class RootErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    // Log error to your error reporting service
    console.error('Root level error:', error);
    console.error('Error info:', errorInfo);
    
    this.setState({
      errorInfo
    });
  }

  private handleReset = () => {
    // Reset error state and reload app
    this.setState({ hasError: false, error: undefined, errorInfo: undefined });
    window.location.reload();
  };

  public render() {
    if (this.state.hasError) {
      return (
        <ErrorFallback
          error={this.state.error}
          resetErrorBoundary={this.handleReset}
        />
      );
    }

    return this.props.children;
  }
}

export default RootErrorBoundary;

File: src\components\SkillCard.jsx
================================================================================

// src/components/SkillCard.jsx

import React from 'react';
import RatingBar from './RatingBar';

const SkillCard = ({ label, value }) => {
  return (
    <div className="flex items-center bg-gray-800 rounded-lg p-3 shadow-sm">
      <div className="flex-1">
        <div className="text-sm font-medium text-gray-100 mb-1">
          {label}
        </div>
        <RatingBar value={value} />
      </div>
      <div className="ml-4 text-emerald-400 font-bold text-lg">
        {value}
      </div>
    </div>
  );
};

export default SkillCard;


File: src\components\SkillHierarchy.jsx
================================================================================

// src/components/SkillHierarchy.jsx
import React from 'react';
import { ChevronRight } from 'lucide-react';
import { averageOfKeys, computeCategoryAverages, computeOverallScore } from '../utils/helpers';

const SkillBar = ({ value, maxValue = 10 }) => (
  <div className="w-24 bg-gray-700 rounded-full h-1.5 overflow-hidden">
    <div
      className="h-1.5 bg-emerald-500 transition-all duration-300"
      style={{ width: `${(value / maxValue) * 100}%` }}
    />
  </div>
);

const SkillNode = ({ label, value, depth = 0, children }) => {
  const hasChildren = React.Children.count(children) > 0;
  
  return (
    <div className="space-y-2">
      <div className={`flex items-center gap-3 ${hasChildren ? 'mb-2' : ''}`}>
        {depth > 0 && (
          <div className="flex items-center">
            <div 
              className="w-4 h-px bg-gray-700"
              style={{ marginLeft: `${(depth - 1) * 16}px` }}
            />
            <ChevronRight className="w-4 h-4 text-gray-600" />
          </div>
        )}
        
        <div className="flex-1 flex items-center justify-between">
          <span className="text-sm font-medium text-gray-300">{label}</span>
          <div className="flex items-center gap-3">
            <SkillBar value={value} />
            <span className="text-sm font-semibold text-emerald-400 w-8">
              {value.toFixed(1)}
            </span>
          </div>
        </div>
      </div>
      
      {hasChildren && (
        <div className="space-y-2">
          {children}
        </div>
      )}
    </div>
  );
};

const SkillHierarchy = ({ player }) => {
  // Get all category averages using helper function
  const categoryAverages = computeCategoryAverages(player);
  const overallScore = computeOverallScore(player);

  // Compute throwing subcategory averages (not included in helpers)
  const throwingSubcategories = {
    backhand: [
      'backhand_power', 'backhand_accuracy', 'backhand_quick_release',
      'backhand_release_variations', 'backhand_against_wind',
      'backhand_against_difficult_marks', 'backhand_tempo_control'
    ],
    forehand: [
      'forehand_power', 'forehand_accuracy', 'forehand_quick_release',
      'forehand_release_variations', 'forehand_against_wind',
      'forehand_against_difficult_marks', 'forehand_tempo_control'
    ],
    specialty: [
      'specialty_power', 'specialty_accuracy', 'specialty_quick_release',
      'specialty_release_variations', 'specialty_against_wind',
      'specialty_against_difficult_marks', 'specialty_tempo_control'
    ],
    hucking: [
      'hucking_confidence', 'hucking_shape_control',
      'hucking_tempo_control', 'hucking_placement'
    ]
  };

  const throwingAverages = {
    backhand: averageOfKeys(player, throwingSubcategories.backhand),
    forehand: averageOfKeys(player, throwingSubcategories.forehand),
    specialty: averageOfKeys(player, throwingSubcategories.specialty),
    hucking: averageOfKeys(player, throwingSubcategories.hucking)
  };

  return (
    <div className="space-y-4">
      <SkillNode label="Overall" value={overallScore}>
        <SkillNode label="Physical" value={categoryAverages.physical} depth={1} />
        <SkillNode label="Mental" value={categoryAverages.mental} depth={1} />
        <SkillNode label="Defensive" value={categoryAverages.defensive} depth={1} />
        <SkillNode label="Offensive" value={categoryAverages.offensive} depth={1}>
          <SkillNode label="Cutting" value={categoryAverages.cutting} depth={2} />
          <SkillNode label="Handling" value={categoryAverages.handling} depth={2} />
          <SkillNode label="Throwing" value={categoryAverages.throwing} depth={2}>
            <SkillNode label="Backhand" value={throwingAverages.backhand} depth={3} />
            <SkillNode label="Forehand" value={throwingAverages.forehand} depth={3} />
            <SkillNode label="Specialty" value={throwingAverages.specialty} depth={3} />
            <SkillNode label="Hucking" value={throwingAverages.hucking} depth={3} />
          </SkillNode>
        </SkillNode>
      </SkillNode>
    </div>
  );
};

export default SkillHierarchy;

File: src\components\SwipeableInsights.jsx
================================================================================

import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence, useAnimation } from 'framer-motion';

const SWIPE_THRESHOLD = 30;
const VELOCITY_THRESHOLD = 200;

const InsightsCard = ({ title, data = [], subtitle }) => (
  <div className="bg-gray-800 p-4 rounded-lg shadow-md w-full">
    <div className="text-gray-300 text-xs font-bold uppercase tracking-widest mb-2">
      <span className="font-semibold text-emerald-400">{title}</span>
      {subtitle && (
        <span className="block text-gray-400 text-xs mt-1 normal-case">
          {subtitle}
        </span>
      )}
    </div>
    {data.map(([skillKey, skillValue], index) => (
      <div key={`${skillKey}-${index}`} className="flex justify-between mb-1">
        <span className="capitalize text-gray-200">
          {skillKey.replace(/_/g, ' ')}
        </span>
        <span className="text-emerald-400 font-semibold">
          {typeof skillValue === 'number' ? `${skillValue}/10` : 'N/A'}
        </span>
      </div>
    ))}
  </div>
);

const SwipeableInsights = ({ player, growthTargets = [] }) => {

    const [currentIndex, setCurrentIndex] = useState(0);
    const [isDragging, setIsDragging] = useState(false);
    const controls = useAnimation();
    const [containerWidth, setContainerWidth] = useState(0);
    const containerRef = useRef(null);
  
    const growthTargetPairs = growthTargets
    .map(targetKey => [
      targetKey.replace(/_/g, ' '),  
      player.skills[targetKey] || 0  // Access skills through player.skills
    ])
    .filter(([_, value]) => typeof value === 'number'); 
  
    useEffect(() => {
      const updateWidth = () => {
        if (containerRef.current) {
          setContainerWidth(containerRef.current.offsetWidth);
        }
      };
      
      updateWidth();
      const resizeObserver = new ResizeObserver(updateWidth);
      
      if (containerRef.current) {
        resizeObserver.observe(containerRef.current);
      }
      
      return () => resizeObserver.disconnect();
    }, []);
  
    const getSortedSkills = () => {
        // Change to access player.skills instead of player directly
        const skillEntries = Object.entries(player.skills)
          .filter(([key, val]) => typeof val === 'number' && !key.includes('id'))
          .sort((a, b) => b[1] - a[1]);
        return skillEntries;
      };
  
    // Call getSortedSkills once and store result
    const sortedSkills = getSortedSkills();
  
    const cards = [
      {
        title: 'Current Growth Targets',
        data: growthTargetPairs,
        subtitle: growthTargetPairs.length === 0 ? 'No growth targets set' : null
      },
      {
        title: 'Top 3 Strengths',
        data: sortedSkills.slice(0, 3)
      },
      {
        title: 'Areas for Improvement',
        data: [...sortedSkills].reverse().slice(0, 3)
      }
    ];

  const snapToIndex = (index) => {
    controls.start({
      x: -index * containerWidth,
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 40,
        mass: 0.8,
        restSpeed: 0.5,
        restDelta: 0.5
      }
    }).then(() => {
      setIsDragging(false);
    });
  };

  const handleDragStart = () => {
    setIsDragging(true);
  };

  const handleDragEnd = (event, info) => {
    const swipe = info.offset.x;
    const velocity = info.velocity.x;
    
    const shouldSwipe = Math.abs(swipe) > SWIPE_THRESHOLD || Math.abs(velocity) > VELOCITY_THRESHOLD;
    
    if (shouldSwipe) {
      const direction = swipe > 0 ? -1 : 1;
      const nextIndex = currentIndex + direction;
      
      if (nextIndex >= 0 && nextIndex < cards.length) {
        setCurrentIndex(nextIndex);
        snapToIndex(nextIndex);
      } else {
        snapToIndex(currentIndex);
      }
    } else {
      snapToIndex(currentIndex);
    }
  };

  const handleDotClick = (index) => {
    if (!isDragging) {
      setCurrentIndex(index);
      snapToIndex(index);
    }
  };

  return (
    <div className="mb-6">
      <h2 className="text-xl font-bold uppercase mb-3 text-gray-100">
        Key Insights
      </h2>
      
      <div ref={containerRef} className="relative insights-container overflow-hidden bg-gray-800 rounded-lg shadow-md">
        <AnimatePresence initial={false}>
          <motion.div
            className="flex"
            style={{ width: `${cards.length * 100}%` }}
            drag="x"
            dragConstraints={{
              left: -containerWidth * (cards.length - 1),
              right: 0
            }}
            dragElastic={0.1}
            dragMomentum={false}
            onDragStart={handleDragStart}
            onDragEnd={handleDragEnd}
            animate={controls}
            initial={{ x: 0 }}
          >
            {cards.map((card, index) => (
              <div
                key={`card-${index}`}
                className="flex-shrink-0"
                style={{ width: containerWidth }}
              >
                <InsightsCard 
                  {...card}
                  key={`insight-${index}`} 
                />
              </div>
            ))}
          </motion.div>
        </AnimatePresence>
      </div>

      {/* Navigation Dots */}
      <div className="flex justify-center mt-4 space-x-3">
        {cards.map((_, index) => (
          <button
            key={`dot-${index}`}
            onClick={() => handleDotClick(index)}
            className={`w-2 h-2 rounded-full transition-all duration-200 ${
              index === currentIndex 
                ? 'bg-emerald-400 scale-110' 
                : 'bg-gray-600 hover:bg-gray-500'
            }`}
            disabled={isDragging}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    </div>
  );
};

export default SwipeableInsights;

File: src\components\Tabs.jsx
================================================================================

// src/components/Tabs.jsx

import React from 'react';

const Tabs = ({ tabs, activeTab, onChange }) => {
  return (
    <div className="flex justify-between bg-gray-800 p-1 rounded-lg gap-1 mb-4">
      {tabs.map((tab) => (
        <button
          key={tab.value}
          onClick={() => onChange(tab.value)}
          className={
            "flex-1 py-2 text-sm font-medium rounded-md transition-colors " +
            (activeTab === tab.value
              ? "bg-emerald-500 text-gray-900 shadow"
              : "text-gray-300 hover:bg-gray-700")
          }
        >
          {tab.label}
        </button>
      ))}
    </div>
  );
};

export default Tabs;


File: src\components\ThrowingSection.jsx
================================================================================

// src/components/ThrowingSection.jsx

import React, { useState } from 'react';
import Tabs from './Tabs';
import CategorySection from './CategorySection';

function ThrowingSection({ throwingData, player }) {
  // Sub-sub tab state
  const [activeThrowTab, setActiveThrowTab] = useState('backhand');

  const throwTabs = [
    { value: 'backhand', label: 'Backhand' },
    { value: 'forehand', label: 'Forehand' },
    { value: 'specialty', label: 'Specialty' },
    { value: 'hucking', label: 'Hucking' },
  ];

  return (
    <div className="mb-4">
      {/* Throwing sub-sub tabs */}
      <Tabs
        tabs={throwTabs}
        activeTab={activeThrowTab}
        onChange={setActiveThrowTab}
      />

      {/* Conditionally render the relevant CategorySection */}
      {activeThrowTab === 'backhand' && (
        <CategorySection
          title="Backhand Skills"
          skills={throwingData.backhand}
          player={player}
        />
      )}
      {activeThrowTab === 'forehand' && (
        <CategorySection
          title="Forehand Skills"
          skills={throwingData.forehand}
          player={player}
        />
      )}
      {activeThrowTab === 'specialty' && (
        <CategorySection
          title="Specialty Skills"
          skills={throwingData.specialty}
          player={player}
        />
      )}
        {activeThrowTab === 'hucking' && (
        <CategorySection
          title="Hucking Skills"
          skills={throwingData.hucking}
          player={player}
        />
        )}
    </div>
  );
}

export default ThrowingSection;


File: src\config\env.ts
================================================================================

// src/config/env.ts
import { EnvironmentVariables } from '../types/environment';

const requiredEnvVars = [
  'REACT_APP_FIREBASE_API_KEY',
  'REACT_APP_FIREBASE_AUTH_DOMAIN',
  'REACT_APP_FIREBASE_PROJECT_ID',
  'REACT_APP_FIREBASE_STORAGE_BUCKET',
  'REACT_APP_FIREBASE_MESSAGING_SENDER_ID',
  'REACT_APP_FIREBASE_APP_ID',
] as const;

const validateEnv = (): void => {
  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      throw new Error(`Missing required environment variable: ${envVar}`);
    }
  }
};

export const getEnvConfig = (): Readonly<EnvironmentVariables> => {
  validateEnv();

  return {
    NODE_ENV: process.env.NODE_ENV || 'development',
    REACT_APP_FIREBASE_API_KEY: process.env.REACT_APP_FIREBASE_API_KEY!,
    REACT_APP_FIREBASE_AUTH_DOMAIN: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN!,
    REACT_APP_FIREBASE_PROJECT_ID: process.env.REACT_APP_FIREBASE_PROJECT_ID!,
    REACT_APP_FIREBASE_STORAGE_BUCKET: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET!,
    REACT_APP_FIREBASE_MESSAGING_SENDER_ID: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID!,
    REACT_APP_FIREBASE_APP_ID: process.env.REACT_APP_FIREBASE_APP_ID!,
    REACT_APP_FIREBASE_MEASUREMENT_ID: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID || '',
    PUBLIC_URL: process.env.PUBLIC_URL || '',
  } as const;
};

File: src\config\firebase.ts
================================================================================

// src/config/firebase.ts
import { initializeApp, FirebaseApp } from "firebase/app";
import { Analytics, getAnalytics } from "firebase/analytics";
import { Auth, getAuth } from "firebase/auth";
import { Firestore, getFirestore } from "firebase/firestore";
import { getEnvConfig } from './env';

// Firebase instance type definitions
interface FirebaseInstances {
  app: FirebaseApp | null;
  analytics: Analytics | null;
  auth: Auth | null;
  db: Firestore | null;
}

// Create a singleton instances object
const instances: FirebaseInstances = {
  app: null,
  analytics: null,
  auth: null,
  db: null
};

// Get environment variables
const env = getEnvConfig();

// Firebase configuration with environment variables
const firebaseConfig = {
  apiKey: env.REACT_APP_FIREBASE_API_KEY,
  authDomain: env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: env.REACT_APP_FIREBASE_APP_ID,
  measurementId: env.REACT_APP_FIREBASE_MEASUREMENT_ID
};

/**
 * Initializes Firebase services.
 * Ensures that Firebase is initialized only once.
 * 
 * @returns {FirebaseApp} The initialized Firebase app instance.
 * @throws {Error} If initialization fails
 */
export const initializeFirebase = (): FirebaseApp => {
  try {
    if (!instances.app) {
      // Initialize Firebase App
      instances.app = initializeApp(firebaseConfig);
      
      // Initialize Firebase Authentication
      instances.auth = getAuth(instances.app);
      
      // Initialize Firestore
      instances.db = getFirestore(instances.app);
      
      // Defer Analytics initialization
      if (typeof window !== 'undefined' && env.NODE_ENV === 'production') {
        setTimeout(() => {
          try {
            instances.analytics = getAnalytics(instances.app!);
          } catch (error) {
            console.warn('Analytics initialization failed:', error);
          }
        }, 2000);
      }
    }

    return instances.app;
  } catch (error) {
    console.error('Firebase initialization failed:', error);
    throw error;
  }
};

// Initialize Firebase immediately
initializeFirebase();

// Export Firebase services with type safety
export const getFirebaseInstances = () => {
  if (!instances.app) {
    throw new Error('Firebase has not been initialized. Call initializeFirebase first.');
  }
  
  return {
    app: instances.app,
    auth: instances.auth!,
    db: instances.db!,
    analytics: instances.analytics
  };
};

// Export individual services for backward compatibility
export const { app, auth, db } = getFirebaseInstances();

File: src\contexts\AuthContext.js
================================================================================

// src/contexts/AuthContext.js
import React, { createContext, useContext, useState, useEffect } from 'react';
import { getAuth } from 'firebase/auth';
import { initializeFirebase } from '../config/firebase';
import { LoadingState } from '../components/LoadingState'; // adjust import path if needed


const AuthContext = createContext({});

// Lazy imports for auth methods
const lazyImportAuth = () => import('firebase/auth').then(module => ({
  signInWithEmailAndPassword: module.signInWithEmailAndPassword,
  createUserWithEmailAndPassword: module.createUserWithEmailAndPassword,
  signInWithPopup: module.signInWithPopup,
  GoogleAuthProvider: module.GoogleAuthProvider,
  signOut: module.signOut,
  sendPasswordResetEmail: module.sendPasswordResetEmail
}));

export function useAuth() {
  return useContext(AuthContext);
}

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [auth, setAuth] = useState(null);

  // Initialize Firebase and Auth lazily
  useEffect(() => {
    const initAuth = async () => {
      const app = initializeFirebase();
      const auth = getAuth(app);
      setAuth(auth);
      
      const { onAuthStateChanged } = await import('firebase/auth');
      const unsubscribe = onAuthStateChanged(auth, (user) => {
        setUser(user);
        setLoading(false);
      });

      return unsubscribe;
    };

    initAuth();
  }, []);

  // Lazy auth methods
  const login = async (email, password) => {
    const { signInWithEmailAndPassword } = await lazyImportAuth();
    return signInWithEmailAndPassword(auth, email, password);
  };

  const signup = async (email, password) => {
    const { createUserWithEmailAndPassword } = await lazyImportAuth();
    return createUserWithEmailAndPassword(auth, email, password);
  };

  const loginWithGoogle = async () => {
    const { signInWithPopup, GoogleAuthProvider } = await lazyImportAuth();
    const provider = new GoogleAuthProvider();
    return signInWithPopup(auth, provider);
  };

  const logout = async () => {
    const { signOut } = await lazyImportAuth();
    return signOut(auth);
  };

  const resetPassword = async (email) => {
    const { sendPasswordResetEmail } = await lazyImportAuth();
    return sendPasswordResetEmail(auth, email);
  };

  const value = {
    user,
    login,
    signup,
    loginWithGoogle,
    logout,
    resetPassword
  };

  if (loading) {
    return <LoadingState />;
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}



File: src\Dashboard.jsx
================================================================================

import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import ProfileHeader from './components/ProfileHeader';
import CategorySection from './components/CategorySection';
import RadarChart from './components/RadarChart';
import OffensiveSection from './components/OffensiveSection';
import RadialTabs from './components/RadialTabs';
import { computeCategoryAverages, computeOverallScore } from './utils/helpers';
import HomeSection from './components/HomeSection';
import { SyncManager } from './utils/sync';
import { InstallPrompt } from './components/InstallPrompt';
import RoadmapModal from './components/RoadmapModal';
import FloatingActionButton from './components/FloatingActionButton';
import './index.css';
import { fetchAthletes } from './services/athleteService';
import { LoadingState } from './components/LoadingState';

function Dashboard() {
  const location = useLocation();
  const navigate = useNavigate();
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [syncPending, setSyncPending] = useState(false);
  const [isRoadmapOpen, setRoadmapOpen] = useState(false);

  // Athlete selection
  const [selectedAthleteId, setSelectedAthleteId] = useState(null);

  // Data fetching states
  const [athletes, setAthletes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch athletes from Firestore
  useEffect(() => {
    const getAthletes = async () => {
      try {
        const data = await fetchAthletes();
        setAthletes(data);
        setLoading(false);

        // URL parameter check for athlete ID
        const searchParams = new URLSearchParams(location.search);
        const athleteIdFromUrl = searchParams.get('id');

        if (athleteIdFromUrl) {
          const athleteExists = data.some(a => a.id === athleteIdFromUrl);
          if (athleteExists) {
            setSelectedAthleteId(athleteIdFromUrl);
          } else {
            console.warn(`[Dashboard] Athlete ID ${athleteIdFromUrl} not found, redirecting.`);
            navigate('/', { replace: true });
          }
        } else if (data.length > 0) {
          // Default to the first athlete
          setSelectedAthleteId(data[0].id);
        }
      } catch (err) {
        console.error('[Dashboard] Error fetching athletes:', err);
        setError('Failed to load athletes.');
        setLoading(false);
      }
    };
    getAthletes();
  }, [location.search, navigate]);

  // Current selected athlete
  const selectedAthlete = athletes.find(a => a.id === selectedAthleteId);

  // Data grouping for categories
  const getCategoryData = (athlete) => ({
    physical: [
      { key: 'speed_explosiveness', label: 'Speed & Explosiveness' },
      { key: 'endurance', label: 'Endurance' },
      { key: 'vertical_leap', label: 'Vertical Leap' },
      { key: 'change_of_direction', label: 'Change of Direction' },
      { key: 'boxing_out', label: 'Boxing Out' },
      { key: 'laying_out', label: 'Laying Out' },
      { key: 'recovery', label: 'Recovery' },
      { key: 'flexibility_mobility', label: 'Flexibility & Mobility' },
      { key: 'injury_prevention', label: 'Injury Prevention' },
    ],
    offensive: {
      cutting: [
        { key: 'angles', label: 'Angles' },
        { key: 'fakes_footwork', label: 'Fakes & Footwork' },
        { key: 'timing_field_vision', label: 'Timing & Field Vision' },
        { key: 'decisiveness', label: 'Decisiveness' },
        { key: 'catching', label: 'Catching' },
        { key: 'flow_awareness', label: 'Flow Awareness' },
        { key: 'isolation_cutting', label: 'Isolation Cutting' },
        { key: 'continuation_cutting', label: 'Continuation Cutting' },
      ],
      handling: [
        { key: 'handler_movement', label: 'Handler Movement' },
        { key: 'poise_with_disc', label: 'Poise w/ Disc' },
        { key: 'breaking_the_mark', label: 'Breaking the Mark' },
        { key: 'resetting_from_trap_sideline', label: 'Reset from Trap' },
        { key: 'decision_making_vision', label: 'Decision Making & Vision' },
        { key: 'offensive_pattern_recognition', label: 'Pattern Recognition' },
        { key: 'throw_and_go', label: 'Throw & Go' },
      ],
      throwing: {
        backhand: [
          { key: 'backhand_power', label: 'Backhand Power' },
          { key: 'backhand_accuracy', label: 'Backhand Accuracy' },
          { key: 'backhand_quick_release', label: 'Backhand Quick Release' },
          { key: 'backhand_release_variations', label: 'Backhand Variations' },
          { key: 'backhand_against_wind', label: 'Backhand vs Wind' },
          { key: 'backhand_against_difficult_marks', label: 'Backhand vs Difficult Marks' },
          { key: 'backhand_tempo_control', label: 'Backhand Tempo Control' },
        ],
        forehand: [
          { key: 'forehand_power', label: 'Forehand Power' },
          { key: 'forehand_accuracy', label: 'Forehand Accuracy' },
          { key: 'forehand_quick_release', label: 'Forehand Quick Release' },
          { key: 'forehand_release_variations', label: 'Forehand Variations' },
          { key: 'forehand_against_wind', label: 'Forehand vs Wind' },
          { key: 'forehand_against_difficult_marks', label: 'Forehand vs Difficult Marks' },
          { key: 'forehand_tempo_control', label: 'Forehand Tempo Control' },
        ],
        specialty: [
          { key: 'specialty_power', label: 'Specialty Power' },
          { key: 'specialty_accuracy', label: 'Specialty Accuracy' },
          { key: 'specialty_quick_release', label: 'Specialty Quick Release' },
          { key: 'specialty_release_variations', label: 'Specialty Variations' },
          { key: 'specialty_against_wind', label: 'Specialty vs Wind' },
          { key: 'specialty_against_difficult_marks', label: 'Specialty vs Difficult Marks' },
          { key: 'specialty_tempo_control', label: 'Specialty Tempo Control' },
        ],
        hucking: [
          { key: 'hucking_confidence', label: 'Hucking Confidence' },
          { key: 'hucking_shape_control', label: 'Hucking Shape Control' },
          { key: 'hucking_tempo_control', label: 'Hucking Tempo Control' },
          { key: 'hucking_placement', label: 'Hucking Placement' },
        ],
      },
    },
    defensive: [
      { key: 'normal_marking', label: 'Normal Marking' },
      { key: 'sideline_trap_marking', label: 'Sideline Trap Marking' },
      { key: 'downfield_defending', label: 'Downfield Defending' },
      { key: 'handler_defending', label: 'Handler Defending' },
      { key: 'defensive_pattern_recognition', label: 'Pattern Recognition' },
      { key: 'help_defense', label: 'Help Defense' },
      { key: 'switching_on_defense', label: 'Switching on Defense' },
      { key: 'zone_defense', label: 'Zone Defense' },
      { key: 'defensive_mental_fortitude', label: 'Defensive Mental Fortitude' },
    ],
    mental: [
      { key: 'mental_game', label: 'Mental Game' },
      { key: 'feedback_implementation', label: 'Feedback Implementation' },
      { key: 'defensive_strategy', label: 'Defensive Team Strategy' },
      { key: 'offensive_strategy', label: 'Offensive Team Strategy' },
    ],
  });

  // Tab management
  const [activeTab, setActiveTab] = useState('home');

  // Precompute main category averages for radial tabs
  const [averages, setAverages] = useState({});
  useEffect(() => {
    if (selectedAthlete) {
      const newAverages = computeCategoryAverages(selectedAthlete);
      setAverages(newAverages);
    }
  }, [selectedAthlete]);

  // Example Throw Comparison Radar
  const radarLabels = [
    'Backhand Power',
    'Forehand Power',
    'Specialty Power',
    'Backhand Accuracy',
    'Forehand Accuracy',
    'Specialty Accuracy',
  ];
  const radarDataValues = selectedAthlete
    ? [
        selectedAthlete.skills.backhand_power,
        selectedAthlete.skills.forehand_power,
        selectedAthlete.skills.specialty_power,
        selectedAthlete.skills.backhand_accuracy,
        selectedAthlete.skills.forehand_accuracy,
        selectedAthlete.skills.specialty_accuracy,
      ]
    : [];

  // Online/Offline status
  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      // Attempt to sync pending data if any
      SyncManager.processSyncQueue();
    };
    const handleOffline = () => {
      setIsOnline(false);
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 flex flex-col">
      {!isOnline && (
        <div className="bg-yellow-600 text-white px-4 py-2 text-center">
          You're offline. Some features may be limited.
        </div>
      )}

      {/* Show custom InstallPrompt for PWA */}
      <InstallPrompt />

      {/** Profile Header (only if selectedAthlete is available) */}
      {selectedAthlete && (
        <ProfileHeader
          name={selectedAthlete.metadata.name}
          email={selectedAthlete.metadata.email}
          overallScore={
            activeTab === 'home'
              ? computeOverallScore(selectedAthlete)
              : averages[activeTab] || 0
          }
          athletes={athletes}
          selectedAthleteId={selectedAthleteId}
          onSelectAthlete={(id) => setSelectedAthleteId(id)}
        />
      )}

      {/** Radial navigation row for main tabs */}
      <RadialTabs
        activeTab={activeTab}
        onChangeTab={setActiveTab}
        averages={averages}
      />

      {/** Main content container */}
      <div className="flex-1 overflow-auto px-4 pb-8 mt-4">
        {/** Loading indicator */}
        {loading && <LoadingState />}

        {/** Error message */}
        {error && (
          <div className="bg-red-600 text-white px-4 py-2 rounded">
            {error}
          </div>
        )}

        {/** Main content if data is loaded */}
        {!loading && !error && selectedAthlete && (
          <>
            {activeTab === 'home' && <HomeSection player={selectedAthlete} />}
            
            {activeTab === 'physical' && (
              <CategorySection
                title="Physical Attributes"
                skills={getCategoryData(selectedAthlete).physical}
                player={selectedAthlete.skills}
              />
            )}

            {activeTab === 'offensive' && (
              <>
                <OffensiveSection
                  offensiveData={getCategoryData(selectedAthlete).offensive}
                  player={selectedAthlete.skills}
                />
                <div className="mt-6">
                  <h2 className="text-xl font-semibold mb-2 text-gray-100">
                    Throw Comparison
                  </h2>
                  <RadarChart labels={radarLabels} dataValues={radarDataValues} />
                </div>
              </>
            )}

            {activeTab === 'defensive' && (
              <CategorySection
                title="Defensive Skills"
                skills={getCategoryData(selectedAthlete).defensive}
                player={selectedAthlete.skills}
              />
            )}

            {activeTab === 'mental' && (
              <CategorySection
                title="Mental & Recovery"
                skills={getCategoryData(selectedAthlete).mental}
                player={selectedAthlete.skills}
              />
            )}

            {/* Roadmap Modal */}
            <RoadmapModal
              isOpen={isRoadmapOpen}
              onClose={() => setRoadmapOpen(false)}
              player={selectedAthlete}
            />
            <FloatingActionButton onClick={() => setRoadmapOpen(true)} />
          </>
        )}
      </div>
    </div>
  );
}

export default Dashboard;


File: src\hooks\usePreloadState.js
================================================================================

// src/hooks/usePreloadState.js
import { useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext'; // Import useAuth

export function usePreloadState() {
  const location = useLocation();
  const navigate = useNavigate();
  const { user } = useAuth(); // Access user from AuthContext

  useEffect(() => {
    // Store current path for direct access
    sessionStorage.setItem('last_path', location.pathname);

    // Preload next likely route based on current path
    if (location.pathname === '/login') {
      // Preload dashboard and its dependencies
      const preloadDashboard = async () => {
        try {
          // Start preloading after a short delay to prioritize login render
          await new Promise(resolve => setTimeout(resolve, 2000));
          await import('../Dashboard');
        } catch (error) {
          console.error('Error preloading Dashboard:', error);
        }
      };
      preloadDashboard();
    }

    // Handle direct access to protected routes
    if (user && location.pathname === '/login') {
      const lastPath = sessionStorage.getItem('last_path') || '/';
      navigate(lastPath, { replace: true });
    }
  }, [location, navigate, user]);

  return {
    currentPath: location.pathname,
    isAuthenticated: !!user, // Use user presence to determine authentication
  };
}


File: src\index.css
================================================================================

/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: 'Inter', sans-serif;
}


File: src\index.tsx
================================================================================

// src/index.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import { BrowserRouter } from 'react-router-dom';
import { registerServiceWorker } from './serviceWorkerRegistration';
import RootErrorBoundary from './components/RootErrorBoundary';
import ErrorFallback from './components/ErrorFallback';
import { getEnvConfig } from './config/env';

const initializeApp = () => {
  try {
    // Validate environment variables
    getEnvConfig();
    
    const rootElement = document.getElementById('root');
    if (!rootElement) throw new Error('Failed to find the root element');
    
    const root = ReactDOM.createRoot(rootElement);

    root.render(
      <React.StrictMode>
        <RootErrorBoundary>
          <BrowserRouter>
            <div className="dark">
              <App />
            </div>
          </BrowserRouter>
        </RootErrorBoundary>
      </React.StrictMode>
    );

    if (process.env.NODE_ENV === 'production') {
      registerServiceWorker();
    }
  } catch (error) {
    // Handle initialization errors
    console.error('Failed to initialize app:', error);
    
    const rootElement = document.getElementById('root');
    if (rootElement) {
      const root = ReactDOM.createRoot(rootElement);
      root.render(
        <ErrorFallback 
          error={error as Error}
          resetErrorBoundary={() => window.location.reload()} 
        />
      );
    }
  }
};

initializeApp();

File: src\reportWebVitals.js
================================================================================

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


File: src\services\athleteService.js
================================================================================

// src/services/athleteService.js

import { collection, getDocs, addDoc, doc, updateDoc, deleteDoc } from 'firebase/firestore';
import { db } from '../config/firebase';

/**
 * Fetch all athletes
 */
export const fetchAthletes = async () => {
  const athletesCol = collection(db, 'athletes');
  const athletesSnapshot = await getDocs(athletesCol);
  const athletesList = athletesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  return athletesList;
};

/**
 * Add a new athlete
 */
export const addAthlete = async (athleteData) => {
  const athletesCol = collection(db, 'athletes');
  const docRef = await addDoc(athletesCol, athleteData);
  return docRef.id;
};

/**
 * Update an athlete
 */
export const updateAthlete = async (id, updatedData) => {
  const athleteDoc = doc(db, 'athletes', id);
  await updateDoc(athleteDoc, updatedData);
};

/**
 * Delete an athlete
 */
export const deleteAthlete = async (id) => {
  const athleteDoc = doc(db, 'athletes', id);
  await deleteDoc(athleteDoc);
};


File: src\serviceWorkerRegistration.js
================================================================================

/* ------------------------------------------
   serviceWorkerRegistration.js (Refactored)
------------------------------------------- */

export function registerServiceWorker() {
  // Check if the browser supports service workers
  if (!('serviceWorker' in navigator)) {
    console.log('[SW] Service workers are not supported in this browser.');
    return;
  }

  // Register the service worker after the window loads
    navigator.serviceWorker
      .register('/service-worker.js')
      .then((registration) => {

        // Listen for updates to the service worker
        registration.addEventListener('updatefound', () => {
          const installingWorker = registration.installing;
          console.log('[SW] New worker installing:', installingWorker);

          // Track the state of the new worker
          installingWorker.addEventListener('statechange', () => {
            console.log('[SW] New worker state:', installingWorker.state);

            if (installingWorker.state === 'installed') {
              if (navigator.serviceWorker.controller) {
                // There's an existing SW, so this is an update
                console.log('[SW] New update available');
                // Optionally, display a notification or UI prompt to the user
              } else {
                // First SW install: content is now cached for offline use
                console.log('[SW] Content cached for offline use');
              }
            }
          });
        });

        // Check if the SW is already controlling the page
        if (navigator.serviceWorker.controller) {
        } else {
          console.log('[SW] Service worker is NOT controlling the page');
        }
      })
      .catch((error) => {
        console.error('[SW] Service worker registration failed:', error);
      });

  // Reload the page when the service worker updates to the new version
  let refreshing = false;
  navigator.serviceWorker.addEventListener('controllerchange', () => {
    if (!refreshing) {
      refreshing = true;
      // Reload the page to allow the new service worker to control
      window.location.reload();
    }
  });

  // Listen for messages from the service worker
  navigator.serviceWorker.addEventListener('message', (event) => {
    console.log('[SW] Received message from service worker:', event.data);
    // For example, handle 'CACHE_UPDATED' messages or other custom events
  });
}


File: src\setupTests.js
================================================================================

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


File: src\types\components.d.ts
================================================================================

// src/types/components.d.ts

export interface LoadingStateProps {
    size?: string;
    color?: string;
    text?: string;
  }
  
  export interface ErrorBoundaryProps {
    children: React.ReactNode;
    fallback: React.ReactElement;
  }
  
  export interface AuthProviderProps {
    children: React.ReactNode;
  }
  
  export interface ProtectedRouteProps {
    children: React.ReactNode;
  }

File: src\types\environment.d.ts
================================================================================

// src/types/environment.d.ts
export interface EnvironmentVariables {
    readonly NODE_ENV: 'development' | 'production' | 'test';
    readonly REACT_APP_FIREBASE_API_KEY: string;
    readonly REACT_APP_FIREBASE_AUTH_DOMAIN: string;
    readonly REACT_APP_FIREBASE_PROJECT_ID: string;
    readonly REACT_APP_FIREBASE_STORAGE_BUCKET: string;
    readonly REACT_APP_FIREBASE_MESSAGING_SENDER_ID: string;
    readonly REACT_APP_FIREBASE_APP_ID: string;
    readonly REACT_APP_FIREBASE_MEASUREMENT_ID: string;
    readonly PUBLIC_URL: string;
  }
  
  declare global {
    namespace NodeJS {
      interface ProcessEnv extends EnvironmentVariables {}
    }
  }

File: src\utils\cache.js
================================================================================

// src/utils/cache.js
export const DataCache = {
    async getPlayer(id) {
      const key = `player-${id}`;
      try {
        const cached = localStorage.getItem(key);
        if (cached) {
          return JSON.parse(cached);
        }
        return null;
      } catch (error) {
        console.error('Error accessing cache:', error);
        return null;
      }
    },
  
    async setPlayer(id, data) {
      const key = `player-${id}`;
      try {
        localStorage.setItem(key, JSON.stringify(data));
      } catch (error) {
        console.error('Error saving to cache:', error);
      }
    }
  };

File: src\utils\constants.js
================================================================================

// src/utils/constants.js

export const METADATA_KEYS = [
    'id',
    'name',
    'email',
    'ip',
    'user_agent',
    'referrer',
    'created_at',
  ];
  

File: src\utils\helpers.js
================================================================================

// src/utils/helpers.js

import { METADATA_KEYS } from './constants';

// A small utility to average numeric values for a given list of keys
export function averageOfKeys(player, keys) {
  let sum = 0, count = 0;
  for (const key of keys) {
    if (typeof player.skills[key] === 'number' && !METADATA_KEYS.includes(key)) {
      sum += player.skills[key];
      count++;
    }
  }
  return count === 0 ? 0 : parseFloat((sum / count).toFixed(1));
}

// Compute category averages for Mental, Physical, Cutting, Throwing, Defense, Handling, Offensive
export function computeCategoryAverages(player) {
  // Define keys for each category
  const categories = {
    mental: [
      'mental_game',
      'feedback_implementation',
      'defensive_strategy',
      'offensive_strategy',

    ],
    physical: [
      'speed_explosiveness',
      'endurance',
      'vertical_leap',
      'change_of_direction',
      'boxing_out',
      'laying_out',
      'recovery',
      'flexibility_mobility',
      'injury_prevention',
    ],
    cutting: [
      'angles',
      'fakes_footwork',
      'timing_field_vision',
      'decisiveness',
      'catching',
      'flow_awareness',
      'isolation_cutting',
      'continuation_cutting',
    ],
    handling: [
      'handler_movement',
      'poise_with_disc',
      'breaking_the_mark',
      'resetting_from_trap_sideline',
      'decision_making_vision',
      'offensive_pattern_recognition',
      'throw_and_go',
    ],
    throwing: [
      // Backhand
      'backhand_power',
      'backhand_accuracy',
      'backhand_quick_release',
      'backhand_release_variations',
      'backhand_against_wind',
      'backhand_against_difficult_marks',
      'backhand_tempo_control',
      // Forehand
      'forehand_power',
      'forehand_accuracy',
      'forehand_quick_release',
      'forehand_release_variations',
      'forehand_against_wind',
      'forehand_against_difficult_marks',
      'forehand_tempo_control',
      // Specialty
      'specialty_power',
      'specialty_accuracy',
      'specialty_quick_release',
      'specialty_release_variations',
      'specialty_against_wind',
      'specialty_against_difficult_marks',
      'specialty_tempo_control',
      // Hucking
      'hucking_confidence',
      'hucking_shape_control',
      'hucking_tempo_control',
      'hucking_placement',
    ],
    defensive: [
      'normal_marking',
      'sideline_trap_marking',
      'downfield_defending',
      'handler_defending',
      'defensive_pattern_recognition',
      'help_defense',
      'switching_on_defense',
      'zone_defense',
      'defensive_mental_fortitude',
    ],
  };

  // Compute individual averages
  const mental = averageOfKeys(player, categories.mental);
  const physical = averageOfKeys(player, categories.physical);
  const cutting = averageOfKeys(player, categories.cutting);
  const handling = averageOfKeys(player, categories.handling);
  const throwing = averageOfKeys(player, categories.throwing);
  const defensive = averageOfKeys(player, categories.defensive);

  // Offensive is the average of cutting, handling, and throwing
  const offensive = parseFloat(((cutting + handling + throwing) / 3).toFixed(1));

  return {
    mental,
    physical,
    cutting,
    handling,
    throwing,
    defensive,
    offensive,
  };
}

// Compute overall score excluding metadata
export function computeOverallScore(player) {
  let sum = 0, count = 0;
  for (const key in player.skills) {
    if (typeof player.skills[key] === 'number' && !METADATA_KEYS.includes(key)) {
      sum += player.skills[key];
      count++;
    }
  }
  return count === 0 ? 0 : parseFloat((sum / count).toFixed(1));
}


File: src\utils\lazyLoad.ts
================================================================================

// src/utils/lazyLoad.ts
import { lazy, ComponentType } from 'react';

interface LazyLoadOptions {
  readonly retry?: number;
  readonly retryDelay?: number;
}

export const lazyLoad = <T extends ComponentType<any>>(
  importPromise: () => Promise<{ default: T }>,
  options: LazyLoadOptions = {}
) => {
  const { retry = 1, retryDelay = 1000 } = options;

  const retryImport = (attemptsLeft: number, delay: number): Promise<{ default: T }> => {
    return importPromise().catch((error: Error) => {
      if (attemptsLeft <= 1) {
        console.error('Lazy load failed after retries:', error);
        return Promise.reject(error);
      }
      return new Promise((resolve) => setTimeout(resolve, delay)).then(() =>
        retryImport(attemptsLeft - 1, delay)
      );
    });
  };

  return lazy(() => retryImport(retry, retryDelay));
};


File: src\utils\slugify.js
================================================================================

// src/utils/slugify.js
import slugify from 'slugify';

export const createAthleteSlug = (name) => {
  return slugify(name, {
    lower: true,       // Convert to lowercase
    strict: true,      // Remove special characters
    remove: /[*+~.()'"!:@]/g, // Additional character removal if needed
  });
};


File: src\utils\sync.js
================================================================================

// src/utils/sync.js
export const SyncManager = {
    async queueSync(action, data) {
      const syncQueue = JSON.parse(localStorage.getItem('syncQueue') || '[]');
      syncQueue.push({ action, data, timestamp: Date.now() });
      localStorage.setItem('syncQueue', JSON.stringify(syncQueue));
    },
  
    async processSyncQueue() {
      if (!navigator.onLine) return;
  
      const syncQueue = JSON.parse(localStorage.getItem('syncQueue') || '[]');
      if (syncQueue.length === 0) return;
  
      for (const item of syncQueue) {
        try {
          // Process sync item
          await this.processItem(item);
          // Remove from queue if successful
          const newQueue = syncQueue.filter(i => i !== item);
          localStorage.setItem('syncQueue', JSON.stringify(newQueue));
        } catch (error) {
          console.error('Sync failed for item:', item, error);
        }
      }
    }
  };

